<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="3.2" jmeter="3.3 r1808647">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1514014914000</longProp>
        <longProp name="ThreadGroup.end_time">1514014914000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="uatserver" elementType="Argument">
              <stringProp name="Argument.name">uatserver</stringProp>
              <stringProp name="Argument.value">pcr-uat.iso.com</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="csv" elementType="Argument">
              <stringProp name="Argument.name">csv</stringProp>
              <stringProp name="Argument.value">${__property(csvSource,,C://Users//i20918//Desktop//PCR//pcr_automation//pcr_test//develop//pcr.test//API//PCRTestJAR//src//test//resources)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.desc">C://Users//i20918//Desktop//PCR//APITestData</stringProp>
            </elementProp>
            <elementProp name="Environment" elementType="Argument">
              <stringProp name="Argument.name">Environment</stringProp>
              <stringProp name="Argument.value">${__property(Server,,uat)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="stgserver" elementType="Argument">
              <stringProp name="Argument.name">stgserver</stringProp>
              <stringProp name="Argument.value">staging-content.iso.com</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="prodserver" elementType="Argument">
              <stringProp name="Argument.name">prodserver</stringProp>
              <stringProp name="Argument.value">pcr-content.iso.com</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="uatSolr" elementType="Argument">
              <stringProp name="Argument.name">uatSolr</stringProp>
              <stringProp name="Argument.value">10.93.204.24</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="stagingSolr" elementType="Argument">
              <stringProp name="Argument.name">stagingSolr</stringProp>
              <stringProp name="Argument.value">0931-pcrslr-u01.veriska.local</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="prodSolr" elementType="Argument">
              <stringProp name="Argument.name">prodSolr</stringProp>
              <stringProp name="Argument.value">10.53.196.25</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="devserver" elementType="Argument">
              <stringProp name="Argument.name">devserver</stringProp>
              <stringProp name="Argument.value">pcr-uat.iso.com</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="devSolr" elementType="Argument">
              <stringProp name="Argument.name">devSolr</stringProp>
              <stringProp name="Argument.value">10.93.204.103</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="prodSQL" elementType="Argument">
              <stringProp name="Argument.name">prodSQL</stringProp>
              <stringProp name="Argument.value">jdbc:sqlserver://intsql01.isonet-dmz.com:3341;databasename=dpr0006p</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="AccptSQL" elementType="Argument">
              <stringProp name="Argument.name">AccptSQL</stringProp>
              <stringProp name="Argument.value">jdbc:sqlserver://acceptsql1.isonet-accp.com:3341;databasename=ddm0005p</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Content-Type</stringProp>
              <stringProp name="Header.value">application/json</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="false">
          <stringProp name="BeanShellSampler.query">
		
		if(vars.get(&quot;Environment&quot;).equalsIgnoreCase(&quot;prod&quot;))
		{
			vars.put(&quot;server&quot;,vars.get(&quot;prodserver&quot;));
			
		}
		else if(vars.get(&quot;Environment&quot;).equalsIgnoreCase(&quot;Staging&quot;))
		{
			vars.put(&quot;server&quot;,vars.get(&quot;stgserver&quot;));
			
   		     //MongoCredential abc = MongoCredential.createScramSha1Credential(&quot;PIDPCRBPA&quot;,&quot;admin&quot;,&apos;pRU6Refe\$&apos;.toCharArray());
			vars.put(&quot;Mongodbserver&quot;,&quot;0931-PCRMGD-U01.veriska.local&quot;);
			vars.put(&quot;Mongodbserverport&quot;,&quot;27017&quot;);
			
			vars.put(&quot;solrServer&quot;,vars.get(&quot;stagingSolr&quot;));
			vars.put(&quot;userName&quot;,&quot;PIDPCRBPA&quot;);
			//vars.put(&quot;passWord&quot;,&quot;pRU6Refe\$&quot;);
			vars.put(&quot;source&quot;,&quot;admin&quot;);
			
		}
		else if(vars.get(&quot;Environment&quot;).equalsIgnoreCase(&quot;uat&quot;))
		{
			vars.put(&quot;server&quot;,vars.get(&quot;uatserver&quot;));
			vars.put(&quot;Mongodbserver&quot;,&quot;10.93.204.78&quot;);
			vars.put(&quot;Mongodbserverport&quot;,&quot;27017&quot;);
			vars.put(&quot;solrServer&quot;,vars.get(&quot;uatSolr&quot;));
			//vars.put(&quot;Mongodbserver&quot;,&quot;0931-PCRMGD-U01.veriska.local&quot;);
			//vars.put(&quot;Mongodbserverport&quot;,&quot;27017&quot;);
			}</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler" enabled="true">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey"></stringProp>
          <stringProp name="script">import com.mongodb.MongoClient;
import com.mongodb.MongoException;
import com.mongodb.MongoCredential;
import java.util.Arrays;
import java.util.List;
import java.util.ArrayList;
import org.apache.jmeter.util.JMeterUtils;
import com.mongodb.*;




MongoClient coreMongoClient;
		
		if(vars.get(&quot;Environment&quot;).equalsIgnoreCase(&quot;prod&quot;))
		{
			vars.put(&quot;server&quot;,vars.get(&quot;prodserver&quot;));
			vars.put(&quot;Mongodbserver&quot;,&quot;0931-PCRMGD-P01.veriskp.local&quot;);
			vars.put(&quot;Mongodbserverport&quot;,&quot;27017&quot;);
			vars.put(&quot;solrServer&quot;,vars.get(&quot;prodSolr&quot;));
			vars.put(&quot;userName&quot;,&quot;PCRREADUSRP&quot;);
			vars.put(&quot;source&quot;,&quot;admin&quot;);
			
			MongoCredential mongoCredential = MongoCredential.createScramSha1Credential(&quot;PCRREADUSRP&quot;,&quot;admin&quot;,&apos;6rUbEwu#\$&apos;.toCharArray());
    			coreMongoClient = new MongoClient(new ServerAddress(&quot;0931-PCRMGD-P01.veriskp.local&quot;, 27017), Arrays.asList(mongoCredential));
    			
    			vars.put(&quot;prodSQLUrl&quot;,vars.get(&quot;prodSQL&quot;));
			vars.put(&quot;SQLUser&quot;,&quot; PIDIPUBP&quot;);
			vars.put(&quot;SQLPass&quot;,&quot;tUtrA5uT&quot;);
		}
			
		else if(vars.get(&quot;Environment&quot;).equalsIgnoreCase(&quot;stg&quot;))
		{
			vars.put(&quot;server&quot;,vars.get(&quot;stgserver&quot;));
			vars.put(&quot;Mongodbserver&quot;,&quot;0931-PCRMGD-U01.veriska.local&quot;);
			vars.put(&quot;Mongodbserverport&quot;,&quot;27017&quot;);
			vars.put(&quot;solrServer&quot;,vars.get(&quot;stagingSolr&quot;));
			vars.put(&quot;userName&quot;,&quot;PIDPCRBPA&quot;);
			//vars.put(&quot;passWord&quot;,&apos;pRU6Refe\$&apos;);
			//char[] pass=&apos;pRU6Refe$&apos;;
			//&apos;pRU6Refe\$&apos;.toCharArray()
			vars.put(&quot;source&quot;,&quot;admin&quot;);
			MongoCredential mongoCredential = MongoCredential.createScramSha1Credential(&quot;PIDPCRBPA&quot;,&quot;admin&quot;,&apos;pRU6Refe\$&apos;.toCharArray());
    			coreMongoClient = new MongoClient(new ServerAddress(&quot;0931-PCRMGD-U01.veriska.local&quot;, 27017),Arrays.asList(mongoCredential));

    			vars.put(&quot;sqlurl&quot;,vars.get(&quot;prodAccpt&quot;));
    			vars.put(&quot;SQLUser&quot;,&quot; PIDIPUBA&quot;);
			vars.put(&quot;SQLPass&quot;,&quot;cA7taxet&quot;);
    		}
    		
		else if(vars.get(&quot;Environment&quot;).equalsIgnoreCase(&quot;uat&quot;))
		{
			vars.put(&quot;server&quot;,vars.get(&quot;uatserver&quot;));
			vars.put(&quot;Mongodbserver&quot;,&quot;10.93.204.78&quot;);
			
			vars.put(&quot;Mongodbserverport&quot;,&quot;27017&quot;);
			vars.put(&quot;solrServer&quot;,vars.get(&quot;uatSolr&quot;));
			coreMongoClient = new MongoClient(&quot;10.93.204.78&quot;, 27017);
			
			vars.put(&quot;sqlurl&quot;,vars.get(&quot;prodAccpt&quot;));
    			vars.put(&quot;SQLUser&quot;,&quot; PIDIPUBA&quot;);
			vars.put(&quot;SQLPass&quot;,&quot;cA7taxet&quot;);
			
			
			
			//vars.put(&quot;Mongodbserver&quot;,&quot;0931-PCRMGD-U01.veriska.local&quot;);
			//vars.put(&quot;Mongodbserverport&quot;,&quot;27017&quot;);
		}

		else if(vars.get(&quot;Environment&quot;).equalsIgnoreCase(&quot;dev&quot;))
		{
			vars.put(&quot;server&quot;,vars.get(&quot;devserver&quot;));
			vars.put(&quot;Mongodbserver&quot;,&quot;10.93.204.215&quot;);
			
			vars.put(&quot;Mongodbserverport&quot;,&quot;27017&quot;);
			vars.put(&quot;solrServer&quot;,vars.get(&quot;devSolr&quot;));
			coreMongoClient = new MongoClient(&quot;10.93.204.215&quot;, 27017);
			
			
			
			//vars.put(&quot;Mongodbserver&quot;,&quot;0931-PCRMGD-U01.veriska.local&quot;);
			//vars.put(&quot;Mongodbserverport&quot;,&quot;27017&quot;);
		}

		Properties properties=JMeterUtils.getJMeterProperties();
		properties.put(&quot;coreMongoClient&quot;,coreMongoClient);
	 
			
			  

			  




    


    
    
    
    </stringProp>
        </JSR223Sampler>
        <hashTree/>
        <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="Acceptance_JDBC Connection Configuration- DB2_Connection" enabled="true">
          <stringProp name="dataSource">db2Connection_MLC_uat</stringProp>
          <stringProp name="poolMax">0</stringProp>
          <stringProp name="timeout">10000</stringProp>
          <stringProp name="trimInterval">60000</stringProp>
          <boolProp name="autocommit">true</boolProp>
          <stringProp name="transactionIsolation">DEFAULT</stringProp>
          <boolProp name="keepAlive">true</boolProp>
          <stringProp name="connectionAge">5000</stringProp>
          <stringProp name="checkQuery"></stringProp>
          <stringProp name="dbUrl">jdbc:db2://DB2ACCP.iso.com:2452/DB2A</stringProp>
          <stringProp name="driver">com.ibm.db2.jcc.DB2Driver</stringProp>
          <stringProp name="username">PIDIPUBA</stringProp>
          <stringProp name="password">cA7taxet</stringProp>
        </JDBCDataSource>
        <hashTree/>
        <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="Acceptance_JDBC Connection Configuration- DB2_Connection" enabled="true">
          <stringProp name="dataSource">db2Connection_FLV_uat</stringProp>
          <stringProp name="poolMax">0</stringProp>
          <stringProp name="timeout">10000</stringProp>
          <stringProp name="trimInterval">60000</stringProp>
          <boolProp name="autocommit">true</boolProp>
          <stringProp name="transactionIsolation">DEFAULT</stringProp>
          <boolProp name="keepAlive">true</boolProp>
          <stringProp name="connectionAge">5000</stringProp>
          <stringProp name="checkQuery"></stringProp>
          <stringProp name="dbUrl">jdbc:db2://DB2ACCP.iso.com:2452/DB2A</stringProp>
          <stringProp name="driver">com.ibm.db2.jcc.DB2Driver</stringProp>
          <stringProp name="username">PIDIPUBA</stringProp>
          <stringProp name="password">cA7taxet</stringProp>
        </JDBCDataSource>
        <hashTree/>
        <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="Acceptance_JDBC Connection Configuration-SQL Server" enabled="true">
          <boolProp name="autocommit">true</boolProp>
          <stringProp name="checkQuery"></stringProp>
          <stringProp name="connectionAge">5000</stringProp>
          <stringProp name="dataSource">myDatabase_uat</stringProp>
          <stringProp name="dbUrl">jdbc:sqlserver://acceptsql1.isonet-accp.com:3341;databasename=ddm0005p</stringProp>
          <stringProp name="driver">com.microsoft.sqlserver.jdbc.SQLServerDriver</stringProp>
          <boolProp name="keepAlive">true</boolProp>
          <stringProp name="password">cA7taxet</stringProp>
          <stringProp name="poolMax">2</stringProp>
          <stringProp name="timeout">10000</stringProp>
          <stringProp name="transactionIsolation">DEFAULT</stringProp>
          <stringProp name="trimInterval">60000</stringProp>
          <stringProp name="username">PIDIPUBA</stringProp>
        </JDBCDataSource>
        <hashTree/>
        <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="Acceptance_JDBC Connection Configuration-SQL-CLM Server" enabled="true">
          <boolProp name="autocommit">true</boolProp>
          <stringProp name="checkQuery"></stringProp>
          <stringProp name="connectionAge">5000</stringProp>
          <stringProp name="dataSource">myDatabase-CLM_uat</stringProp>
          <stringProp name="dbUrl">jdbc:sqlserver://acceptsql1.isonet-accp.com:3341;databasename=DPR0006P</stringProp>
          <stringProp name="driver">com.microsoft.sqlserver.jdbc.SQLServerDriver</stringProp>
          <boolProp name="keepAlive">true</boolProp>
          <stringProp name="password">cA7taxet</stringProp>
          <stringProp name="poolMax">2</stringProp>
          <stringProp name="timeout">10000</stringProp>
          <stringProp name="transactionIsolation">DEFAULT</stringProp>
          <stringProp name="trimInterval">60000</stringProp>
          <stringProp name="username">PIDIPUBA</stringProp>
        </JDBCDataSource>
        <hashTree/>
        <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="Acceptance_JDBC Connection Configuration-SQL- PRM Server" enabled="true">
          <boolProp name="autocommit">true</boolProp>
          <stringProp name="checkQuery"></stringProp>
          <stringProp name="connectionAge">5000</stringProp>
          <stringProp name="dataSource">myDatabase-PRM_uat</stringProp>
          <stringProp name="dbUrl">jdbc:sqlserver://acceptsql1.isonet-accp.com:3341;databasename=DDM0001p</stringProp>
          <stringProp name="driver">com.microsoft.sqlserver.jdbc.SQLServerDriver</stringProp>
          <boolProp name="keepAlive">true</boolProp>
          <stringProp name="password">cA7taxet</stringProp>
          <stringProp name="poolMax">2</stringProp>
          <stringProp name="timeout">10000</stringProp>
          <stringProp name="transactionIsolation">DEFAULT</stringProp>
          <stringProp name="trimInterval">60000</stringProp>
          <stringProp name="username">PIDIPUBA</stringProp>
        </JDBCDataSource>
        <hashTree/>
        <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="STG_JDBC Connection Configuration- DB2_Connection" enabled="true">
          <stringProp name="dataSource">db2Connection_MLC_stg</stringProp>
          <stringProp name="poolMax">0</stringProp>
          <stringProp name="timeout">10000</stringProp>
          <stringProp name="trimInterval">60000</stringProp>
          <boolProp name="autocommit">true</boolProp>
          <stringProp name="transactionIsolation">DEFAULT</stringProp>
          <boolProp name="keepAlive">true</boolProp>
          <stringProp name="connectionAge">5000</stringProp>
          <stringProp name="checkQuery"></stringProp>
          <stringProp name="dbUrl">jdbc:db2://DB2ACCP.iso.com:2452/DB2A</stringProp>
          <stringProp name="driver">com.ibm.db2.jcc.DB2Driver</stringProp>
          <stringProp name="username">PIDIPUBA</stringProp>
          <stringProp name="password">cA7taxet</stringProp>
        </JDBCDataSource>
        <hashTree/>
        <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="STG_JDBC Connection Configuration- DB2_Connection" enabled="true">
          <stringProp name="dataSource">db2Connection_FLV_stg</stringProp>
          <stringProp name="poolMax">0</stringProp>
          <stringProp name="timeout">10000</stringProp>
          <stringProp name="trimInterval">60000</stringProp>
          <boolProp name="autocommit">true</boolProp>
          <stringProp name="transactionIsolation">DEFAULT</stringProp>
          <boolProp name="keepAlive">true</boolProp>
          <stringProp name="connectionAge">5000</stringProp>
          <stringProp name="checkQuery"></stringProp>
          <stringProp name="dbUrl">jdbc:db2://DB2ACCP.iso.com:2452/DB2A</stringProp>
          <stringProp name="driver">com.ibm.db2.jcc.DB2Driver</stringProp>
          <stringProp name="username">PIDIPUBA</stringProp>
          <stringProp name="password">cA7taxet</stringProp>
        </JDBCDataSource>
        <hashTree/>
        <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="STG_JDBC Connection Configuration-SQL Server" enabled="true">
          <boolProp name="autocommit">true</boolProp>
          <stringProp name="checkQuery"></stringProp>
          <stringProp name="connectionAge">5000</stringProp>
          <stringProp name="dataSource">myDatabase_stg</stringProp>
          <stringProp name="dbUrl">jdbc:sqlserver://acceptsql1.isonet-accp.com:3341;databasename=ddm0005p</stringProp>
          <stringProp name="driver">com.microsoft.sqlserver.jdbc.SQLServerDriver</stringProp>
          <boolProp name="keepAlive">true</boolProp>
          <stringProp name="password">cA7taxet</stringProp>
          <stringProp name="poolMax">2</stringProp>
          <stringProp name="timeout">10000</stringProp>
          <stringProp name="transactionIsolation">DEFAULT</stringProp>
          <stringProp name="trimInterval">60000</stringProp>
          <stringProp name="username">PIDIPUBA</stringProp>
        </JDBCDataSource>
        <hashTree/>
        <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="STG_JDBC Connection Configuration-SQL-CLM Server" enabled="true">
          <boolProp name="autocommit">true</boolProp>
          <stringProp name="checkQuery"></stringProp>
          <stringProp name="connectionAge">5000</stringProp>
          <stringProp name="dataSource">myDatabase-CLM_stg</stringProp>
          <stringProp name="dbUrl">jdbc:sqlserver://acceptsql1.isonet-accp.com:3341;databasename=DPR0006P</stringProp>
          <stringProp name="driver">com.microsoft.sqlserver.jdbc.SQLServerDriver</stringProp>
          <boolProp name="keepAlive">true</boolProp>
          <stringProp name="password">cA7taxet</stringProp>
          <stringProp name="poolMax">2</stringProp>
          <stringProp name="timeout">10000</stringProp>
          <stringProp name="transactionIsolation">DEFAULT</stringProp>
          <stringProp name="trimInterval">60000</stringProp>
          <stringProp name="username">PIDIPUBA</stringProp>
        </JDBCDataSource>
        <hashTree/>
        <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="STG_JDBC Connection Configuration-SQL- PRM Server" enabled="true">
          <boolProp name="autocommit">true</boolProp>
          <stringProp name="checkQuery"></stringProp>
          <stringProp name="connectionAge">5000</stringProp>
          <stringProp name="dataSource">myDatabase-PRM_stg</stringProp>
          <stringProp name="dbUrl">jdbc:sqlserver://acceptsql1.isonet-accp.com:3341;databasename=DDM0001p</stringProp>
          <stringProp name="driver">com.microsoft.sqlserver.jdbc.SQLServerDriver</stringProp>
          <boolProp name="keepAlive">true</boolProp>
          <stringProp name="password">cA7taxet</stringProp>
          <stringProp name="poolMax">2</stringProp>
          <stringProp name="timeout">10000</stringProp>
          <stringProp name="transactionIsolation">DEFAULT</stringProp>
          <stringProp name="trimInterval">60000</stringProp>
          <stringProp name="username">PIDIPUBA</stringProp>
        </JDBCDataSource>
        <hashTree/>
        <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="PROD_JDBC Connection Configuration- DB2_Connection" enabled="true">
          <stringProp name="dataSource">db2Connection_MLC_prod</stringProp>
          <stringProp name="poolMax">0</stringProp>
          <stringProp name="timeout">10000</stringProp>
          <stringProp name="trimInterval">60000</stringProp>
          <boolProp name="autocommit">true</boolProp>
          <stringProp name="transactionIsolation">DEFAULT</stringProp>
          <boolProp name="keepAlive">true</boolProp>
          <stringProp name="connectionAge">5000</stringProp>
          <stringProp name="checkQuery"></stringProp>
          <stringProp name="dbUrl">jdbc:db2://isomvsd.iso.com:2550/DB2I</stringProp>
          <stringProp name="driver">com.ibm.db2.jcc.DB2Driver</stringProp>
          <stringProp name="username">PIDIPUBP</stringProp>
          <stringProp name="password">tUtrA5uT</stringProp>
        </JDBCDataSource>
        <hashTree/>
        <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="PROD_JDBC Connection Configuration- DB2_Connection" enabled="true">
          <stringProp name="dataSource">db2Connection_FLV_prod</stringProp>
          <stringProp name="poolMax">0</stringProp>
          <stringProp name="timeout">10000</stringProp>
          <stringProp name="trimInterval">60000</stringProp>
          <boolProp name="autocommit">true</boolProp>
          <stringProp name="transactionIsolation">DEFAULT</stringProp>
          <boolProp name="keepAlive">true</boolProp>
          <stringProp name="connectionAge">5000</stringProp>
          <stringProp name="checkQuery"></stringProp>
          <stringProp name="dbUrl">jdbc:db2://isomvsg.iso.com:2454/DB2</stringProp>
          <stringProp name="driver">com.ibm.db2.jcc.DB2Driver</stringProp>
          <stringProp name="username">PIDIPUBP</stringProp>
          <stringProp name="password">tUtrA5uT</stringProp>
        </JDBCDataSource>
        <hashTree/>
        <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="PROD_JDBC Connection Configuration-SQL Server" enabled="true">
          <boolProp name="autocommit">true</boolProp>
          <stringProp name="checkQuery"></stringProp>
          <stringProp name="connectionAge">5000</stringProp>
          <stringProp name="dataSource">myDatabase_prod</stringProp>
          <stringProp name="dbUrl">jdbc:sqlserver://intsql01.isonet-dmz.com:3341;databasename=dpr0006p</stringProp>
          <stringProp name="driver">com.microsoft.sqlserver.jdbc.SQLServerDriver</stringProp>
          <boolProp name="keepAlive">true</boolProp>
          <stringProp name="password">cA7taxet</stringProp>
          <stringProp name="poolMax">2</stringProp>
          <stringProp name="timeout">10000</stringProp>
          <stringProp name="transactionIsolation">DEFAULT</stringProp>
          <stringProp name="trimInterval">60000</stringProp>
          <stringProp name="username">PIDIPUBA</stringProp>
        </JDBCDataSource>
        <hashTree/>
        <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="PROD_JDBC Connection Configuration-SQL-CLM Server" enabled="true">
          <boolProp name="autocommit">true</boolProp>
          <stringProp name="checkQuery"></stringProp>
          <stringProp name="connectionAge">5000</stringProp>
          <stringProp name="dataSource">myDatabase-CLM_prod</stringProp>
          <stringProp name="dbUrl">jdbc:sqlserver://intsql01.isonet-dmz.com:3341;databasename=DPR0006P</stringProp>
          <stringProp name="driver">com.microsoft.sqlserver.jdbc.SQLServerDriver</stringProp>
          <boolProp name="keepAlive">true</boolProp>
          <stringProp name="password">cA7taxet</stringProp>
          <stringProp name="poolMax">2</stringProp>
          <stringProp name="timeout">10000</stringProp>
          <stringProp name="transactionIsolation">DEFAULT</stringProp>
          <stringProp name="trimInterval">60000</stringProp>
          <stringProp name="username">PIDIPUBA</stringProp>
        </JDBCDataSource>
        <hashTree/>
        <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="PROD_JDBC Connection Configuration-SQL- PRM Server" enabled="true">
          <boolProp name="autocommit">true</boolProp>
          <stringProp name="checkQuery"></stringProp>
          <stringProp name="connectionAge">5000</stringProp>
          <stringProp name="dataSource">myDatabase-PRM_prod</stringProp>
          <stringProp name="dbUrl">jdbc:sqlserver://intsql01.isonet-dmz.com:3341;databasename=DDM0001p</stringProp>
          <stringProp name="driver">com.microsoft.sqlserver.jdbc.SQLServerDriver</stringProp>
          <boolProp name="keepAlive">true</boolProp>
          <stringProp name="password">cA7taxet</stringProp>
          <stringProp name="poolMax">2</stringProp>
          <stringProp name="timeout">10000</stringProp>
          <stringProp name="transactionIsolation">DEFAULT</stringProp>
          <stringProp name="trimInterval">60000</stringProp>
          <stringProp name="username">PIDIPUBA</stringProp>
        </JDBCDataSource>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request" enabled="false">
          <stringProp name="dataSource">db2Connection</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">SELECT COUNT(1) FROM (SELECT A.c_pma             AS PMA, 
       A.c_noc             AS noc, 
       A.c_cls_tbl_st      AS muState, 
       C.t_cls_tbl_dsc     AS classDescription, 
       A.i_cls_tbl_id      AS classTableId, 
       A.c_lob_abrv        AS lob, 
       B.c_cls_tbl_st      AS classTableState, 
       A.i_ntm             AS ntm, 
       A.c_cls_cd          AS classId, 
       A.c_prem_bs         AS premiumBase, 
       A.c_rt_grp          AS rateGroup, 
       A.c_cls_lmt         AS classLimit, 
       A.d_cls_lob_dt      AS last_update_date, 
       B.c_spcf_st         AS state, 
       B.d_cls_lob_st_eff  AS effectiveDate, 
       B.d_cls_lob_st_exp  AS expirationDate, 
       B.t_eff_ntm         AS effectiveNTM, 
       B.t_exp_ntm         AS expirationNTM, 
       B.d_cls_lob_st_modf AS last_update_date 
FROM   iso02.dmv01800 C, 
       iso02.dmv01801 A, 
       iso02.dmv01803 B 
WHERE  C.i_cls_tbl_id = A.i_cls_tbl_id 
       AND A.i_cls_tbl_id = B.i_cls_tbl_id 
       AND A.i_ntm = B.i_ntm 
       AND A.c_lob_abrv = B.c_lob_abrv 
       AND B.D_CLS_LOB_ST_EXP &gt; B.D_CLS_LOB_ST_EFF) A
</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">countdb2</stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree/>
        <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="While Controller" enabled="true">
          <stringProp name="WhileController.condition">${__javaScript(&quot;${contentType}&quot; != &quot;&lt;EOF&gt;&quot;,)} </stringProp>
        </WhileController>
        <hashTree>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
            <stringProp name="delimiter">,</stringProp>
            <stringProp name="fileEncoding"></stringProp>
            <stringProp name="filename">${csv}/PCRCOUNT_${Environment}.csv</stringProp>
            <boolProp name="quotedData">true</boolProp>
            <boolProp name="recycle">false</boolProp>
            <stringProp name="shareMode">shareMode.all</stringProp>
            <boolProp name="stopThread">false</boolProp>
            <stringProp name="variableNames">contentType,groupFields,clientId,uatactiveSolrCollection </stringProp>
            <boolProp name="ignoreFirstLine">true</boolProp>
          </CSVDataSet>
          <hashTree/>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
            <stringProp name="IfController.condition">&quot;${contentType}&quot; != &quot;&lt;EOF&gt;&quot;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller-FRM" enabled="true">
              <stringProp name="IfController.condition">&quot;${contentType}&quot;.equalsIgnoreCase(&quot;FRM&quot;)</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
            </IfController>
            <hashTree>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request-FRM Parent (Sql server)" enabled="true">
                <stringProp name="dataSource">myDatabase_${Environment}</stringProp>
                <stringProp name="query">SELECT Count(DISTINCT T.formNumber) 
FROM   (SELECT DISTINCT dmt99500.c_obj_typ    AS objectTypeCode, 
                        dmt99500.file_nm      AS documentName, 
                        dmt00500.fm_form_type AS formsType, 
                        dmt99500.dir_nm       AS directoryName, 
                        dmt99500.m_fil_extn   AS documentType, 
                        dmt00500.fm_form_num  AS formNumber 
        FROM   dmt00500, 
               dmt00502, 
               dmt99500 
        WHERE  dmt99500.form_num = dmt00502.fmst_form_num 
               AND dmt00502.fmst_form_num = dmt00500.fm_form_num
               AND dmt00500.fm_status = dmt00502.fmst_status 
              AND dmt99500.c_obj_typ != &apos;7&apos;) T

</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="resultSetHandler">Store as String</stringProp>
                <stringProp name="resultVariable"></stringProp>
                <stringProp name="variableNames">sourceDbCountParent</stringProp>
              </JDBCSampler>
              <hashTree>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="false">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">sourceDbCountParent</stringProp>
                  <stringProp name="RegexExtractor.regex">(.*)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">asd</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request-FRM child  (Sql server)" enabled="true">
                <stringProp name="dataSource">myDatabase_${Environment}</stringProp>
                <stringProp name="query">SELECT COUNT(1) 
FROM   dmt00500, 
       dmt00502, 
       dmt99500 
WHERE  dmt00500.fm_form_num = dmt00502.fmst_form_num 
       AND dmt00500.fm_status = dmt00502.fmst_status 
       AND dmt00500.fm_form_num = dmt99500.form_num



</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="resultSetHandler">Store as String</stringProp>
                <stringProp name="resultVariable"></stringProp>
                <stringProp name="variableNames">sourceDbCountChild</stringProp>
              </JDBCSampler>
              <hashTree>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="false">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">sourceDbCountChild</stringProp>
                  <stringProp name="RegexExtractor.regex">(.*)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">asd</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="${contentType} - Mongodb Count" enabled="true">
                <stringProp name="cacheKey">f253aa47-66e5-4ca5-b317-d80f883d4c8d</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">import org.apache.jmeter.util.JMeterUtils; 
import com.mongodb.*;
import com.mongodb.BasicDBObject;
import com.mongodb.client.model.BsonField.*;
import com.mongodb.Block;
import com.mongodb.MongoClient;
import com.mongodb.MongoException;
import com.mongodb.client.MongoCollection;
import com.mongodb.client.MongoDatabase;
import java.util.Arrays;
import java.util.List;
import java.util.ArrayList;
import org.bson.BsonNull;
import org.bson.Document;
import org.bson.conversions.Bson;
//import org.apache.jmeter.testelement;

long result;

Properties properties = JMeterUtils.getJMeterProperties();
MongoClient coreMongoClient = properties.get(&quot;coreMongoClient&quot;); 




		
    DB coreDB = coreMongoClient.getDB(&quot;verisk_smartcontent&quot;);
    DBCollection collection = coreDB.getCollection(&quot;VERISK_METADATA_COLLECTION&quot;);
   
 	BasicDBObject query = new BasicDBObject(&quot;contentType&quot;, &quot;${contentType}&quot;);
  	result=collection.count(query);
    

    


    
    
    
    </stringProp>
                <stringProp name="scriptLanguage">java</stringProp>
              </JSR223Sampler>
              <hashTree>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">dbCount</stringProp>
                  <stringProp name="RegexExtractor.regex">(.*)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">asd</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="${contentType} - Mongodb-Applicability Count" enabled="true">
                <stringProp name="cacheKey"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">import com.mongodb.*;
import com.mongodb.Block;
import com.mongodb.MongoClient;
import com.mongodb.MongoException;
import com.mongodb.client.MongoCollection;
import com.mongodb.client.MongoDatabase;
import java.util.Arrays;
import java.util.List;
import java.util.ArrayList;
import org.bson.BsonNull;
import org.bson.Document;
import org.bson.conversions.Bson;
import org.apache.jmeter.util.JMeterUtils;


long result;




Properties properties = JMeterUtils.getJMeterProperties();
MongoClient coreMongoClient = properties.get(&quot;coreMongoClient&quot;); 


com.mongodb.client.MongoDatabase database =coreMongoClient.getDatabase(&quot;verisk_smartcontent&quot;);
          MongoCollection collection = database.getCollection(&quot;VERISK_METADATA_COLLECTION&quot;); 
            
            List pipeline = new ArrayList();
            pipeline.add(
                    new Document()
                            .append(&quot;$match&quot;, new Document()
                                    .append(&quot;contentType&quot;, &quot;FRM&quot;)
                            ));
           pipeline.add(new Document()
                            .append(&quot;$project&quot;, new Document()
                                    .append(&quot;appCount&quot;, new Document()
                                            .append(&quot;$size&quot;, &quot;$applicability&quot;)
                                    )
                            ));
           pipeline.add(new Document()
                            .append(&quot;$group&quot;, new Document()
                                    .append(&quot;_id&quot;, new BsonNull())
                                    .append(&quot;Total&quot;, new Document()
                                            .append(&quot;$sum&quot;, &quot;$appCount&quot;)
                                    )
                            ));
           pipeline.add(new Document()
                            .append(&quot;$project&quot;, new Document()
                                    .append(&quot;Total&quot;, 1.0)
                                    .append(&quot;_id&quot;, 0.0)
                            ));
          
        result=collection.aggregate(pipeline).first().get(&quot;Total&quot;); 
          
          </stringProp>
                <stringProp name="scriptLanguage">beanshell</stringProp>
              </JSR223Sampler>
              <hashTree>
                <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="script">  log.info(&quot;beanshell total :&quot;+vars.get(${Total}));
  vars.put(&quot;Appcount&quot;,Total);</stringProp>
                </BeanShellPostProcessor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">mongoApplicabilityCount</stringProp>
                  <stringProp name="RegexExtractor.regex">(.*)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">asd</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
                <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="false">
                  <stringProp name="BeanShellAssertion.query">long var_mongoCount=Long.parseLong(vars.get(&quot;dbCount&quot;));
long var_apiCount=Long.parseLong(vars.get(&quot;apiCount&quot;));
long var_solrParentCount=Long.parseLong(vars.get(&quot;parentCount_1&quot;));
long var_solrChildCount=Long.parseLong(vars.get(&quot;childCount_1&quot;));
long var_mongoApplicabilityCount=Long.parseLong(vars.get(&quot;mongoApplicabilityCount&quot;));

try{
	if ((var_mongoCount!=var_solrParentCount) &amp;&amp; (var_mongoCount!=var_apiCount)){
		Failure=true;
		FailureMessage=&quot;Parent Counts not matching&quot;;
	}

	else if(var_mongoApplicabilityCount!=var_solrChildCount){
		Failure=true;
		FailureMessage=&quot;Child Counts not matching&quot;;
	}

	else{
		Failure=false;
		log.info(&quot;Counts are matching&quot;);
	}
	

}catch(Throwable ex){
	log.error(&quot;Error in Beanshell&quot;, ex);
    throw ex;
	
}


</stringProp>
                  <stringProp name="BeanShellAssertion.filename"></stringProp>
                  <stringProp name="BeanShellAssertion.parameters"></stringProp>
                  <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                </BeanShellAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller-CRC" enabled="true">
              <stringProp name="IfController.condition">&quot;${contentType}&quot;.equalsIgnoreCase(&quot;CRC&quot;)</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
            </IfController>
            <hashTree>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC CRC Parent (Sql server)" enabled="true">
                <stringProp name="dataSource">myDatabase_${Environment}</stringProp>
                <stringProp name="query">SELECT
  COUNT(1)
FROM (SELECT DISTINCT
  prt99200.c_circ_dply AS displayFormat,
  prt99200.d_circ_yr AS year,
  prt97250.m_fil AS fileName,
  prt97250.m_new_fil AS newFileName
FROM [dpr0040p].[dbo].prt99200
LEFT JOIN [dpr0040p].[dbo].prt97250
  ON prt99200.c_circ_prim_prd_typ = prt97250.c_circ_prim_prd_typ
  AND prt99200.c_lob_prim_alp = prt97250.c_lob_prim_alp
  AND prt99200.d_circ_prim_yr = prt97250.d_circ_prim_yr
  AND prt99200.n_circ_prim_seq = prt97250.n_circ_prim_seq
LEFT JOIN [dpr0040p].[dbo].prt99220
  ON prt99200.c_circ_prd_typ = prt99220.c_circ_prd_typ
  AND prt99200.c_lob_alp = prt99220.c_lob_alp
  AND prt99200.d_circ_yr = prt99220.d_circ_yr
  AND prt99200.n_circ_seq = prt99220.n_circ_seq
WHERE prt99200.c_prod_upd = &apos;C&apos;
AND (prt97250.c_obj_typ &gt; 15
OR prt97250.c_obj_typ &lt; 16)) A

</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="resultSetHandler">Store as String</stringProp>
                <stringProp name="resultVariable"></stringProp>
                <stringProp name="variableNames">sourceDbCountParent</stringProp>
              </JDBCSampler>
              <hashTree>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="false">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">sourceDbCountParent</stringProp>
                  <stringProp name="RegexExtractor.regex">(.*)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">asd</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request-CRC child  (Sql server)" enabled="true">
                <stringProp name="dataSource">myDatabase_${Environment}</stringProp>
                <stringProp name="query">SELECT
  COUNT(1)
FROM [dpr0040p].[dbo].prt99200
LEFT JOIN [dpr0040p].[dbo].prt97250
  ON prt99200.c_circ_prim_prd_typ = prt97250.c_circ_prim_prd_typ
  AND prt99200.c_lob_prim_alp = prt97250.c_lob_prim_alp
  AND prt99200.d_circ_prim_yr = prt97250.d_circ_prim_yr
  AND prt99200.n_circ_prim_seq = prt97250.n_circ_prim_seq
LEFT JOIN [dpr0040p].[dbo].prt99220
  ON prt99200.c_circ_prd_typ = prt99220.c_circ_prd_typ
  AND prt99200.c_lob_alp = prt99220.c_lob_alp
  AND prt99200.d_circ_yr = prt99220.d_circ_yr
  AND prt99200.n_circ_seq = prt99220.n_circ_seq
WHERE prt99200.c_prod_upd = &apos;C&apos;
AND (prt97250.c_obj_typ &gt; 15
OR prt97250.c_obj_typ &lt; 16)
</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="resultSetHandler">Store as String</stringProp>
                <stringProp name="resultVariable"></stringProp>
                <stringProp name="variableNames">sourceDbCountChild</stringProp>
              </JDBCSampler>
              <hashTree>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="false">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">sourceDbCountChild</stringProp>
                  <stringProp name="RegexExtractor.regex">(.*)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">asd</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="${contentType} - Mongodb Count" enabled="true">
                <stringProp name="cacheKey">f253aa47-66e5-4ca5-b317-d80f883d4c8d</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">import com.mongodb.*;
import com.mongodb.BasicDBObject;
import com.mongodb.client.model.BsonField.*;
import org.apache.jmeter.util.JMeterUtils; 

long result;



    
Properties properties = JMeterUtils.getJMeterProperties();
MongoClient coreMongoClient = properties.get(&quot;coreMongoClient&quot;); 
    DB coreDB = coreMongoClient.getDB(&quot;verisk_smartcontent&quot;);
    DBCollection collection = coreDB.getCollection(&quot;VERISK_METADATA_COLLECTION&quot;);
    //BsonField a=new BsonField(&quot;uri&quot;,&quot;VERISK_001/FRM/FP10530905&quot;);
 	 BasicDBObject query = new BasicDBObject(&quot;contentType&quot;, &quot;${contentType}&quot;);
  	result=collection.count(query);
    

    


    
    
    
    </stringProp>
                <stringProp name="scriptLanguage">beanshell</stringProp>
              </JSR223Sampler>
              <hashTree>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">dbCount</stringProp>
                  <stringProp name="RegexExtractor.regex">(.*)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">asd</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="${contentType} - Mongodb-Applicability Count" enabled="true">
                <stringProp name="cacheKey"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">import com.mongodb.*;
import com.mongodb.Block;
import com.mongodb.MongoClient;
import com.mongodb.MongoException;
import com.mongodb.client.MongoCollection;
import com.mongodb.client.MongoDatabase;
import java.util.Arrays;
import java.util.List;
import java.util.ArrayList;
import org.bson.BsonNull;
import org.bson.Document;
import org.bson.conversions.Bson;
import org.apache.jmeter.util.JMeterUtils; 


long result;

Properties properties = JMeterUtils.getJMeterProperties();
MongoClient coreMongoClient = properties.get(&quot;coreMongoClient&quot;); 

     	 MongoDatabase database = coreMongoClient.getDatabase(&quot;verisk_smartcontent&quot;);
            MongoCollection collection = database.getCollection(&quot;VERISK_METADATA_COLLECTION&quot;); 
            
            List pipeline = new ArrayList();
            pipeline.add(
                    new Document()
                            .append(&quot;$match&quot;, new Document()
                                    .append(&quot;contentType&quot;, &quot;CRC&quot;)
                            ));
           pipeline.add(new Document()
                            .append(&quot;$project&quot;, new Document()
                                    .append(&quot;appCount&quot;, new Document()
                                            .append(&quot;$size&quot;, &quot;$applicability&quot;)
                                    )
                            ));
           pipeline.add(new Document()
                            .append(&quot;$group&quot;, new Document()
                                    .append(&quot;_id&quot;, new BsonNull())
                                    .append(&quot;Total&quot;, new Document()
                                            .append(&quot;$sum&quot;, &quot;$appCount&quot;)
                                    )
                            ));
           pipeline.add(new Document()
                            .append(&quot;$project&quot;, new Document()
                                    .append(&quot;Total&quot;, 1.0)
                                    .append(&quot;_id&quot;, 0.0)
                            ));
          
            result= collection.aggregate(pipeline).first().get(&quot;Total&quot;); 
          
          </stringProp>
                <stringProp name="scriptLanguage">beanshell</stringProp>
              </JSR223Sampler>
              <hashTree>
                <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="script">  log.info(&quot;beanshell total :&quot;+vars.get(${Total}));
  vars.put(&quot;Appcount&quot;,Total);</stringProp>
                </BeanShellPostProcessor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">mongoApplicabilityCount</stringProp>
                  <stringProp name="RegexExtractor.regex">(.*)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">asd</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
                <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="false">
                  <stringProp name="BeanShellAssertion.query">long var_mongoCount=Integer.parseInt(vars.get(&quot;dbCount&quot;));
long var_apiCount=Integer.parseInt(vars.get(&quot;apiCount&quot;));
long var_solrParentCount=Integer.parseInt(vars.get(&quot;parentCount_1&quot;));
long var_solrChildCount=Integer.parseInt(vars.get(&quot;childCount_1&quot;));
long var_mongoApplicabilityCount=Integer.parseInt(vars.get(&quot;mongoApplicabilityCount&quot;));


try{
	if ((var_mongoCount!=var_solrParentCount) &amp;&amp; (var_mongoCount!=var_apiCount)){
		Failure=true;
		FailureMessage=&quot;Parent Counts not matching&quot;;
	}

	else if(var_mongoApplicabilityCount!=var_solrChildCount){
		Failure=true;
		FailureMessage=&quot;Child Counts not matching&quot;;
	}

	else{
		Failure=false;
		log.info(&quot;Counts are matching&quot;);
	}
	

}catch(Exception e){
	Failure=true;
	FailureMessage=&quot;Counts not matching&quot;;
	
}


</stringProp>
                  <stringProp name="BeanShellAssertion.filename"></stringProp>
                  <stringProp name="BeanShellAssertion.parameters"></stringProp>
                  <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                </BeanShellAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller-LMN" enabled="true">
              <stringProp name="IfController.condition">&quot;${contentType}&quot;.equalsIgnoreCase(&quot;LMN&quot;)</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
            </IfController>
            <hashTree>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC LMN Parent (db2)" enabled="true">
                <stringProp name="dataSource">db2Connection_MLC_${Environment}</stringProp>
                <stringProp name="query">SELECT count(a.i_legis_rec_no)
FROM   ISO02.DMV00C01 A, 
       ISO02.DMV00C02 B 
WHERE  ISO02.DMV00C01.i_legis_rec_no = ISO02.DMV00C02.i_legis_rec_no 
AND    iso02.dmv00c01.c_lmon_db=iso02.dmv00c02.c_lmon_db
</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="resultSetHandler">Store as String</stringProp>
                <stringProp name="resultVariable"></stringProp>
                <stringProp name="variableNames">sourceDbCountParent</stringProp>
              </JDBCSampler>
              <hashTree>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="false">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">sourceDbCountParent</stringProp>
                  <stringProp name="RegexExtractor.regex">(.*)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">asd</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request- LMN child  (db2)" enabled="true">
                <stringProp name="dataSource">db2Connection_MLC_${Environment}</stringProp>
                <stringProp name="query">SELECT count(a.i_legis_rec_no)
FROM   ISO02.DMV00C01 A, 
       ISO02.DMV00C02 B 
WHERE  ISO02.DMV00C01.i_legis_rec_no = ISO02.DMV00C02.i_legis_rec_no 
AND    iso02.dmv00c01.c_lmon_db=iso02.dmv00c02.c_lmon_db

</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="resultSetHandler">Store as String</stringProp>
                <stringProp name="resultVariable"></stringProp>
                <stringProp name="variableNames">sourceDbCountChild</stringProp>
              </JDBCSampler>
              <hashTree>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="false">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">sourceDbCountChild</stringProp>
                  <stringProp name="RegexExtractor.regex">(.*)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">asd</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="${contentType} - Mongodb Count" enabled="true">
                <stringProp name="cacheKey">f253aa47-66e5-4ca5-b317-d80f883d4c8d</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">import com.mongodb.*;
import com.mongodb.BasicDBObject;
import com.mongodb.client.model.BsonField.*;
import org.apache.jmeter.util.JMeterUtils; 

long result;


	
Properties properties = JMeterUtils.getJMeterProperties();
MongoClient coreMongoClient = properties.get(&quot;coreMongoClient&quot;); 

    DB coreDB = coreMongoClient.getDB(&quot;verisk_smartcontent&quot;);
    DBCollection collection = coreDB.getCollection(&quot;VERISK_METADATA_COLLECTION&quot;);
    
 	 BasicDBObject query = new BasicDBObject(&quot;contentType&quot;, &quot;${contentType}&quot;);
  	result=collection.count(query);
    </stringProp>
                <stringProp name="scriptLanguage">beanshell</stringProp>
              </JSR223Sampler>
              <hashTree>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">dbCount</stringProp>
                  <stringProp name="RegexExtractor.regex">(.*)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">asd</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="${contentType} - Mongodb-Applicability Count" enabled="true">
                <stringProp name="cacheKey"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">
import com.mongodb.Block;
import com.mongodb.MongoClient;
import com.mongodb.MongoException;
import com.mongodb.client.MongoCollection;
import com.mongodb.client.MongoDatabase;
import java.util.Arrays;
import java.util.List;
import java.util.ArrayList;
import org.bson.BsonNull;
import org.bson.Document;
import org.bson.conversions.Bson;
import org.apache.jmeter.testelement;
import org.apache.jmeter.util.JMeterUtils; 




        
      
Properties properties = JMeterUtils.getJMeterProperties();
MongoClient coreMongoClient = properties.get(&quot;coreMongoClient&quot;); 
            
            MongoDatabase database = coreMongoClient.getDatabase(&quot;verisk_smartcontent&quot;);
            MongoCollection collection = database.getCollection(&quot;VERISK_METADATA_COLLECTION&quot;);
            
            List pipeline = new ArrayList();
            pipeline.add(
                    new Document()
                            .append(&quot;$match&quot;, new Document()
                                    .append(&quot;contentType&quot;, &quot;LMN&quot;)
                            ));
           pipeline.add(new Document()
                            .append(&quot;$project&quot;, new Document()
                                    .append(&quot;appCount&quot;, new Document()
                                            .append(&quot;$size&quot;, &quot;$applicability&quot;)
                                    )
                            ));
           pipeline.add(new Document()
                            .append(&quot;$group&quot;, new Document()
                                    .append(&quot;_id&quot;, new BsonNull())
                                    .append(&quot;Total&quot;, new Document()
                                            .append(&quot;$sum&quot;, &quot;$appCount&quot;)
                                    )
                            ));
           pipeline.add(new Document()
                            .append(&quot;$project&quot;, new Document()
                                    .append(&quot;Total&quot;, 1.0)
                                    .append(&quot;_id&quot;, 0.0)
                            ));
            
         
           collection.aggregate(pipeline).first().get(&quot;Total&quot;);
          
         </stringProp>
                <stringProp name="scriptLanguage">java</stringProp>
              </JSR223Sampler>
              <hashTree>
                <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="script">  log.info(&quot;beanshell total :&quot;+vars.get(${Total}));
  vars.put(&quot;Appcount&quot;,Total);</stringProp>
                </BeanShellPostProcessor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">mongoApplicabilityCount</stringProp>
                  <stringProp name="RegexExtractor.regex">(.*)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">asd</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
                <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="false">
                  <stringProp name="BeanShellAssertion.query">long var_mongoCount=Integer.parseInt(vars.get(&quot;dbCount&quot;));
long var_apiCount=Integer.parseInt(vars.get(&quot;apiCount&quot;));
long var_solrParentCount=Integer.parseInt(vars.get(&quot;parentCount_1&quot;));
long var_solrChildCount=Integer.parseInt(vars.get(&quot;childCount_1&quot;));
long var_mongoApplicabilityCount=Integer.parseInt(vars.get(&quot;mongoApplicabilityCount&quot;));


try{
	if ((var_mongoCount!=var_solrParentCount) &amp;&amp; (var_mongoCount!=var_apiCount)){
		Failure=true;
		FailureMessage=&quot;Parent Counts not matching&quot;;
	}

	else if(var_mongoApplicabilityCount!=var_solrChildCount){
		Failure=true;
		FailureMessage=&quot;Child Counts not matching&quot;;
	}

	else{
		Failure=false;
		log.info(&quot;Counts are matching&quot;);
	}
	

}catch(Exception e){
	Failure=true;
	FailureMessage=&quot;Counts not matching&quot;;
	
}


</stringProp>
                  <stringProp name="BeanShellAssertion.filename"></stringProp>
                  <stringProp name="BeanShellAssertion.parameters"></stringProp>
                  <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                </BeanShellAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller-CLM" enabled="true">
              <stringProp name="IfController.condition">&quot;${contentType}&quot;.equalsIgnoreCase(&quot;CLM&quot;)</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
            </IfController>
            <hashTree>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC CLM Parent (Sql server)" enabled="true">
                <stringProp name="dataSource">myDatabase-CLM_${Environment}</stringProp>
                <stringProp name="query">SELECT COUNT(1) FROM (SELECT DISTINCT PRT00612.DOCUMENTFILENAME, PRT00612.TOCPATH as tableOfContentsPath from PRT00612 inner join PRT00611 on 
PRT00612.LOBCODE = PRT00611.LOBCODE
AND PRT00612.STATECODE = PRT00611.STATECODE
AND PRT00612.PRODUCTCODE = PRT00611.PRODUCTCODE
AND PRT00612.PAGETYPECODE = PRT00611.PAGETYPECODE
AND PRT00612.TOPICID = PRT00611.TOPICID
AND PRT00612.NTM = PRT00611.NTM
AND PRT00612.PUBLISHERCODE = PRT00611.PUBLISHERCODE
AND PRT00612.DOCUMENTFILENAME = PRT00611.DOCUMENTFILENAME
WHERE PRT00611.EXPIRATIONDATE != &apos;1915-12-31 00:00:00.0&apos;
AND PRT00611.EXPIRATIONDATE &gt; PRT00611.EFFECTIVEDATE) B

</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="resultSetHandler">Store as String</stringProp>
                <stringProp name="resultVariable"></stringProp>
                <stringProp name="variableNames">sourceDbCountParent</stringProp>
              </JDBCSampler>
              <hashTree>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="false">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">sourceDbCountParent</stringProp>
                  <stringProp name="RegexExtractor.regex">(.*)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">asd</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request- CLM child  (Sql server)" enabled="true">
                <stringProp name="dataSource">myDatabase-CLM_${Environment}</stringProp>
                <stringProp name="query">SELECT COUNT(1) FROM (SELECT
PRT00611.STATECODE AS stateCode,
PRT00611.LOBCODE AS lobCode,
PRT00611.PRODUCTCODE AS productId,
PRT00611.PAGETYPECODE AS additionalRuleType,
PRT00611.TOPICID AS topicId,
PRT00611.PUBLISHERCODE AS publisher,
PRT00611.NTM AS ntm,
PRT00611.MANUALSERVICECODE AS serviceCode,
PRT00611.SPECIFICLOBCODE AS lob,
PRT00611.SPECIFICSTATECODE AS jurisdiction,
PRT00611.SPECIFICCOMPANYCODE AS specificCompanyCode,
PRT00611.FILINGID AS filingId,
PRT00611.EFFECTIVEDATE AS effectiveDate,
PRT00611.EXPIRATIONDATE AS expirationDate,
PRT00604.DOCUMENTFILENAME AS documentName,
PRT00604.TOPICDESCRIPTION AS topicDescription,
A.tocpath AS tableOfContentsPath
FROM PRT00611
LEFT OUTER JOIN PRT00604
ON PRT00611.LOBCODE = PRT00604.LOBCODE
AND PRT00611.STATECODE = PRT00604.STATECODE
AND PRT00611.PRODUCTCODE = PRT00604.PRODUCTCODE
AND PRT00611.PAGETYPECODE = PRT00604.PAGETYPECODE
AND PRT00611.TOPICID = PRT00604.TOPICID
AND PRT00611.NTM = PRT00604.NTM
AND PRT00611.PUBLISHERCODE = PRT00604.PUBLISHERCODE
LEFT OUTER JOIN (SELECT DISTINCT
PRODUCTCODE,
LOBCODE,
STATECODE,
PUBLISHERCODE,
PAGETYPECODE,
DOCUMENTFILENAME,
TOCPATH
FROM PRT00612) A
ON A.DOCUMENTFILENAME = PRT00604.DOCUMENTFILENAME
AND A.PRODUCTCODE = PRT00604.PRODUCTCODE
AND A.LOBCODE = PRT00604.LOBCODE
AND A.STATECODE = PRT00604.STATECODE
AND A.PUBLISHERCODE = PRT00604.PUBLISHERCODE
AND A.PAGETYPECODE = PRT00604.PAGETYPECODE
WHERE PRT00611.EXPIRATIONDATE != &apos;1915-12-31 00:00:00.0&apos;
AND PRT00611.EXPIRATIONDATE &gt; PRT00611.EFFECTIVEDATE) B

</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="resultSetHandler">Store as String</stringProp>
                <stringProp name="resultVariable"></stringProp>
                <stringProp name="variableNames">sourceDbCountChild</stringProp>
              </JDBCSampler>
              <hashTree>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="false">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">sourceDbCountChild</stringProp>
                  <stringProp name="RegexExtractor.regex">(.*)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">asd</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="${contentType} - Mongodb Count" enabled="true">
                <stringProp name="cacheKey">f253aa47-66e5-4ca5-b317-d80f883d4c8d</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">import com.mongodb.*;
import com.mongodb.BasicDBObject;
import com.mongodb.client.model.BsonField.*;
import org.apache.jmeter.util.JMeterUtils;

long result;



  
Properties properties = JMeterUtils.getJMeterProperties();
MongoClient coreMongoClient = properties.get(&quot;coreMongoClient&quot;); 

    DB coreDB = coreMongoClient.getDB(&quot;verisk_smartcontent&quot;);
    DBCollection collection = coreDB.getCollection(&quot;VERISK_METADATA_COLLECTION&quot;);
    //BsonField a=new BsonField(&quot;uri&quot;,&quot;VERISK_001/FRM/FP10530905&quot;);
 	 BasicDBObject query = new BasicDBObject(&quot;contentType&quot;, &quot;${contentType}&quot;);
  	result=collection.count(query);
    

    


    
    
    
    </stringProp>
                <stringProp name="scriptLanguage">beanshell</stringProp>
              </JSR223Sampler>
              <hashTree>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">dbCount</stringProp>
                  <stringProp name="RegexExtractor.regex">(.*)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">asd</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="${contentType} - Mongodb-Applicability Count" enabled="true">
                <stringProp name="cacheKey"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">
import com.mongodb.Block;
import com.mongodb.MongoClient;
import com.mongodb.MongoException;
import com.mongodb.client.MongoCollection;
import com.mongodb.client.MongoDatabase;
import java.util.Arrays;
import java.util.List;
import java.util.ArrayList;
import org.bson.BsonNull;
import org.bson.Document;
import org.bson.conversions.Bson;
import org.apache.jmeter.testelement;
import org.apache.jmeter.util.JMeterUtils; 




        

Properties properties = JMeterUtils.getJMeterProperties();
MongoClient coreMongoClient = properties.get(&quot;coreMongoClient&quot;); 
            
            MongoDatabase database = coreMongoClient.getDatabase(&quot;verisk_smartcontent&quot;);
            MongoCollection collection = database.getCollection(&quot;VERISK_METADATA_COLLECTION&quot;);
            
            List pipeline = new ArrayList();
            pipeline.add(
                    new Document()
                            .append(&quot;$match&quot;, new Document()
                                    .append(&quot;contentType&quot;, &quot;CLM&quot;)
                            ));
           pipeline.add(new Document()
                            .append(&quot;$project&quot;, new Document()
                                    .append(&quot;appCount&quot;, new Document()
                                            .append(&quot;$size&quot;, &quot;$applicability&quot;)
                                    )
                            ));
           pipeline.add(new Document()
                            .append(&quot;$group&quot;, new Document()
                                    .append(&quot;_id&quot;, new BsonNull())
                                    .append(&quot;Total&quot;, new Document()
                                            .append(&quot;$sum&quot;, &quot;$appCount&quot;)
                                    )
                            ));
           pipeline.add(new Document()
                            .append(&quot;$project&quot;, new Document()
                                    .append(&quot;Total&quot;, 1.0)
                                    .append(&quot;_id&quot;, 0.0)
                            ));
            
           
           collection.aggregate(pipeline).first().get(&quot;Total&quot;);
          
          </stringProp>
                <stringProp name="scriptLanguage">java</stringProp>
              </JSR223Sampler>
              <hashTree>
                <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="script">  log.info(&quot;beanshell total :&quot;+vars.get(${Total}));
  vars.put(&quot;Appcount&quot;,Total);</stringProp>
                </BeanShellPostProcessor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">mongoApplicabilityCount</stringProp>
                  <stringProp name="RegexExtractor.regex">(.*)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">asd</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
                <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="false">
                  <stringProp name="BeanShellAssertion.query">long var_mongoCount=Integer.parseInt(vars.get(&quot;dbCount&quot;));
long var_apiCount=Integer.parseInt(vars.get(&quot;apiCount&quot;));
long var_solrParentCount=Integer.parseInt(vars.get(&quot;parentCount_1&quot;));
long var_solrChildCount=Integer.parseInt(vars.get(&quot;childCount_1&quot;));
long var_mongoApplicabilityCount=Integer.parseInt(vars.get(&quot;mongoApplicabilityCount&quot;));


try{
	if ((var_mongoCount!=var_solrParentCount) &amp;&amp; (var_mongoCount!=var_apiCount)){
		Failure=true;
		FailureMessage=&quot;Parent Counts not matching&quot;;
	}

	else if(var_mongoApplicabilityCount!=var_solrChildCount){
		Failure=true;
		FailureMessage=&quot;Child Counts not matching&quot;;
	}

	else{
		Failure=false;
		log.info(&quot;Counts are matching&quot;);
	}
	

}catch(Exception e){
	Failure=true;
	FailureMessage=&quot;Counts not matching&quot;;
	
}


</stringProp>
                  <stringProp name="BeanShellAssertion.filename"></stringProp>
                  <stringProp name="BeanShellAssertion.parameters"></stringProp>
                  <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                </BeanShellAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller-EMI" enabled="true">
              <stringProp name="IfController.condition">&quot;${contentType}&quot;.equalsIgnoreCase(&quot;EMI&quot;)</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
            </IfController>
            <hashTree>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="${contentType} - Mongodb Count" enabled="true">
                <stringProp name="cacheKey">f253aa47-66e5-4ca5-b317-d80f883d4c8d</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">import com.mongodb.*;
import com.mongodb.BasicDBObject;
import com.mongodb.client.model.BsonField.*;
import org.apache.jmeter.util.JMeterUtils; 

long result;



   
Properties properties = JMeterUtils.getJMeterProperties();
MongoClient coreMongoClient = properties.get(&quot;coreMongoClient&quot;); 

    DB coreDB = coreMongoClient.getDB(&quot;verisk_smartcontent&quot;);
    DBCollection collection = coreDB.getCollection(&quot;VERISK_METADATA_COLLECTION&quot;);
    //BsonField a=new BsonField(&quot;uri&quot;,&quot;VERISK_001/FRM/FP10530905&quot;);
 	 BasicDBObject query = new BasicDBObject(&quot;contentType&quot;, &quot;${contentType}&quot;);
  	result=collection.count(query);
    

    


    
    
    
    </stringProp>
                <stringProp name="scriptLanguage">beanshell</stringProp>
              </JSR223Sampler>
              <hashTree>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">dbCount</stringProp>
                  <stringProp name="RegexExtractor.regex">(.*)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">asd</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="${contentType} - Mongodb-Applicability Count" enabled="true">
                <stringProp name="cacheKey"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">import com.mongodb.*;
import com.mongodb.BasicDBObject;
import com.mongodb.client.model.BsonField.*;
import org.apache.jmeter.util.JMeterUtils; 

long result;



  
Properties properties = JMeterUtils.getJMeterProperties();
MongoClient coreMongoClient = properties.get(&quot;coreMongoClient&quot;); 

    DB coreDB = coreMongoClient.getDB(&quot;verisk_smartcontent&quot;);
    DBCollection collection = coreDB.getCollection(&quot;VERISK_METADATA_COLLECTION&quot;);
    //BsonField a=new BsonField(&quot;uri&quot;,&quot;VERISK_001/FRM/FP10530905&quot;);
 	 BasicDBObject query = new BasicDBObject(&quot;contentType&quot;, &quot;${contentType}&quot;);
  	result=collection.count(query);
    


</stringProp>
                <stringProp name="scriptLanguage">beanshell</stringProp>
              </JSR223Sampler>
              <hashTree>
                <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="script">  log.info(&quot;beanshell total :&quot;+vars.get(${Total}));
  vars.put(&quot;Appcount&quot;,Total);</stringProp>
                </BeanShellPostProcessor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">mongoApplicabilityCount</stringProp>
                  <stringProp name="RegexExtractor.regex">(.*)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">asd</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
                <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="false">
                  <stringProp name="BeanShellAssertion.query">long var_mongoCount=Integer.parseInt(vars.get(&quot;dbCount&quot;));
long var_apiCount=Integer.parseInt(vars.get(&quot;apiCount&quot;));
long var_solrParentCount=Integer.parseInt(vars.get(&quot;parentCount_1&quot;));
long var_solrChildCount=Integer.parseInt(vars.get(&quot;childCount_1&quot;));
long var_mongoApplicabilityCount=Integer.parseInt(vars.get(&quot;mongoApplicabilityCount&quot;));


try{
	if ((var_mongoCount!=var_solrParentCount) &amp;&amp; (var_mongoCount!=var_apiCount)){
		Failure=true;
		FailureMessage=&quot;Parent Counts not matching&quot;;
	}

	else if(var_mongoApplicabilityCount!=var_solrChildCount){
		Failure=true;
		FailureMessage=&quot;Child Counts not matching&quot;;
	}

	else{
		Failure=false;
		log.info(&quot;Counts are matching&quot;);
	}
	

}catch(Exception e){
	Failure=true;
	FailureMessage=&quot;Counts not matching&quot;;
	
}


</stringProp>
                  <stringProp name="BeanShellAssertion.filename"></stringProp>
                  <stringProp name="BeanShellAssertion.parameters"></stringProp>
                  <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                </BeanShellAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller-MLC" enabled="true">
              <stringProp name="IfController.condition">&quot;${contentType}&quot;.equalsIgnoreCase(&quot;MLC&quot;)</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
            </IfController>
            <hashTree>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC MLC Parent (db2)" enabled="true">
                <stringProp name="dataSource">db2Connection_MLC_${Environment}</stringProp>
                <stringProp name="query">SELECT COUNT(1) FROM (SELECT DISTINCT A.i_cls_tbl_id 
FROM   iso02.dmv01800 C, 
       iso02.dmv01801 A, 
       iso02.dmv01803 B 
WHERE  C.i_cls_tbl_id = A.i_cls_tbl_id 
       AND A.i_cls_tbl_id = B.i_cls_tbl_id 
       AND A.i_ntm = B.i_ntm 
       AND A.c_lob_abrv = B.c_lob_abrv ) T

</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="resultSetHandler">Store as String</stringProp>
                <stringProp name="resultVariable"></stringProp>
                <stringProp name="variableNames">sourceDbCountParent</stringProp>
              </JDBCSampler>
              <hashTree>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="false">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">sourceDbCountParent</stringProp>
                  <stringProp name="RegexExtractor.regex">(.*)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">asd</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request- MLC child  (db2)" enabled="true">
                <stringProp name="dataSource">db2Connection_MLC_${Environment}</stringProp>
                <stringProp name="query">SELECT COUNT(1) FROM (SELECT A.c_pma             AS PMA, 
       A.c_noc             AS noc, 
       A.c_cls_tbl_st      AS muState, 
       C.t_cls_tbl_dsc     AS classDescription, 
       A.i_cls_tbl_id      AS classTableId, 
       A.c_lob_abrv        AS lob, 
       B.c_cls_tbl_st      AS classTableState, 
       A.i_ntm             AS ntm, 
       A.c_cls_cd          AS classId, 
       A.c_prem_bs         AS premiumBase, 
       A.c_rt_grp          AS rateGroup, 
       A.c_cls_lmt         AS classLimit, 
       A.d_cls_lob_dt      AS last_update_date, 
       B.c_spcf_st         AS state, 
       B.d_cls_lob_st_eff  AS effectiveDate, 
       B.d_cls_lob_st_exp  AS expirationDate, 
       B.t_eff_ntm         AS effectiveNTM, 
       B.t_exp_ntm         AS expirationNTM, 
       B.d_cls_lob_st_modf AS last_update_date 
FROM   iso02.dmv01800 C, 
       iso02.dmv01801 A, 
       iso02.dmv01803 B 
WHERE  C.i_cls_tbl_id = A.i_cls_tbl_id 
       AND A.i_cls_tbl_id = B.i_cls_tbl_id 
       AND A.i_ntm = B.i_ntm 
       AND A.c_lob_abrv = B.c_lob_abrv 
       AND B.D_CLS_LOB_ST_EXP &gt; B.D_CLS_LOB_ST_EFF) A

</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="resultSetHandler">Store as String</stringProp>
                <stringProp name="resultVariable"></stringProp>
                <stringProp name="variableNames">sourceDbCountChild</stringProp>
              </JDBCSampler>
              <hashTree>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="false">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">sourceDbCountChild</stringProp>
                  <stringProp name="RegexExtractor.regex">(.*)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">asd</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="${contentType} - Mongodb Count" enabled="true">
                <stringProp name="cacheKey">f253aa47-66e5-4ca5-b317-d80f883d4c8d</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">import com.mongodb.*;
import com.mongodb.BasicDBObject;
import com.mongodb.client.model.BsonField.*;
import org.apache.jmeter.util.JMeterUtils; 

long result;




Properties properties = JMeterUtils.getJMeterProperties();
MongoClient coreMongoClient = properties.get(&quot;coreMongoClient&quot;); 

    DB coreDB = coreMongoClient.getDB(&quot;verisk_smartcontent&quot;);
    DBCollection collection = coreDB.getCollection(&quot;VERISK_METADATA_COLLECTION&quot;);
    //BsonField a=new BsonField(&quot;uri&quot;,&quot;VERISK_001/FRM/FP10530905&quot;);
 	 BasicDBObject query = new BasicDBObject(&quot;contentType&quot;, &quot;${contentType}&quot;);
  	result=collection.count(query);
    

    


    
    
    
    </stringProp>
                <stringProp name="scriptLanguage">beanshell</stringProp>
              </JSR223Sampler>
              <hashTree>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">dbCount</stringProp>
                  <stringProp name="RegexExtractor.regex">(.*)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">asd</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="${contentType} - Mongodb-Applicability Count" enabled="true">
                <stringProp name="cacheKey"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">import com.mongodb.*;
import com.mongodb.Block;
import com.mongodb.MongoClient;
import com.mongodb.MongoException;
import com.mongodb.client.MongoCollection;
import com.mongodb.client.MongoDatabase;
import java.util.Arrays;
import java.util.List;
import java.util.ArrayList;
import org.bson.BsonNull;
import org.bson.Document;
import org.bson.conversions.Bson;
import org.apache.jmeter.testelement;
import org.apache.jmeter.util.JMeterUtils; 




        

Properties properties = JMeterUtils.getJMeterProperties();
MongoClient coreMongoClient = properties.get(&quot;coreMongoClient&quot;); 
            
            MongoDatabase database = coreMongoClient.getDatabase(&quot;verisk_smartcontent&quot;);
            MongoCollection collection = database.getCollection(&quot;VERISK_APPLICABILITY_COLLECTION&quot;);
             BasicDBObject query = new BasicDBObject(&quot;metadata_classTable_id&quot;, new BasicDBObject(&quot;$exists&quot;,true));
             collection.count(query);
            

    


    
    
    
    </stringProp>
                <stringProp name="scriptLanguage">java</stringProp>
              </JSR223Sampler>
              <hashTree>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">mongoApplicabilityCount</stringProp>
                  <stringProp name="RegexExtractor.regex">(.*)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">asd</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
                <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="false">
                  <stringProp name="BeanShellAssertion.query">long var_mongoCount=Integer.parseInt(vars.get(&quot;dbCount&quot;));
long var_apiCount=Integer.parseInt(vars.get(&quot;apiCount&quot;));
long var_solrParentCount=Integer.parseInt(vars.get(&quot;parentCount_1&quot;));
long var_solrChildCount=Integer.parseInt(vars.get(&quot;childCount_1&quot;));
long var_mongoApplicabilityCount=Integer.parseInt(vars.get(&quot;mongoApplicabilityCount&quot;));


try{
	if ((var_mongoCount!=var_solrParentCount) &amp;&amp; (var_mongoCount!=var_apiCount)){
		Failure=true;
		FailureMessage=&quot;Parent Counts not matching&quot;;
	}

	else if(var_mongoApplicabilityCount!=var_solrChildCount){
		Failure=true;
		FailureMessage=&quot;Child Counts not matching&quot;;
	}

	else{
		Failure=false;
		log.info(&quot;Counts are matching&quot;);
	}
	

}catch(Exception e){
	Failure=true;
	FailureMessage=&quot;Counts not matching&quot;;
	
}


</stringProp>
                  <stringProp name="BeanShellAssertion.filename"></stringProp>
                  <stringProp name="BeanShellAssertion.parameters"></stringProp>
                  <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                </BeanShellAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller-FLV" enabled="true">
              <stringProp name="IfController.condition">&quot;${contentType}&quot;.equalsIgnoreCase(&quot;FLV&quot;)</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
            </IfController>
            <hashTree>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC FLV Parent (db2)" enabled="true">
                <stringProp name="dataSource">db2Connection_FLV_${Environment}</stringProp>
                <stringProp name="query">SELECT COUNT(1) FROM (SELECT DISTINCT iso02.dmv00g12.i_filg     AS filingId, 
                iso02.dmv00g13.n_ver_amdt AS filingVersion 
FROM   iso02.dmv00g12 
       INNER JOIN iso02.dmv00g13 
               ON iso02.dmv00g12.i_filg = iso02.dmv00g13.i_filg 
                  AND iso02.dmv00g12.c_lob_filg = iso02.dmv00g13.c_lob_filg 
                  AND iso02.dmv00g12.c_jrsd_filg = iso02.dmv00g13.c_jrsd_filg 
                  AND iso02.dmv00g12.i_prd = iso02.dmv00g13.i_prd 
       LEFT JOIN iso02.dmv00g18 
              ON iso02.dmv00g13.i_filg = iso02.dmv00g18.i_filg 
                 AND iso02.dmv00g13.c_lob_filg = iso02.dmv00g18.c_lob_filg 
                 AND iso02.dmv00g13.c_jrsd_filg = iso02.dmv00g18.c_jrsd_filg 
                 AND iso02.dmv00g13.i_prd = iso02.dmv00g18.i_prd 
WHERE  iso02.dmv00g18.c_svc_abrv in (&apos;FO&apos;,&apos;RU&apos;,&apos;LC&apos;)
       AND iso02.dmv00g12.d_filg_eff &gt;= &apos;2014-09-01&apos; ) T</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="resultSetHandler">Store as String</stringProp>
                <stringProp name="resultVariable"></stringProp>
                <stringProp name="variableNames">sourceDbCountParent</stringProp>
              </JDBCSampler>
              <hashTree>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="false">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">sourceDbCountParent</stringProp>
                  <stringProp name="RegexExtractor.regex">(.*)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">asd</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request- FLV child  (db2)" enabled="true">
                <stringProp name="dataSource">db2Connection_FLV_${Environment}</stringProp>
                <stringProp name="query">SELECT COUNT(1) FROM (SELECT iso02.dmv00g12.i_filg     AS filingId, 
                iso02.dmv00g13.n_ver_amdt AS filingVersion 
FROM   iso02.dmv00g12 
       INNER JOIN iso02.dmv00g13 
               ON iso02.dmv00g12.i_filg = iso02.dmv00g13.i_filg 
                  AND iso02.dmv00g12.c_lob_filg = iso02.dmv00g13.c_lob_filg 
                  AND iso02.dmv00g12.c_jrsd_filg = iso02.dmv00g13.c_jrsd_filg 
                  AND iso02.dmv00g12.i_prd = iso02.dmv00g13.i_prd 
       LEFT JOIN iso02.dmv00g18 
              ON iso02.dmv00g13.i_filg = iso02.dmv00g18.i_filg 
                 AND iso02.dmv00g13.c_lob_filg = iso02.dmv00g18.c_lob_filg 
                 AND iso02.dmv00g13.c_jrsd_filg = iso02.dmv00g18.c_jrsd_filg 
                 AND iso02.dmv00g13.i_prd = iso02.dmv00g18.i_prd 
WHERE  iso02.dmv00g18.c_svc_abrv in (&apos;FO&apos;,&apos;RU&apos;,&apos;LC&apos;)
       AND iso02.dmv00g12.d_filg_eff &gt;= &apos;2014-09-01&apos; ) T
</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="resultSetHandler">Store as String</stringProp>
                <stringProp name="resultVariable"></stringProp>
                <stringProp name="variableNames">sourceDbCountChild</stringProp>
              </JDBCSampler>
              <hashTree>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="false">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">sourceDbCountChild</stringProp>
                  <stringProp name="RegexExtractor.regex">(.*)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">asd</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="${contentType} - Mongodb Count" enabled="true">
                <stringProp name="cacheKey">f253aa47-66e5-4ca5-b317-d80f883d4c8d</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">import com.mongodb.*;
import com.mongodb.BasicDBObject;
import com.mongodb.client.model.BsonField.*;
import org.apache.jmeter.util.JMeterUtils; 

long result;



   
Properties properties = JMeterUtils.getJMeterProperties();
MongoClient coreMongoClient = properties.get(&quot;coreMongoClient&quot;); 

    DB coreDB = coreMongoClient.getDB(&quot;verisk_smartcontent&quot;);
    DBCollection collection = coreDB.getCollection(&quot;VERISK_METADATA_COLLECTION&quot;);
    //BsonField a=new BsonField(&quot;uri&quot;,&quot;VERISK_001/FRM/FP10530905&quot;);
 	 BasicDBObject query = new BasicDBObject(&quot;contentType&quot;, &quot;${contentType}&quot;);
  	result=collection.count(query);</stringProp>
                <stringProp name="scriptLanguage">beanshell</stringProp>
              </JSR223Sampler>
              <hashTree>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">dbCount</stringProp>
                  <stringProp name="RegexExtractor.regex">(.*)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">asd</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="${contentType} - Mongodb-Applicability Count" enabled="true">
                <stringProp name="cacheKey"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">import com.mongodb.*;
import com.mongodb.Block;
import com.mongodb.MongoClient;
import com.mongodb.MongoException;
import com.mongodb.client.MongoCollection;
import com.mongodb.client.MongoDatabase;
import java.util.Arrays;
import java.util.List;
import java.util.ArrayList;
import org.bson.BsonNull;
import org.bson.Document;
import org.bson.conversions.Bson;
import org.apache.jmeter.testelement;
import org.apache.jmeter.util.JMeterUtils; 




        

Properties properties = JMeterUtils.getJMeterProperties();
MongoClient coreMongoClient = properties.get(&quot;coreMongoClient&quot;); 
            
            MongoDatabase database = coreMongoClient.getDatabase(&quot;verisk_smartcontent&quot;);
            MongoCollection collection = database.getCollection(&quot;VERISK_APPLICABILITY_COLLECTION&quot;);
             BasicDBObject query = new BasicDBObject(&quot;metadata_filing_id&quot;, new BasicDBObject(&quot;$exists&quot;,true));
             collection.count(query);
            

    


    
    
    
    
  	</stringProp>
                <stringProp name="scriptLanguage">beanshell</stringProp>
              </JSR223Sampler>
              <hashTree>
                <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="script">  log.info(&quot;beanshell total :&quot;+vars.get(${Total}));
  vars.put(&quot;Appcount&quot;,Total);</stringProp>
                </BeanShellPostProcessor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">mongoApplicabilityCount</stringProp>
                  <stringProp name="RegexExtractor.regex">(.*)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">asd</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
                <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="false">
                  <stringProp name="BeanShellAssertion.query">long var_mongoCount=Integer.parseInt(vars.get(&quot;dbCount&quot;));
long var_apiCount=Integer.parseInt(vars.get(&quot;apiCount&quot;));
long var_solrParentCount=Integer.parseInt(vars.get(&quot;parentCount_1&quot;));
long var_solrChildCount=Integer.parseInt(vars.get(&quot;childCount_1&quot;));
long var_mongoApplicabilityCount=Integer.parseInt(vars.get(&quot;mongoApplicabilityCount&quot;));


try{
	if ((var_mongoCount!=var_solrParentCount) &amp;&amp; (var_mongoCount!=var_apiCount)){
		Failure=true;
		FailureMessage=&quot;Parent Counts not matching&quot;;
	}

	else if(var_mongoApplicabilityCount!=var_solrChildCount){
		Failure=true;
		FailureMessage=&quot;Child Counts not matching&quot;;
	}

	else{
		Failure=false;
		log.info(&quot;Counts are matching&quot;);
	}
	

}catch(Exception e){
	Failure=true;
	FailureMessage=&quot;Counts not matching&quot;;
	
}


</stringProp>
                  <stringProp name="BeanShellAssertion.filename"></stringProp>
                  <stringProp name="BeanShellAssertion.parameters"></stringProp>
                  <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                </BeanShellAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller-PRM" enabled="true">
              <stringProp name="IfController.condition">&quot;${contentType}&quot;.equalsIgnoreCase(&quot;PRM&quot;)</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
            </IfController>
            <hashTree>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC PRM Parent (Sql server)" enabled="true">
                <stringProp name="dataSource">myDatabase-PRM_${Environment}</stringProp>
                <stringProp name="query">SELECT COUNT(1) FROM (SELECT distinct i_ntm, t_mnl_prd_typ
FROM   dmt00100 WHERE  dmt00100.c_svc_typ = &apos;FO&apos;) T
</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="resultSetHandler">Store as String</stringProp>
                <stringProp name="resultVariable"></stringProp>
                <stringProp name="variableNames">sourceDbCountParent</stringProp>
              </JDBCSampler>
              <hashTree>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="false">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">sourceDbCountParent</stringProp>
                  <stringProp name="RegexExtractor.regex">(.*)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">asd</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request- PRM child  (Sql server)" enabled="true">
                <stringProp name="dataSource">myDatabase-PRM_${Environment}</stringProp>
                <stringProp name="query">SELECT COUNT(1) FROM (SELECT i_ntm, t_mnl_prd_typ
FROM   dmt00100 WHERE  dmt00100.c_svc_typ = &apos;FO&apos;) T

</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="resultSetHandler">Store as String</stringProp>
                <stringProp name="resultVariable"></stringProp>
                <stringProp name="variableNames">sourceDbCountChild</stringProp>
              </JDBCSampler>
              <hashTree>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="false">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">sourceDbCountChild</stringProp>
                  <stringProp name="RegexExtractor.regex">(.*)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">asd</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="${contentType} - Mongodb Count" enabled="true">
                <stringProp name="cacheKey">f253aa47-66e5-4ca5-b317-d80f883d4c8d</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">import org.apache.jmeter.util.JMeterUtils; 
import com.mongodb.*;
import com.mongodb.BasicDBObject;
import com.mongodb.client.model.BsonField.*;
import com.mongodb.Block;
import com.mongodb.MongoClient;
import com.mongodb.MongoException;
import com.mongodb.client.MongoCollection;
import com.mongodb.client.MongoDatabase;
import java.util.Arrays;
import java.util.List;
import java.util.ArrayList;
import org.bson.BsonNull;
import org.bson.Document;
import org.bson.conversions.Bson;
//import org.apache.jmeter.testelement;

long result;

Properties properties = JMeterUtils.getJMeterProperties();
MongoClient coreMongoClient = properties.get(&quot;coreMongoClient&quot;); 




		
    DB coreDB = coreMongoClient.getDB(&quot;verisk_smartcontent&quot;);
    DBCollection collection = coreDB.getCollection(&quot;VERISK_METADATA_COLLECTION&quot;);
   
 	BasicDBObject query = new BasicDBObject(&quot;contentType&quot;, &quot;${contentType}&quot;);
  	result=collection.count(query);
    

    


    
    
    
    </stringProp>
                <stringProp name="scriptLanguage">beanshell</stringProp>
              </JSR223Sampler>
              <hashTree>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">dbCount</stringProp>
                  <stringProp name="RegexExtractor.regex">(.*)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">asd</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="${contentType} - Mongodb-Applicability Count" enabled="true">
                <stringProp name="cacheKey"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">import com.mongodb.Block;
import com.mongodb.MongoClient;
import com.mongodb.MongoException;
import com.mongodb.client.MongoCollection;
import com.mongodb.client.MongoDatabase;
import java.util.Arrays;
import java.util.List;
import java.util.ArrayList;
import org.bson.BsonNull;
import org.bson.Document;
import org.bson.conversions.Bson;
import org.apache.jmeter.testelement.property.JMeterProperty;
import org.apache.jmeter.util.JMeterUtils;


       
Properties properties = JMeterUtils.getJMeterProperties();
MongoClient coreMongoClient = properties.get(&quot;coreMongoClient&quot;); 
            
            MongoDatabase database = coreMongoClient.getDatabase(&quot;verisk_smartcontent&quot;);
            MongoCollection collection = database.getCollection(&quot;VERISK_METADATA_COLLECTION&quot;);
            
            List pipeline = new ArrayList();
            List lsc_applicability_docs = new ArrayList();
            List applicability_size = new ArrayList();
            applicability_size.add(&quot;$prm_applicability_docs&quot;);
            applicability_size.add(&quot;0.0&quot;);
            pipeline.add(
                    new Document()
                            .append(&quot;$match&quot;, new Document()
                                    .append(&quot;contentType&quot;, &quot;PRM&quot;)
                            ));
           pipeline.add(new Document()
                            .append(&quot;$lookup&quot;, new Document()
                                   .append(&quot;from&quot;, &quot;VERISK_APPLICABILITY_COLLECTION&quot;)
                                    .append(&quot;localField&quot;, &quot;metadata_prm_id&quot;)
                                    .append(&quot;foreignField&quot;, &quot;metadata_prm_id&quot;)
                                    .append(&quot;as&quot;, &quot;prm_applicability_docs&quot;)
                            )); 
            pipeline.add(new Document()
                            .append(&quot;$unwind&quot;, &quot;$doc_id&quot;)
                            );
                                                           
           pipeline.add(new Document()
                            .append(&quot;$project&quot;, new Document()
                                     .append(&quot;docCount&quot;, new Document()
                                            .append(&quot;$size&quot;, new Document()
                                                    .append(&quot;$ifNull&quot;, applicability_size)
                                                    )
                                            )
                                    )
                            );
                            
           pipeline.add(new Document()
                            .append(&quot;$group&quot;, new Document()
                                    .append(&quot;_id&quot;, new BsonNull())
                                    .append(&quot;Total&quot;, new Document()
                                            .append(&quot;$sum&quot;, &quot;$docCount&quot;)
                                    )
                            ));
           pipeline.add(new Document()
                            .append(&quot;$project&quot;, new Document()
                                    .append(&quot;Total&quot;, 1.0)
                                    .append(&quot;_id&quot;, 0.0)
                            ));
            
           collection.aggregate(pipeline).first().get(&quot;Total&quot;);

          

           
         
            
       

</stringProp>
                <stringProp name="scriptLanguage">java</stringProp>
              </JSR223Sampler>
              <hashTree>
                <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="script">  log.info(&quot;beanshell total :&quot;+vars.get(${Total}));
  vars.put(&quot;Appcount&quot;,Total);</stringProp>
                </BeanShellPostProcessor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">mongoApplicabilityCount</stringProp>
                  <stringProp name="RegexExtractor.regex">(.*)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">asd</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
                <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="false">
                  <stringProp name="BeanShellAssertion.query">long var_mongoCount=Integer.parseInt(vars.get(&quot;dbCount&quot;));
long var_apiCount=Integer.parseInt(vars.get(&quot;apiCount&quot;));
long var_solrParentCount=Integer.parseInt(vars.get(&quot;parentCount_1&quot;));
long var_solrChildCount=Integer.parseInt(vars.get(&quot;childCount_1&quot;));
long var_mongoApplicabilityCount=Integer.parseInt(vars.get(&quot;mongoApplicabilityCount&quot;));


try{
	if ((var_mongoCount!=var_solrParentCount) &amp;&amp; (var_mongoCount!=var_apiCount)){
		Failure=true;
		FailureMessage=&quot;Parent Counts not matching&quot;;
	}

	else if(var_mongoApplicabilityCount!=var_solrChildCount){
		Failure=true;
		FailureMessage=&quot;Child Counts not matching&quot;;
	}

	else{
		Failure=false;
		log.info(&quot;Counts are matching&quot;);
	}
	

}catch(Exception e){
	Failure=true;
	FailureMessage=&quot;Counts not matching&quot;;
	
}


</stringProp>
                  <stringProp name="BeanShellAssertion.filename"></stringProp>
                  <stringProp name="BeanShellAssertion.parameters"></stringProp>
                  <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                </BeanShellAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller-RUL" enabled="true">
              <stringProp name="IfController.condition">&quot;${contentType}&quot;.equalsIgnoreCase(&quot;RUL&quot;)</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
            </IfController>
            <hashTree>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC RUL Parent (Sql server)" enabled="true">
                <stringProp name="dataSource">myDatabase-PRM_${Environment}</stringProp>
                <stringProp name="query">SELECT COUNT(1) FROM (SELECT distinct i_ntm, t_mnl_prd_typ
FROM   dmt00100 WHERE  dmt00100.c_svc_typ = &apos;RU&apos;) T
</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="resultSetHandler">Store as String</stringProp>
                <stringProp name="resultVariable"></stringProp>
                <stringProp name="variableNames">sourceDbCountParent</stringProp>
              </JDBCSampler>
              <hashTree>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="false">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">sourceDbCountParent</stringProp>
                  <stringProp name="RegexExtractor.regex">(.*)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">asd</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request- RUL child  (Sql server)" enabled="true">
                <stringProp name="dataSource">myDatabase-PRM_${Environment}</stringProp>
                <stringProp name="query">SELECT COUNT(1) FROM (SELECT i_ntm, t_mnl_prd_typ
FROM   dmt00100 WHERE  dmt00100.c_svc_typ = &apos;RU&apos;) T

</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="resultSetHandler">Store as String</stringProp>
                <stringProp name="resultVariable"></stringProp>
                <stringProp name="variableNames">sourceDbCountChild</stringProp>
              </JDBCSampler>
              <hashTree>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="false">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">sourceDbCountChild</stringProp>
                  <stringProp name="RegexExtractor.regex">(.*)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">asd</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="${contentType} - Mongodb Count" enabled="true">
                <stringProp name="cacheKey">f253aa47-66e5-4ca5-b317-d80f883d4c8d</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">import org.apache.jmeter.util.JMeterUtils; 
import com.mongodb.*;
import com.mongodb.BasicDBObject;
import com.mongodb.client.model.BsonField.*;
import com.mongodb.Block;
import com.mongodb.MongoClient;
import com.mongodb.MongoException;
import com.mongodb.client.MongoCollection;
import com.mongodb.client.MongoDatabase;
import java.util.Arrays;
import java.util.List;
import java.util.ArrayList;
import org.bson.BsonNull;
import org.bson.Document;
import org.bson.conversions.Bson;
//import org.apache.jmeter.testelement;

long result;

Properties properties = JMeterUtils.getJMeterProperties();
MongoClient coreMongoClient = properties.get(&quot;coreMongoClient&quot;); 




		
    DB coreDB = coreMongoClient.getDB(&quot;verisk_smartcontent&quot;);
    DBCollection collection = coreDB.getCollection(&quot;VERISK_METADATA_COLLECTION&quot;);
   
 	BasicDBObject query = new BasicDBObject(&quot;contentType&quot;, &quot;${contentType}&quot;);
  	result=collection.count(query);
    

    


    
    
    
    </stringProp>
                <stringProp name="scriptLanguage">beanshell</stringProp>
              </JSR223Sampler>
              <hashTree>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">dbCount</stringProp>
                  <stringProp name="RegexExtractor.regex">(.*)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">asd</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="${contentType} - Mongodb-Applicability Count" enabled="true">
                <stringProp name="cacheKey"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">import com.mongodb.Block;
import com.mongodb.MongoClient;
import com.mongodb.MongoException;
import com.mongodb.client.MongoCollection;
import com.mongodb.client.MongoDatabase;
import java.util.Arrays;
import java.util.List;
import java.util.ArrayList;
import org.bson.BsonNull;
import org.bson.Document;
import org.bson.conversions.Bson;
import org.apache.jmeter.testelement.property.JMeterProperty;
import org.apache.jmeter.util.JMeterUtils;
       
Properties properties = JMeterUtils.getJMeterProperties();
MongoClient coreMongoClient = properties.get(&quot;coreMongoClient&quot;); 
            
            MongoDatabase database = coreMongoClient.getDatabase(&quot;verisk_smartcontent&quot;);
            MongoCollection collection = database.getCollection(&quot;VERISK_METADATA_COLLECTION&quot;);
            
            List pipeline = new ArrayList();
            List lsc_applicability_docs = new ArrayList();
            List applicability_size = new ArrayList();
            applicability_size.add(&quot;$rul_applicability_docs&quot;);
            applicability_size.add(&quot;0.0&quot;);
            pipeline.add(
                    new Document()
                            .append(&quot;$match&quot;, new Document()
                                    .append(&quot;contentType&quot;, &quot;RUL&quot;)
                            ));
           pipeline.add(new Document()
                            .append(&quot;$lookup&quot;, new Document()
                                   .append(&quot;from&quot;, &quot;VERISK_APPLICABILITY_COLLECTION&quot;)
                                    .append(&quot;localField&quot;, &quot;metadata_rul_id&quot;)
                                    .append(&quot;foreignField&quot;, &quot;metadata_rul_id&quot;)
                                    .append(&quot;as&quot;, &quot;rul_applicability_docs&quot;)
                            )); 
            pipeline.add(new Document()
                            .append(&quot;$unwind&quot;, &quot;$doc_id&quot;)
                            );
                                                           
           pipeline.add(new Document()
                            .append(&quot;$project&quot;, new Document()
                                     .append(&quot;docCount&quot;, new Document()
                                            .append(&quot;$size&quot;, new Document()
                                                    .append(&quot;$ifNull&quot;, applicability_size)
                                                    )
                                            )
                                    )
                            );
                            
           pipeline.add(new Document()
                            .append(&quot;$group&quot;, new Document()
                                    .append(&quot;_id&quot;, new BsonNull())
                                    .append(&quot;Total&quot;, new Document()
                                            .append(&quot;$sum&quot;, &quot;$docCount&quot;)
                                    )
                            ));
           pipeline.add(new Document()
                            .append(&quot;$project&quot;, new Document()
                                    .append(&quot;Total&quot;, 1.0)
                                    .append(&quot;_id&quot;, 0.0)
                            ));
            
           collection.aggregate(pipeline).first().get(&quot;Total&quot;);

          

           
         
            
       

</stringProp>
                <stringProp name="scriptLanguage">java</stringProp>
              </JSR223Sampler>
              <hashTree>
                <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="script">  log.info(&quot;beanshell total :&quot;+vars.get(${Total}));
  vars.put(&quot;Appcount&quot;,Total);</stringProp>
                </BeanShellPostProcessor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">mongoApplicabilityCount</stringProp>
                  <stringProp name="RegexExtractor.regex">(.*)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">asd</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
                <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="false">
                  <stringProp name="BeanShellAssertion.query">long var_mongoCount=Integer.parseInt(vars.get(&quot;dbCount&quot;));
long var_apiCount=Integer.parseInt(vars.get(&quot;apiCount&quot;));
long var_solrParentCount=Integer.parseInt(vars.get(&quot;parentCount_1&quot;));
long var_solrChildCount=Integer.parseInt(vars.get(&quot;childCount_1&quot;));
long var_mongoApplicabilityCount=Integer.parseInt(vars.get(&quot;mongoApplicabilityCount&quot;));


try{
	if ((var_mongoCount!=var_solrParentCount) &amp;&amp; (var_mongoCount!=var_apiCount)){
		Failure=true;
		FailureMessage=&quot;Parent Counts not matching&quot;;
	}

	else if(var_mongoApplicabilityCount!=var_solrChildCount){
		Failure=true;
		FailureMessage=&quot;Child Counts not matching&quot;;
	}

	else{
		Failure=false;
		log.info(&quot;Counts are matching&quot;);
	}
	

}catch(Exception e){
	Failure=true;
	FailureMessage=&quot;Counts not matching&quot;;
	
}


</stringProp>
                  <stringProp name="BeanShellAssertion.filename"></stringProp>
                  <stringProp name="BeanShellAssertion.parameters"></stringProp>
                  <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                </BeanShellAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller-LSC" enabled="true">
              <stringProp name="IfController.condition">&quot;${contentType}&quot;.equalsIgnoreCase(&quot;LSC&quot;)</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
            </IfController>
            <hashTree>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC LSC Parent (Sql server)" enabled="true">
                <stringProp name="dataSource">myDatabase-PRM_${Environment}</stringProp>
                <stringProp name="query">SELECT COUNT(1) FROM (SELECT distinct i_ntm, t_mnl_prd_typ
FROM   dmt00100 WHERE  dmt00100.c_svc_typ = &apos;LC&apos;) T
</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="resultSetHandler">Store as String</stringProp>
                <stringProp name="resultVariable"></stringProp>
                <stringProp name="variableNames">sourceDbCountParent</stringProp>
              </JDBCSampler>
              <hashTree>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="false">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">sourceDbCountParent</stringProp>
                  <stringProp name="RegexExtractor.regex">(.*)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">asd</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request- LSC child  (Sql server)" enabled="true">
                <stringProp name="dataSource">myDatabase-PRM_${Environment}</stringProp>
                <stringProp name="query">SELECT COUNT(1) FROM (SELECT i_ntm, t_mnl_prd_typ
FROM   dmt00100 WHERE  dmt00100.c_svc_typ = &apos;LC&apos;) T

</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="resultSetHandler">Store as String</stringProp>
                <stringProp name="resultVariable"></stringProp>
                <stringProp name="variableNames">sourceDbCountChild</stringProp>
              </JDBCSampler>
              <hashTree>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="false">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">sourceDbCountChild</stringProp>
                  <stringProp name="RegexExtractor.regex">(.*)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">asd</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="${contentType} - Mongodb Count" enabled="true">
                <stringProp name="cacheKey">f253aa47-66e5-4ca5-b317-d80f883d4c8d</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">import org.apache.jmeter.util.JMeterUtils; 
import com.mongodb.*;
import com.mongodb.BasicDBObject;
import com.mongodb.client.model.BsonField.*;
import com.mongodb.Block;
import com.mongodb.MongoClient;
import com.mongodb.MongoException;
import com.mongodb.client.MongoCollection;
import com.mongodb.client.MongoDatabase;
import java.util.Arrays;
import java.util.List;
import java.util.ArrayList;
import org.bson.BsonNull;
import org.bson.Document;
import org.bson.conversions.Bson;
//import org.apache.jmeter.testelement;

long result;

Properties properties = JMeterUtils.getJMeterProperties();
MongoClient coreMongoClient = properties.get(&quot;coreMongoClient&quot;); 




		
    DB coreDB = coreMongoClient.getDB(&quot;verisk_smartcontent&quot;);
    DBCollection collection = coreDB.getCollection(&quot;VERISK_METADATA_COLLECTION&quot;);
   
 	BasicDBObject query = new BasicDBObject(&quot;contentType&quot;, &quot;${contentType}&quot;);
  	result=collection.count(query);
    

    


    
    
    
    </stringProp>
                <stringProp name="scriptLanguage">beanshell</stringProp>
              </JSR223Sampler>
              <hashTree>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">dbCount</stringProp>
                  <stringProp name="RegexExtractor.regex">(.*)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">asd</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="${contentType} - Mongodb-Applicability Count" enabled="true">
                <stringProp name="cacheKey"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">
import com.mongodb.Block;
import com.mongodb.MongoClient;
import com.mongodb.MongoException;
import com.mongodb.client.MongoCollection;
import com.mongodb.client.MongoDatabase;
import java.util.Arrays;
import java.util.List;
import java.util.ArrayList;
import org.bson.BsonNull;
import org.bson.Document;
import org.bson.conversions.Bson;
import org.apache.jmeter.testelement.property.JMeterProperty;
import org.apache.jmeter.util.JMeterUtils;
     
     
Properties properties = JMeterUtils.getJMeterProperties();
MongoClient coreMongoClient = properties.get(&quot;coreMongoClient&quot;); 
            
            MongoDatabase database = coreMongoClient.getDatabase(&quot;verisk_smartcontent&quot;);
            MongoCollection collection = database.getCollection(&quot;VERISK_METADATA_COLLECTION&quot;);
            
            List pipeline = new ArrayList();
            List lsc_applicability_docs = new ArrayList();
            List applicability_size = new ArrayList();
            applicability_size.add(&quot;$lsc_applicability_docs&quot;);
            applicability_size.add(&quot;0.0&quot;);
            pipeline.add(
                    new Document()
                            .append(&quot;$match&quot;, new Document()
                                    .append(&quot;contentType&quot;, &quot;LSC&quot;)
                            ));
           pipeline.add(new Document()
                            .append(&quot;$lookup&quot;, new Document()
                                   .append(&quot;from&quot;, &quot;VERISK_APPLICABILITY_COLLECTION&quot;)
                                    .append(&quot;localField&quot;, &quot;metadata_lsc_id&quot;)
                                    .append(&quot;foreignField&quot;, &quot;metadata_lsc_id&quot;)
                                    .append(&quot;as&quot;, &quot;lsc_applicability_docs&quot;)
                            )); 
            pipeline.add(new Document()
                            .append(&quot;$unwind&quot;, &quot;$doc_id&quot;)
                            );
                                                           
           pipeline.add(new Document()
                            .append(&quot;$project&quot;, new Document()
                                     .append(&quot;docCount&quot;, new Document()
                                            .append(&quot;$size&quot;, new Document()
                                                    .append(&quot;$ifNull&quot;, applicability_size)
                                                    )
                                            )
                                    )
                            );
                            
           pipeline.add(new Document()
                            .append(&quot;$group&quot;, new Document()
                                    .append(&quot;_id&quot;, new BsonNull())
                                    .append(&quot;Total&quot;, new Document()
                                            .append(&quot;$sum&quot;, &quot;$docCount&quot;)
                                    )
                            ));
           pipeline.add(new Document()
                            .append(&quot;$project&quot;, new Document()
                                    .append(&quot;Total&quot;, 1.0)
                                    .append(&quot;_id&quot;, 0.0)
                            ));
            
           collection.aggregate(pipeline).first().get(&quot;Total&quot;);

           

       

           
         
            
       

</stringProp>
                <stringProp name="scriptLanguage">java</stringProp>
              </JSR223Sampler>
              <hashTree>
                <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="script">  log.info(&quot;beanshell total :&quot;+vars.get(${Total}));
  vars.put(&quot;Appcount&quot;,Total);</stringProp>
                </BeanShellPostProcessor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">mongoApplicabilityCount</stringProp>
                  <stringProp name="RegexExtractor.regex">(.*)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">asd</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
                <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="false">
                  <stringProp name="BeanShellAssertion.query">long var_mongoCount=Integer.parseInt(vars.get(&quot;dbCount&quot;));
long var_apiCount=Integer.parseInt(vars.get(&quot;apiCount&quot;));
long var_solrParentCount=Integer.parseInt(vars.get(&quot;parentCount_1&quot;));
long var_solrChildCount=Integer.parseInt(vars.get(&quot;childCount_1&quot;));
long var_mongoApplicabilityCount=Integer.parseInt(vars.get(&quot;mongoApplicabilityCount&quot;));


try{
	if ((var_mongoCount!=var_solrParentCount) &amp;&amp; (var_mongoCount!=var_apiCount)){
		Failure=true;
		FailureMessage=&quot;Parent Counts not matching&quot;;
	}

	else if(var_mongoApplicabilityCount!=var_solrChildCount){
		Failure=true;
		FailureMessage=&quot;Child Counts not matching&quot;;
	}

	else{
		Failure=false;
		log.info(&quot;Counts are matching&quot;);
	}
	

}catch(Exception e){
	Failure=true;
	FailureMessage=&quot;Counts not matching&quot;;
	
}


</stringProp>
                  <stringProp name="BeanShellAssertion.filename"></stringProp>
                  <stringProp name="BeanShellAssertion.parameters"></stringProp>
                  <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                </BeanShellAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
              <boolProp name="displayJMeterProperties">false</boolProp>
              <boolProp name="displayJMeterVariables">true</boolProp>
              <boolProp name="displaySystemProperties">false</boolProp>
            </DebugSampler>
            <hashTree/>
          </hashTree>
        </hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="flush" enabled="true">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey"></stringProp>
          <stringProp name="script">import com.mongodb.*;
import org.apache.jmeter.util.JMeterUtils; 
import org.apache.jmeter.testelement.property.CollectionProperty;
import org.apache.jmeter.services.FileServer;
import com.mongodb.MongoClient;
import com.mongodb.MongoCredential;

Properties properties = JMeterUtils.getJMeterProperties();
MongoClient coreMongoClient = properties.get(&quot;coreMongoClient&quot;); 
CollectionProperty csvFile=new CollectionProperty();



coreMongoClient.close()
try
{
	coreMongoClient.getDatabaseNames()
}
catch (Exception e)
{
	log.info &quot;Connection already closed&quot;
}

csvFile.clear();


</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
    </hashTree>
    <WorkBench guiclass="WorkBenchGui" testclass="WorkBench" testname="WorkBench" enabled="true">
      <boolProp name="WorkBench.save">true</boolProp>
    </WorkBench>
    <hashTree/>
  </hashTree>
</jmeterTestPlan>
