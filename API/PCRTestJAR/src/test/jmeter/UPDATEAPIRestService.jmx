<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="3.2" jmeter="3.3 r1808647">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">true</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="uatserver" elementType="Argument">
            <stringProp name="Argument.name">uatserver</stringProp>
            <stringProp name="Argument.value">pcr-uat.iso.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="csv" elementType="Argument">
            <stringProp name="Argument.name">csv</stringProp>
            <stringProp name="Argument.value">${__property(csvSource,,C:\\Users\\i20918\\Desktop\\PCR\\pcr_automation\\pcr_test\\develop\\pcr.test\\API\\PCRTestJAR\\src\\test\\resources)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">C://apache-jmeter-3.2//bin//PCR regression//PCR regression//Test_data</stringProp>
          </elementProp>
          <elementProp name="Environment" elementType="Argument">
            <stringProp name="Argument.name">Environment</stringProp>
            <stringProp name="Argument.value">${__property(server,,uat)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="stgserver" elementType="Argument">
            <stringProp name="Argument.name">stgserver</stringProp>
            <stringProp name="Argument.value">staging-content.iso.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="prodserver" elementType="Argument">
            <stringProp name="Argument.name">prodserver</stringProp>
            <stringProp name="Argument.value">pcr-content.iso.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="Testdatadocumentpath" elementType="Argument">
            <stringProp name="Argument.name">Testdatadocumentpath</stringProp>
            <stringProp name="Argument.value">${__property(csvSource,,C:\\Users\\i20918\\Desktop\\PCR\\pcr_automation\\pcr_test\\develop\\pcr.test\\API\\PCRTestJAR\\src\\test\\resources)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="uatSolr" elementType="Argument">
            <stringProp name="Argument.name">uatSolr</stringProp>
            <stringProp name="Argument.value">10.93.204.24</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="stagingSolr" elementType="Argument">
            <stringProp name="Argument.name">stagingSolr</stringProp>
            <stringProp name="Argument.value">0931-pcrslr-u01.veriska.local</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="prodSolr" elementType="Argument">
            <stringProp name="Argument.name">prodSolr</stringProp>
            <stringProp name="Argument.value">10.53.196.25</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1365025454000</longProp>
        <longProp name="ThreadGroup.end_time">1365025454000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="false">
          <stringProp name="BeanShellSampler.query">import com.mongodb.client.MongoDatabase;
import com.mongodb.*;
import com.mongodb.Block;
import  com.mongodb.MongoClient;
import com.mongodb.MongoException;
import com.mongodb.client.*;
import java.util.Arrays;
import java.util.List;
import java.util.ArrayList;
import org.bson.BsonNull;
import org.bson.Document;
import org.bson.conversions.Bson;
import org.apache.jmeter.util.JMeterUtils; 


MongoClient coreMongoClient;
com.mongodb.client.MongoDatabase database;
		
		if(vars.get(&quot;Environment&quot;).equalsIgnoreCase(&quot;prod&quot;))
		{
			
			vars.put(&quot;server&quot;,vars.get(&quot;prodserver&quot;));
			vars.put(&quot;Mongodbserver&quot;,&quot;0931-PCRMGD-P01.veriskp.local&quot;);
			vars.put(&quot;Mongodbserverport&quot;,&quot;27017&quot;);
			vars.put(&quot;solrServer&quot;,vars.get(&quot;prodSolr&quot;));
			vars.put(&quot;userName&quot;,&quot;PCRREADUSRP&quot;);
			//vars.put(&quot;passWord&quot;,&apos;6rUbEwu#\$&apos;);
			vars.put(&quot;source&quot;,&quot;admin&quot;);
			MongoCredential mongoCredential = MongoCredential.createScramSha1Credential(&quot;PCRREADUSRP&quot;,&quot;admin&quot;,&apos;6rUbEwu#\$&apos;.toCharArray());
    			coreMongoClient = new MongoClient(new ServerAddress(&quot;0931-PCRMGD-P01.veriskp.local&quot;, 27017),Arrays.asList(mongoCredential));
    			
			}
			
		else if(vars.get(&quot;Environment&quot;).equalsIgnoreCase(&quot;stg&quot;))
		{
			vars.put(&quot;server&quot;,vars.get(&quot;stgserver&quot;));
			vars.put(&quot;Mongodbserver&quot;,&quot;0931-PCRMGD-U01.veriska.local&quot;);
			vars.put(&quot;Mongodbserverport&quot;,&quot;27017&quot;);
			vars.put(&quot;solrServer&quot;,vars.get(&quot;stagingSolr&quot;));
			vars.put(&quot;userName&quot;,&quot;PIDPCRBPA&quot;);
			vars.put(&quot;passWord&quot;,&apos;pRU6Refe\$&apos;);
			vars.put(&quot;source&quot;,&quot;admin&quot;);
			MongoCredential mongoCredential = MongoCredential.createScramSha1Credential(&quot;PIDPCRBPA&quot;,&quot;admin&quot;,&apos;pRU6Refe\$&apos;.toCharArray());
    			coreMongoClient = new MongoClient(new ServerAddress(&quot;0931-PCRMGD-U01.veriska.local&quot;, 27017),Arrays.asList(mongoCredential));
    			
			
		}
		else if(vars.get(&quot;Environment&quot;).equalsIgnoreCase(&quot;uat&quot;))
		{
			vars.put(&quot;server&quot;,vars.get(&quot;uatserver&quot;));
			vars.put(&quot;Mongodbserver&quot;,&quot;10.93.204.78&quot;);
			
			vars.put(&quot;Mongodbserverport&quot;,&quot;27017&quot;);
			vars.put(&quot;solrServer&quot;,vars.get(&quot;uatSolr&quot;));
			coreMongoClient = new MongoClient(&quot;10.93.204.78&quot;, 27017);
			database = coreMongoClient.getDatabase(&quot;verisk_smartcontent&quot;);
			
			
			
			//vars.put(&quot;Mongodbserver&quot;,&quot;0931-PCRMGD-U01.veriska.local&quot;);
			//vars.put(&quot;Mongodbserverport&quot;,&quot;27017&quot;);
		}

		Properties properties=JMeterUtils.getJMeterProperties();
		properties.put(&quot;coreMongoClient&quot;,coreMongoClient);
		properties.put(&quot;database&quot;,database);
	 
			
			 </stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="false">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Content-Type</stringProp>
              <stringProp name="Header.value">application/json</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler" enabled="true">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey"></stringProp>
          <stringProp name="script">import com.mongodb.*;
import com.mongodb.MongoCredential;
import org.apache.jmeter.util.JMeterUtils; 
import org.apache.jmeter.testelement.property.CollectionProperty;

MongoClient coreMongoClient=null;
		
		if(vars.get(&quot;Environment&quot;).equalsIgnoreCase(&quot;prod&quot;))
		{
			vars.put(&quot;server&quot;,vars.get(&quot;prodserver&quot;));
			vars.put(&quot;Mongodbserver&quot;,&quot;0931-PCRMGD-P01.veriskp.local&quot;);
			vars.put(&quot;Mongodbserverport&quot;,&quot;27017&quot;);
			vars.put(&quot;solrServer&quot;,vars.get(&quot;prodSolr&quot;));
			vars.put(&quot;userName&quot;,&quot;PCRREADUSRP&quot;);
			//vars.put(&quot;passWord&quot;,&apos;6rUbEwu#\$&apos;);
			vars.put(&quot;source&quot;,&quot;admin&quot;);
			MongoCredential mongoCredential = MongoCredential.createScramSha1Credential(&quot;PCRREADUSRP&quot;,&quot;admin&quot;,&apos;6rUbEwu#\$&apos;.toCharArray());
    			coreMongoClient = new MongoClient(new ServerAddress(&quot;0931-PCRMGD-P01.veriskp.local&quot;, 27017),Arrays.asList(mongoCredential));
    			
			}
			
		else if(vars.get(&quot;Environment&quot;).equalsIgnoreCase(&quot;stg&quot;))
		{
			vars.put(&quot;server&quot;,vars.get(&quot;stgserver&quot;));
			vars.put(&quot;Mongodbserver&quot;,&quot;0931-PCRMGD-U02.veriska.local&quot;);
			vars.put(&quot;Mongodbserverport&quot;,&quot;27017&quot;);
			vars.put(&quot;solrServer&quot;,vars.get(&quot;stagingSolr&quot;));
			vars.put(&quot;userName&quot;,&quot;PIDPCRBPA&quot;);
			vars.put(&quot;passWord&quot;,&apos;pRU6Refe\$&apos;);
			vars.put(&quot;source&quot;,&quot;admin&quot;);
			MongoCredential mongoCredential = MongoCredential.createScramSha1Credential(&quot;PIDPCRBPA&quot;,&quot;admin&quot;,&apos;pRU6Refe\$&apos;.toCharArray());
    			coreMongoClient = new MongoClient(new ServerAddress(&quot;0931-PCRMGD-U01.veriska.local&quot;, 27017),Arrays.asList(mongoCredential));
    			
			
		}
		else if(vars.get(&quot;Environment&quot;).equalsIgnoreCase(&quot;uat&quot;))
		{
			vars.put(&quot;server&quot;,vars.get(&quot;uatserver&quot;));
			vars.put(&quot;Mongodbserver&quot;,&quot;10.93.204.78&quot;);
			
			vars.put(&quot;Mongodbserverport&quot;,&quot;27017&quot;);
			vars.put(&quot;solrServer&quot;,vars.get(&quot;uatSolr&quot;));
			coreMongoClient = new MongoClient(&quot;10.93.204.78&quot;, 27017);
			
			
			
			//vars.put(&quot;Mongodbserver&quot;,&quot;0931-PCRMGD-U01.veriska.local&quot;);
			//vars.put(&quot;Mongodbserverport&quot;,&quot;27017&quot;);
		}

		Properties properties=JMeterUtils.getJMeterProperties();
		properties.put(&quot;coreMongoClient&quot;,coreMongoClient);
	 
			
			  

			  




    


    
    
    
    </stringProp>
        </JSR223Sampler>
        <hashTree/>
        <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="While Controller" enabled="true">
          <stringProp name="WhileController.condition">${__javaScript(&quot;${Contenttype}&quot; != &quot;&lt;EOF&gt;&quot;,)} </stringProp>
        </WhileController>
        <hashTree>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
            <stringProp name="delimiter">,</stringProp>
            <stringProp name="fileEncoding"></stringProp>
            <stringProp name="filename">${csv}/UPDATEAPI_${Environment}.csv</stringProp>
            <boolProp name="quotedData">true</boolProp>
            <boolProp name="recycle">false</boolProp>
            <stringProp name="shareMode">shareMode.all</stringProp>
            <boolProp name="stopThread">false</boolProp>
            <stringProp name="variableNames">clientId,Contenttype,FieldNames,method,uniquekey,jurisdiction,FieldNamesvalue,uniquekeyvalue,filename,update,metadata,filetobeuploaded,metadatafield,downloadfileformat </stringProp>
            <boolProp name="ignoreFirstLine">true</boolProp>
          </CSVDataSet>
          <hashTree/>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
            <stringProp name="IfController.condition">&quot;${Contenttype}&quot; != &quot;&lt;EOF&gt;&quot;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller-FRM" enabled="true">
              <stringProp name="IfController.condition">&quot;${Contenttype}&quot;==&quot;FRM&quot;</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
            </IfController>
            <hashTree>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="false">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">import org.apache.jmeter.protocol.http.control.Header;
sampler.getHeaderManager().removeHeaderNamed(&quot;Content-Type&quot;);</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="${Contenttype} - INSERT Operation" enabled="true">
                <stringProp name="IfController.condition">&quot;${update}&quot;==&quot;INSERT&quot;</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
              </IfController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${Contenttype} - INSERT" enabled="true">
                  <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs">
                    <collectionProp name="HTTPFileArgs.files">
                      <elementProp name="${Testdatadocumentpath}//${filetobeuploaded}" elementType="HTTPFileArg">
                        <stringProp name="File.path">${Testdatadocumentpath}//${filetobeuploaded}</stringProp>
                        <stringProp name="File.paramname">file</stringProp>
                        <stringProp name="File.mimetype">doc</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="metadata" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${metadata}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">metadata</stringProp>
                      </elementProp>
                      <elementProp name="request_id" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">067e6162-3b6f-4ae2-a171-2470b63dff01</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">request_id</stringProp>
                      </elementProp>
                      <elementProp name="client_id" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${clientId}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">client_id</stringProp>
                      </elementProp>
                      <elementProp name="contentType" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${Contenttype}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">contentType</stringProp>
                      </elementProp>
                      <elementProp name="fileName" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${filename}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">fileName</stringProp>
                      </elementProp>
                      <elementProp name="update" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${update}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">update</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${server}</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">https</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/pcr-update-api/V2.1/CreateMessage</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="49588">202</stringProp>
                      <stringProp name="0"></stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">2</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                </hashTree>
                <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                  <boolProp name="resetInterpreter">true</boolProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="script">import org.apache.jmeter.protocol.http.control.Header;

sampler.getHeaderManager().add(new Header(&quot;Content-Type&quot;,&quot;application/json&quot;));



</stringProp>
                </BeanShellPostProcessor>
                <hashTree/>
                <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="FRM - Verify if inserted in mongodb" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey"></stringProp>
                  <stringProp name="script">import com.mongodb.*
import com.mongodb.BasicDBObject;
import org.apache.jmeter.util.JMeterUtils; 

long result;

    
Properties properties = JMeterUtils.getJMeterProperties();
MongoClient coreMongoClient = properties.get(&quot;coreMongoClient&quot;); 

    DB coreDB = coreMongoClient.getDB(&quot;verisk_smartcontent&quot;);
    DBCollection collection = coreDB.getCollection(&quot;VERISK_METADATA_COLLECTION&quot;);
    BasicDBObject query = new BasicDBObject(&quot;uri&quot;, &quot;${uniquekey}&quot;);
    result = collection.count(query);</stringProp>
                </JSR223Sampler>
                <hashTree>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">dbCount</stringProp>
                    <stringProp name="RegexExtractor.regex">(.*)</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">asd</stringProp>
                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                  <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                    <stringProp name="BeanShellAssertion.query">long mongoCount=Integer.parseInt(vars.get(&quot;dbCount&quot;));

try{
	if (mongoCount==1){
	Failure=false;
	log.info(&quot;Forms inserted to mongodb&quot;);
	
	
	}
	else{
	Failure=true;
	FailureMessage=&quot;Forms didnt get inserted&quot;;
	log.error(&quot;Bean Shell Assertion is Fail&quot;);
	}
}catch(Exception E){
	Failure=true;
	FailureMessage=&quot;Forms didnt get inserted&quot;;
}</stringProp>
                    <stringProp name="BeanShellAssertion.filename"></stringProp>
                    <stringProp name="BeanShellAssertion.parameters"></stringProp>
                    <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                  </BeanShellAssertion>
                  <hashTree/>
                  <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
                    <stringProp name="ConstantTimer.delay">15000</stringProp>
                  </ConstantTimer>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="FRM - Verify if reindexed to SOLR" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
&quot;appId&quot;:&quot;${clientId}&quot;,&#xd;
&quot;clientId&quot;:&quot;${clientId}&quot;,&#xd;
&quot;requestId&quot;:&quot;3r436y 4yyuh46676uy7&quot;,&#xd;
&quot;pageSize&quot;:&quot;1&quot;,&#xd;
&quot;searchOption&quot;:&quot;facsimile&quot;,&#xd;
&quot;searchScope&quot;:&quot;ISOANDCLIENT&quot;,&#xd;
&quot;filterQuery&quot;:&quot;(contentType:\&quot;${Contenttype}\&quot;)&quot;,&#xd;
&quot;uri&quot;:&quot;${uniquekey}&quot;&#xd;
}&#xd;
</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${server}</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">https</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">pcr-rest-api/V4/Search/</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">Content-Type</stringProp>
                        <stringProp name="Header.value">application/json</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="jp@gc - JSON Path Extractor" enabled="true">
                    <stringProp name="VAR">jsonCount</stringProp>
                    <stringProp name="JSONPATH">$.numFound</stringProp>
                    <stringProp name="DEFAULT">NOT FOUND</stringProp>
                    <stringProp name="VARIABLE"></stringProp>
                    <stringProp name="SUBJECT">BODY</stringProp>
                  </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
                  <hashTree/>
                  <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                    <stringProp name="BeanShellAssertion.query">long solrCount=Integer.parseInt(vars.get(&quot;jsonCount&quot;));
long mongoCount=Integer.parseInt(vars.get(&quot;dbCount&quot;));

try{
	if (solrCount&gt;=1){
	Failure=false;
	log.info(&quot;Forms reindexed to SOLR&quot;);
	
	
	}
	else{
	Failure=true;
	FailureMessage=&quot;Forms didnt get reindexed&quot;;
	log.error(&quot;Bean Shell Assertion is Fail&quot;);
	}
}catch(Exception E){
	Failure=true;
	FailureMessage=&quot;Forms didnt get reindexed&quot;;
}










</stringProp>
                    <stringProp name="BeanShellAssertion.filename"></stringProp>
                    <stringProp name="BeanShellAssertion.parameters"></stringProp>
                    <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                  </BeanShellAssertion>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="FRM - APPLICABILITY_UPDATE" enabled="true">
                <stringProp name="IfController.condition">&quot;${update}&quot;==&quot;APPLICABILITY_UPDATE&quot; </stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
              </IfController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="FRM- APPLICABILITY_UPDATE" enabled="true">
                  <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs">
                    <collectionProp name="HTTPFileArgs.files">
                      <elementProp name="${Testdatadocumentpath}//${filetobeuploaded}" elementType="HTTPFileArg">
                        <stringProp name="File.path">${Testdatadocumentpath}//${filetobeuploaded}</stringProp>
                        <stringProp name="File.paramname">file</stringProp>
                        <stringProp name="File.mimetype">docx</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="metadata" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${metadata}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">metadata</stringProp>
                      </elementProp>
                      <elementProp name="request_id" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">067e6162-3b6f-4ae2-a171-2470b63dff01</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">request_id</stringProp>
                      </elementProp>
                      <elementProp name="client_id" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${clientId}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">client_id</stringProp>
                      </elementProp>
                      <elementProp name="contentType" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${Contenttype}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">contentType</stringProp>
                      </elementProp>
                      <elementProp name="filename" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${filename}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">filename</stringProp>
                      </elementProp>
                      <elementProp name="update" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${update}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">update</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${server}</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">https</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/pcr-update-api/V2.1/CreateMessage</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="false">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">Content-Type</stringProp>
                        <stringProp name="Header.value">multipart/form-data</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="49588">202</stringProp>
                      <stringProp name="0"></stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">2</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                  <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                    <boolProp name="resetInterpreter">true</boolProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="script">import org.apache.jmeter.protocol.http.control.Header;

sampler.getHeaderManager().add(new Header(&quot;Content-Type&quot;,&quot;application/json&quot;));



</stringProp>
                  </BeanShellPostProcessor>
                  <hashTree/>
                </hashTree>
                <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="FRM- Verify if inserted in mongodb" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey"></stringProp>
                  <stringProp name="script">import com.mongodb.*
import com.mongodb.BasicDBObject
import org.apache.jmeter.util.JMeterUtils; 

long result;

    
Properties properties = JMeterUtils.getJMeterProperties();
MongoClient coreMongoClient = properties.get(&quot;coreMongoClient&quot;); 
    DB coreDB = coreMongoClient.getDB(&quot;verisk_smartcontent&quot;);
    DBCollection collection = coreDB.getCollection(&quot;VERISK_METADATA_COLLECTION&quot;);
    BasicDBObject query = new BasicDBObject(&quot;uri&quot;, &quot;${uniquekey}&quot;);
    result = collection.count(query);</stringProp>
                </JSR223Sampler>
                <hashTree>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">dbCount</stringProp>
                    <stringProp name="RegexExtractor.regex">(.*)</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">asd</stringProp>
                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                  <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                    <stringProp name="BeanShellAssertion.query">long mongoCount=Integer.parseInt(vars.get(&quot;dbCount&quot;));

try{
	if (mongoCount==1){
	Failure=false;
	log.info(&quot;Forms inserted to mongodb&quot;);
	
	
	}
	else{
	Failure=true;
	FailureMessage=&quot;Forms didnt get inserted&quot;;
	log.error(&quot;Bean Shell Assertion is Fail&quot;);
	}
}catch(Exception E){
	Failure=true;
	FailureMessage=&quot;Forms didnt get inserted&quot;;
}</stringProp>
                    <stringProp name="BeanShellAssertion.filename"></stringProp>
                    <stringProp name="BeanShellAssertion.parameters"></stringProp>
                    <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                  </BeanShellAssertion>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="FRM - Verify if reindexed to SOLR" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
&quot;appId&quot;:&quot;${clientId}&quot;,&#xd;
&quot;clientId&quot;:&quot;${clientId}&quot;,&#xd;
&quot;requestId&quot;:&quot;3r436y 4yyuh46676uy7&quot;,&#xd;
&quot;pageSize&quot;:&quot;1&quot;,&#xd;
&quot;searchOption&quot;:&quot;facsimile&quot;,&#xd;
&quot;searchScope&quot;:&quot;ISOANDCLIENT&quot;,&#xd;
&quot;filterQuery&quot;:&quot;(contentType:\&quot;${Contenttype}\&quot;)&quot;,&#xd;
&quot;uri&quot;:&quot;${uniquekey}&quot;&#xd;
}&#xd;
</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${server}</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">https</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">pcr-rest-api/V4/Search/</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">Content-Type</stringProp>
                        <stringProp name="Header.value">application/json</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
                    <stringProp name="ConstantTimer.delay">20000</stringProp>
                  </ConstantTimer>
                  <hashTree/>
                  <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="jp@gc - JSON Path Extractor" enabled="true">
                    <stringProp name="VAR">jsonCount</stringProp>
                    <stringProp name="JSONPATH">$.numFound</stringProp>
                    <stringProp name="DEFAULT">NOT FOUND</stringProp>
                    <stringProp name="VARIABLE"></stringProp>
                    <stringProp name="SUBJECT">BODY</stringProp>
                  </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
                  <hashTree/>
                  <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                    <stringProp name="BeanShellAssertion.query">long solrCount=Integer.parseInt(vars.get(&quot;jsonCount&quot;));
long mongoCount=Integer.parseInt(vars.get(&quot;dbCount&quot;));

try{
	if (solrCount==2){
	Failure=false;
	log.info(&quot;New Applicability reindexed to SOLR&quot;);
	
	
	}
	else{
	Failure=true;
	FailureMessage=&quot;New Applicability didnt get reindexed to SOLR&quot;;
	log.error(&quot;Bean Shell Assertion is Fail&quot;);
	}
}catch(Exception E){
	Failure=true;
	FailureMessage=&quot;New Applicability didnt get reindexed to SOLR&quot;;
}










</stringProp>
                    <stringProp name="BeanShellAssertion.filename"></stringProp>
                    <stringProp name="BeanShellAssertion.parameters"></stringProp>
                    <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                  </BeanShellAssertion>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="FRM-DOCUMENT_UPDATE " enabled="true">
                <stringProp name="IfController.condition">&quot;${update}&quot;==&quot;DOCUMENT_UPDATE&quot;</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
              </IfController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${Contenttype} - UPDATE_DOCUMENT" enabled="true">
                  <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs">
                    <collectionProp name="HTTPFileArgs.files">
                      <elementProp name="${Testdatadocumentpath}//${filetobeuploaded}" elementType="HTTPFileArg">
                        <stringProp name="File.path">${Testdatadocumentpath}//${filetobeuploaded}</stringProp>
                        <stringProp name="File.paramname">file</stringProp>
                        <stringProp name="File.mimetype">doc</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="metadata" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${metadata}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">metadata</stringProp>
                      </elementProp>
                      <elementProp name="request_id" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">067e6162-3b6f-4ae2-a171-2470b63dff01</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">request_id</stringProp>
                      </elementProp>
                      <elementProp name="client_id" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${clientId}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">client_id</stringProp>
                      </elementProp>
                      <elementProp name="contentType" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${Contenttype}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">contentType</stringProp>
                      </elementProp>
                      <elementProp name="fileName" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${filename}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">fileName</stringProp>
                      </elementProp>
                      <elementProp name="update" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${update}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">update</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${server}</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">https</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/pcr-update-api/V2.1/CreateMessage</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="false">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">Content-Type</stringProp>
                        <stringProp name="Header.value">multipart/form-data</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="49588">202</stringProp>
                      <stringProp name="0"></stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">2</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${Contenttype} - Verify if reindexed to SOLR" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
&quot;appId&quot;:&quot;${clientId}&quot;,&#xd;
&quot;clientId&quot;:&quot;${clientId}&quot;,&#xd;
&quot;requestId&quot;:&quot;3r436y 4yyuh46676uy7&quot;,&#xd;
&quot;pageSize&quot;:&quot;1&quot;,&#xd;
&quot;searchOption&quot;:&quot;facsimile&quot;,&#xd;
&quot;searchScope&quot;:&quot;ISOANDCLIENT&quot;,&#xd;
&quot;filterQuery&quot;:&quot;(contentType:\&quot;${Contenttype}\&quot;)&quot;,&#xd;
&quot;uri&quot;:&quot;${uniquekey}&quot;&#xd;
}&#xd;
</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${server}</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">https</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">pcr-rest-api/V4/Search/</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">Content-Type</stringProp>
                        <stringProp name="Header.value">application/json</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
                    <stringProp name="ConstantTimer.delay">5000</stringProp>
                  </ConstantTimer>
                  <hashTree/>
                  <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="jp@gc - JSON Path Extractor" enabled="true">
                    <stringProp name="VAR">jsonDocId</stringProp>
                    <stringProp name="JSONPATH">$.docs[*].doc_id</stringProp>
                    <stringProp name="DEFAULT">NOT FOUND</stringProp>
                    <stringProp name="VARIABLE"></stringProp>
                    <stringProp name="SUBJECT">BODY</stringProp>
                  </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${Contenttype} - Download document" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{ &#xd;
&quot;clientId&quot; :&quot;VERISK_001&quot;,&#xd;
&quot;requestId&quot;:&quot;b32e9d5f-50f9-4c17-910c-56e3c51aeddb&quot;,&#xd;
&quot;documents&quot;:&#xd;
	[&#xd;
		{ &#xd;
			&quot;docId&quot;:&quot;${jsonDocId_1}&quot;,&#xd;
			&quot;fileType&quot;:&quot;doc&quot;&#xd;
		&#xd;
		}&#xd;
	]&#xd;
}&#xd;
</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${server}</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">https</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">pcr-rest-api/V2.1/GetDocument/</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">Content-Type</stringProp>
                        <stringProp name="Header.value">application/json</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
                    <stringProp name="ConstantTimer.delay">5000</stringProp>
                  </ConstantTimer>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="49586">200</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">2</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="FRM-DOCUMENT_ATTACHMENT " enabled="true">
                <stringProp name="IfController.condition">&quot;${update}&quot;==&quot;DOCUMENT_ATTACHMENT&quot;</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
              </IfController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${Contenttype} - DOCUMENT_ATTACHMENT" enabled="true">
                  <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs">
                    <collectionProp name="HTTPFileArgs.files">
                      <elementProp name="${Testdatadocumentpath}//${filetobeuploaded}" elementType="HTTPFileArg">
                        <stringProp name="File.path">${Testdatadocumentpath}//${filetobeuploaded}</stringProp>
                        <stringProp name="File.paramname">file</stringProp>
                        <stringProp name="File.mimetype">pdf</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="metadata" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${metadata}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">metadata</stringProp>
                      </elementProp>
                      <elementProp name="request_id" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">067e6162-3b6f-4ae2-a171-2470b63dff01</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">request_id</stringProp>
                      </elementProp>
                      <elementProp name="client_id" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${clientId}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">client_id</stringProp>
                      </elementProp>
                      <elementProp name="contentType" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${Contenttype}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">contentType</stringProp>
                      </elementProp>
                      <elementProp name="fileName" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${filename}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">fileName</stringProp>
                      </elementProp>
                      <elementProp name="update" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${update}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">update</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${server}</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">https</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/pcr-update-api/V2.1/CreateMessage</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="false">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">Content-Type</stringProp>
                        <stringProp name="Header.value">multipart/form-data</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="49588">202</stringProp>
                      <stringProp name="0"></stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">2</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${Contenttype} - Verify if reindexed to SOLR" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
&quot;appId&quot;:&quot;${clientId}&quot;,&#xd;
&quot;clientId&quot;:&quot;${clientId}&quot;,&#xd;
&quot;requestId&quot;:&quot;3r436y 4yyuh46676uy7&quot;,&#xd;
&quot;pageSize&quot;:&quot;1&quot;,&#xd;
&quot;searchOption&quot;:&quot;facsimile&quot;,&#xd;
&quot;searchScope&quot;:&quot;ISOANDCLIENT&quot;,&#xd;
&quot;filterQuery&quot;:&quot;(contentType:\&quot;${Contenttype}\&quot;)&quot;,&#xd;
&quot;uri&quot;:&quot;${uniquekey}&quot;&#xd;
}&#xd;
</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${server}</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">https</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">pcr-rest-api/V4/Search/</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">Content-Type</stringProp>
                        <stringProp name="Header.value">application/json</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
                    <stringProp name="ConstantTimer.delay">15000</stringProp>
                  </ConstantTimer>
                  <hashTree/>
                  <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="jp@gc - JSON Path Extractor" enabled="true">
                    <stringProp name="VAR">jsonDocId</stringProp>
                    <stringProp name="JSONPATH">$.docs[*].doc_id</stringProp>
                    <stringProp name="DEFAULT">NOT FOUND</stringProp>
                    <stringProp name="VARIABLE"></stringProp>
                    <stringProp name="SUBJECT">BODY</stringProp>
                  </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${Contenttype} - Download attachment" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{ &#xd;
&quot;clientId&quot; :&quot;VERISK_001&quot;,&#xd;
&quot;requestId&quot;:&quot;b32e9d5f-50f9-4c17-910c-56e3c51aeddb&quot;,&#xd;
&quot;documents&quot;:&#xd;
	[&#xd;
		{ &#xd;
			&quot;docId&quot;:&quot;${jsonDocId_1}&quot;,&#xd;
			&quot;fileType&quot;:&quot;pdf&quot;&#xd;
		&#xd;
		}&#xd;
	]&#xd;
}&#xd;
</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${server}</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">https</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">pcr-rest-api/V2.1/GetDocument/</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">Content-Type</stringProp>
                        <stringProp name="Header.value">application/json</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
                    <stringProp name="ConstantTimer.delay">5000</stringProp>
                  </ConstantTimer>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="49586">200</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">2</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="FRM-METADATA_ONLY " enabled="true">
                <stringProp name="IfController.condition">&quot;${update}&quot;==&quot;METADATA_ONLY&quot;</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
              </IfController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request-${update}-${Contenttype}" enabled="true">
                  <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs">
                    <collectionProp name="HTTPFileArgs.files">
                      <elementProp name="${Testdatadocumentpath}//${filetobeuploaded}" elementType="HTTPFileArg">
                        <stringProp name="File.path">${Testdatadocumentpath}//${filetobeuploaded}</stringProp>
                        <stringProp name="File.paramname">file</stringProp>
                        <stringProp name="File.mimetype">docx</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="metadata" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${metadata}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">metadata</stringProp>
                      </elementProp>
                      <elementProp name="request_id" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">067e6162-3b6f-4ae2-a171-2470b63dff01</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">request_id</stringProp>
                      </elementProp>
                      <elementProp name="client_id" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${clientId}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">client_id</stringProp>
                      </elementProp>
                      <elementProp name="contentType" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${Contenttype}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">contentType</stringProp>
                      </elementProp>
                      <elementProp name="filename" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${filename}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">filename</stringProp>
                      </elementProp>
                      <elementProp name="update" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${update}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">update</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${server}</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">https</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/pcr-update-api/V2.1/CreateMessage</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="false">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">Content-Type</stringProp>
                        <stringProp name="Header.value">multipart/form-data</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="49588">202</stringProp>
                      <stringProp name="0"></stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">2</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${Contenttype} - Verify if reindexed to SOLR" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
&quot;appId&quot;:&quot;${clientId}&quot;,&#xd;
&quot;clientId&quot;:&quot;${clientId}&quot;,&#xd;
&quot;requestId&quot;:&quot;3r436y 4yyuh46676uy7&quot;,&#xd;
&quot;pageSize&quot;:&quot;1&quot;,&#xd;
&quot;searchOption&quot;:&quot;facsimile&quot;,&#xd;
&quot;searchScope&quot;:&quot;ISOANDCLIENT&quot;,&#xd;
&quot;filterQuery&quot;:&quot;(contentType:\&quot;${Contenttype}\&quot;)&quot;,&#xd;
&quot;uri&quot;:&quot;${uniquekey}&quot;&#xd;
}&#xd;
</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${server}</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">https</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">pcr-rest-api/V4/Search/</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">Content-Type</stringProp>
                        <stringProp name="Header.value">application/json</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
                    <stringProp name="ConstantTimer.delay">15000</stringProp>
                  </ConstantTimer>
                  <hashTree/>
                  <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="jp@gc - JSON Path Extractor" enabled="true">
                    <stringProp name="VAR">jsontitle</stringProp>
                    <stringProp name="JSONPATH">$.docs[*].title</stringProp>
                    <stringProp name="DEFAULT">NOT FOUND</stringProp>
                    <stringProp name="VARIABLE"></stringProp>
                    <stringProp name="SUBJECT">BODY</stringProp>
                  </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
                  <hashTree/>
                  <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                    <stringProp name="BeanShellAssertion.query">String responsetitle=vars.get(&quot;jsontitle_1&quot;);

String csvtitle=&quot;${jurisdiction}&quot;;

try{
	if (responsetitle.equals(csvtitle)){
	Failure=false;
	log.info(&quot;Metadata changed&quot;);
	
	
	}
	else{
	Failure=true;
	FailureMessage=&quot;Metadata not updated&quot;;
	log.error(&quot;Bean Shell Assertion is Fail&quot;);
	}
	}catch(Exception E){
	Failure=true;
	FailureMessage=&quot;Metadata not updated&quot;;
}</stringProp>
                    <stringProp name="BeanShellAssertion.filename"></stringProp>
                    <stringProp name="BeanShellAssertion.parameters"></stringProp>
                    <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                  </BeanShellAssertion>
                  <hashTree/>
                </hashTree>
              </hashTree>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller-CRC" enabled="true">
              <stringProp name="IfController.condition">&quot;${Contenttype}&quot;==&quot;CRC&quot;</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
            </IfController>
            <hashTree>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="false">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">import org.apache.jmeter.protocol.http.control.Header;
sampler.getHeaderManager().removeHeaderNamed(&quot;Content-Type&quot;);</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="${Contenttype} - INSERT Operation" enabled="true">
                <stringProp name="IfController.condition">&quot;${update}&quot;==&quot;INSERT&quot;</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
              </IfController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CRC - INSERT" enabled="true">
                  <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs">
                    <collectionProp name="HTTPFileArgs.files">
                      <elementProp name="${Testdatadocumentpath}//${filetobeuploaded}" elementType="HTTPFileArg">
                        <stringProp name="File.path">${Testdatadocumentpath}//${filetobeuploaded}</stringProp>
                        <stringProp name="File.paramname">file</stringProp>
                        <stringProp name="File.mimetype">pdf</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="metadata" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${metadata}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">metadata</stringProp>
                      </elementProp>
                      <elementProp name="request_id" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">067e6162-3b6f-4ae2-a171-2470b63dff01</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">request_id</stringProp>
                      </elementProp>
                      <elementProp name="client_id" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${clientId}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">client_id</stringProp>
                      </elementProp>
                      <elementProp name="contentType" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${Contenttype}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">contentType</stringProp>
                      </elementProp>
                      <elementProp name="fileName" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${filename}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">fileName</stringProp>
                      </elementProp>
                      <elementProp name="update" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${update}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">update</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${server}</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">https</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/pcr-update-api/V2.1/CreateMessage</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="49588">202</stringProp>
                      <stringProp name="0"></stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">2</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                </hashTree>
                <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                  <boolProp name="resetInterpreter">true</boolProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="script">import org.apache.jmeter.protocol.http.control.Header;

sampler.getHeaderManager().add(new Header(&quot;Content-Type&quot;,&quot;application/json&quot;));



</stringProp>
                </BeanShellPostProcessor>
                <hashTree/>
                <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="CRC - Verify if inserted in mongodb" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey"></stringProp>
                  <stringProp name="script">import com.mongodb.*
import com.mongodb.BasicDBObject
import org.apache.jmeter.util.JMeterUtils; 

long result;

    
Properties properties = JMeterUtils.getJMeterProperties();
MongoClient coreMongoClient = properties.get(&quot;coreMongoClient&quot;); 
    DB coreDB = coreMongoClient.getDB(&quot;verisk_smartcontent&quot;);
    DBCollection collection = coreDB.getCollection(&quot;VERISK_METADATA_COLLECTION&quot;);
    BasicDBObject query = new BasicDBObject(&quot;uri&quot;, &quot;${uniquekey}&quot;);
    result = collection.count(query);</stringProp>
                </JSR223Sampler>
                <hashTree>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">dbCount</stringProp>
                    <stringProp name="RegexExtractor.regex">(.*)</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">asd</stringProp>
                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                  <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                    <stringProp name="BeanShellAssertion.query">long mongoCount=Integer.parseInt(vars.get(&quot;dbCount&quot;));

try{
	if (mongoCount==1){
	Failure=false;
	log.info(&quot;Forms inserted to mongodb&quot;);
	
	
	}
	else{
	Failure=true;
	FailureMessage=&quot;Forms didnt get inserted&quot;;
	log.error(&quot;Bean Shell Assertion is Fail&quot;);
	}
}catch(Exception E){
	Failure=true;
	FailureMessage=&quot;Forms didnt get inserted&quot;;
}</stringProp>
                    <stringProp name="BeanShellAssertion.filename"></stringProp>
                    <stringProp name="BeanShellAssertion.parameters"></stringProp>
                    <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                  </BeanShellAssertion>
                  <hashTree/>
                  <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
                    <stringProp name="ConstantTimer.delay">10000</stringProp>
                  </ConstantTimer>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CRC - Verify if reindexed to SOLR" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
&quot;appId&quot;:&quot;${clientId}&quot;,&#xd;
&quot;clientId&quot;:&quot;${clientId}&quot;,&#xd;
&quot;requestId&quot;:&quot;3r436y 4yyuh46676uy7&quot;,&#xd;
&quot;pageSize&quot;:&quot;1&quot;,&#xd;
&quot;searchOption&quot;:&quot;facsimile&quot;,&#xd;
&quot;searchScope&quot;:&quot;ISOANDCLIENT&quot;,&#xd;
&quot;filterQuery&quot;:&quot;(contentType:\&quot;${Contenttype}\&quot;)&quot;,&#xd;
&quot;uri&quot;:&quot;${uniquekey}&quot;&#xd;
}&#xd;
</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${server}</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">https</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">pcr-rest-api/V4/Search/</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">Content-Type</stringProp>
                        <stringProp name="Header.value">application/json</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="jp@gc - JSON Path Extractor" enabled="true">
                    <stringProp name="VAR">jsonCount</stringProp>
                    <stringProp name="JSONPATH">$.numFound</stringProp>
                    <stringProp name="DEFAULT">NOT FOUND</stringProp>
                    <stringProp name="VARIABLE"></stringProp>
                    <stringProp name="SUBJECT">BODY</stringProp>
                  </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
                  <hashTree/>
                  <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                    <stringProp name="BeanShellAssertion.query">long solrCount=Integer.parseInt(vars.get(&quot;jsonCount&quot;));
long mongoCount=Integer.parseInt(vars.get(&quot;dbCount&quot;));

try{
	if (solrCount==1){
	Failure=false;
	log.info(&quot;Forms reindexed to SOLR&quot;);
	
	
	}
	else{
	Failure=true;
	FailureMessage=&quot;Forms didnt get reindexed&quot;;
	log.error(&quot;Bean Shell Assertion is Fail&quot;);
	}
}catch(Exception E){
	Failure=true;
	FailureMessage=&quot;Forms didnt get reindexed&quot;;
}










</stringProp>
                    <stringProp name="BeanShellAssertion.filename"></stringProp>
                    <stringProp name="BeanShellAssertion.parameters"></stringProp>
                    <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                  </BeanShellAssertion>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="CRC- APPLICABILITY_UPDATE" enabled="true">
                <stringProp name="IfController.condition">&quot;${update}&quot;==&quot;APPLICABILITY_UPDATE&quot;</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
              </IfController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CRC- APPLICABILITY UPDATE" enabled="true">
                  <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs">
                    <collectionProp name="HTTPFileArgs.files">
                      <elementProp name="${Testdatadocumentpath}//${filetobeuploaded}" elementType="HTTPFileArg">
                        <stringProp name="File.path">${Testdatadocumentpath}//${filetobeuploaded}</stringProp>
                        <stringProp name="File.paramname">file</stringProp>
                        <stringProp name="File.mimetype">pdf</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="metadata" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${metadata}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">metadata</stringProp>
                      </elementProp>
                      <elementProp name="request_id" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">067e6162-3b6f-4ae2-a171-2470b63dff01</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">request_id</stringProp>
                      </elementProp>
                      <elementProp name="client_id" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${clientId}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">client_id</stringProp>
                      </elementProp>
                      <elementProp name="contentType" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${Contenttype}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">contentType</stringProp>
                      </elementProp>
                      <elementProp name="filename" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${filename}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">filename</stringProp>
                      </elementProp>
                      <elementProp name="update" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${update}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">update</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${server}</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">https</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/pcr-update-api/V2.1/CreateMessage</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="false">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">Content-Type</stringProp>
                        <stringProp name="Header.value">multipart/form-data</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="49588">202</stringProp>
                      <stringProp name="0"></stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">2</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                  <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                    <boolProp name="resetInterpreter">true</boolProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="script">import org.apache.jmeter.protocol.http.control.Header;

sampler.getHeaderManager().add(new Header(&quot;Content-Type&quot;,&quot;application/json&quot;));



</stringProp>
                  </BeanShellPostProcessor>
                  <hashTree/>
                </hashTree>
                <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="${Contenttype} - Verify if inserted in mongodb" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey"></stringProp>
                  <stringProp name="script">import com.mongodb.*
import com.mongodb.BasicDBObject
import org.apache.jmeter.util.JMeterUtils; 

long result;

    
Properties properties = JMeterUtils.getJMeterProperties();
MongoClient coreMongoClient = properties.get(&quot;coreMongoClient&quot;); 
    DB coreDB = coreMongoClient.getDB(&quot;verisk_smartcontent&quot;);
    DBCollection collection = coreDB.getCollection(&quot;VERISK_METADATA_COLLECTION&quot;);
    BasicDBObject query = new BasicDBObject(&quot;uri&quot;, &quot;${uniquekey}&quot;);
    result = collection.count(query);</stringProp>
                </JSR223Sampler>
                <hashTree>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">dbCount</stringProp>
                    <stringProp name="RegexExtractor.regex">(.*)</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">asd</stringProp>
                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                  <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                    <stringProp name="BeanShellAssertion.query">long mongoCount=Integer.parseInt(vars.get(&quot;dbCount&quot;));

try{
	if (mongoCount==1){
	Failure=false;
	log.info(&quot;Forms inserted to mongodb&quot;);
	
	
	}
	else{
	Failure=true;
	FailureMessage=&quot;Forms didnt get inserted&quot;;
	log.error(&quot;Bean Shell Assertion is Fail&quot;);
	}
}catch(Exception E){
	Failure=true;
	FailureMessage=&quot;Forms didnt get inserted&quot;;
}</stringProp>
                    <stringProp name="BeanShellAssertion.filename"></stringProp>
                    <stringProp name="BeanShellAssertion.parameters"></stringProp>
                    <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                  </BeanShellAssertion>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CRC - Verify if reindexed to SOLR" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
&quot;appId&quot;:&quot;${clientId}&quot;,&#xd;
&quot;clientId&quot;:&quot;${clientId}&quot;,&#xd;
&quot;requestId&quot;:&quot;3r436y 4yyuh46676uy7&quot;,&#xd;
&quot;pageSize&quot;:&quot;1&quot;,&#xd;
&quot;searchOption&quot;:&quot;facsimile&quot;,&#xd;
&quot;searchScope&quot;:&quot;ISOANDCLIENT&quot;,&#xd;
&quot;filterQuery&quot;:&quot;(contentType:\&quot;${Contenttype}\&quot;)&quot;,&#xd;
&quot;uri&quot;:&quot;${uniquekey}&quot;&#xd;
}&#xd;
</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${server}</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">https</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">pcr-rest-api/V4/Search/</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">Content-Type</stringProp>
                        <stringProp name="Header.value">application/json</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
                    <stringProp name="ConstantTimer.delay">12000</stringProp>
                  </ConstantTimer>
                  <hashTree/>
                  <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="jp@gc - JSON Path Extractor" enabled="true">
                    <stringProp name="VAR">jsonCount</stringProp>
                    <stringProp name="JSONPATH">$.numFound</stringProp>
                    <stringProp name="DEFAULT">NOT FOUND</stringProp>
                    <stringProp name="VARIABLE"></stringProp>
                    <stringProp name="SUBJECT">BODY</stringProp>
                  </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
                  <hashTree/>
                  <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                    <stringProp name="BeanShellAssertion.query">long solrCount=Integer.parseInt(vars.get(&quot;jsonCount&quot;));
long mongoCount=Integer.parseInt(vars.get(&quot;dbCount&quot;));

try{
	if (solrCount==2){
	Failure=false;
	log.info(&quot;New Applicability reindexed to SOLR&quot;);
	
	
	}
	else{
	Failure=true;
	FailureMessage=&quot;New Applicability didnt get reindexed to SOLR&quot;;
	log.error(&quot;Bean Shell Assertion is Fail&quot;);
	}
}catch(Exception E){
	Failure=true;
	FailureMessage=&quot;New Applicability didnt get reindexed to SOLR&quot;;
}










</stringProp>
                    <stringProp name="BeanShellAssertion.filename"></stringProp>
                    <stringProp name="BeanShellAssertion.parameters"></stringProp>
                    <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                  </BeanShellAssertion>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller-DOCUMENT_UPDATE " enabled="true">
                <stringProp name="IfController.condition">&quot;${update}&quot;==&quot;DOCUMENT_UPDATE&quot;</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
              </IfController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CRC- UPDATE_DOCUMENT" enabled="true">
                  <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs">
                    <collectionProp name="HTTPFileArgs.files">
                      <elementProp name="${Testdatadocumentpath}//${filetobeuploaded}" elementType="HTTPFileArg">
                        <stringProp name="File.path">${Testdatadocumentpath}//${filetobeuploaded}</stringProp>
                        <stringProp name="File.paramname">file</stringProp>
                        <stringProp name="File.mimetype">pdf</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="metadata" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${metadata}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">metadata</stringProp>
                      </elementProp>
                      <elementProp name="request_id" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">067e6162-3b6f-4ae2-a171-2470b63dff01</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">request_id</stringProp>
                      </elementProp>
                      <elementProp name="client_id" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${clientId}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">client_id</stringProp>
                      </elementProp>
                      <elementProp name="contentType" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${Contenttype}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">contentType</stringProp>
                      </elementProp>
                      <elementProp name="fileName" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${filename}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">fileName</stringProp>
                      </elementProp>
                      <elementProp name="update" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${update}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">update</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${server}</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">https</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/pcr-update-api/V2.1/CreateMessage</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="false">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">Content-Type</stringProp>
                        <stringProp name="Header.value">multipart/form-data</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="49588">202</stringProp>
                      <stringProp name="0"></stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">2</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CRC-  Verify if reindexed to SOLR" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
&quot;appId&quot;:&quot;${clientId}&quot;,&#xd;
&quot;clientId&quot;:&quot;${clientId}&quot;,&#xd;
&quot;requestId&quot;:&quot;3r436y 4yyuh46676uy7&quot;,&#xd;
&quot;pageSize&quot;:&quot;1&quot;,&#xd;
&quot;searchOption&quot;:&quot;facsimile&quot;,&#xd;
&quot;searchScope&quot;:&quot;ISOANDCLIENT&quot;,&#xd;
&quot;filterQuery&quot;:&quot;(contentType:\&quot;${Contenttype}\&quot;)&quot;,&#xd;
&quot;uri&quot;:&quot;${uniquekey}&quot;&#xd;
}&#xd;
</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${server}</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">https</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">pcr-rest-api/V4/Search/</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">Content-Type</stringProp>
                        <stringProp name="Header.value">application/json</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
                    <stringProp name="ConstantTimer.delay">5000</stringProp>
                  </ConstantTimer>
                  <hashTree/>
                  <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="jp@gc - JSON Path Extractor" enabled="true">
                    <stringProp name="VAR">jsonDocId</stringProp>
                    <stringProp name="JSONPATH">$.docs[*].doc_id</stringProp>
                    <stringProp name="DEFAULT">NOT FOUND</stringProp>
                    <stringProp name="VARIABLE"></stringProp>
                    <stringProp name="SUBJECT">BODY</stringProp>
                  </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CRC-  Download document" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{ &#xd;
&quot;clientId&quot; :&quot;VERISK_001&quot;,&#xd;
&quot;requestId&quot;:&quot;b32e9d5f-50f9-4c17-910c-56e3c51aeddb&quot;,&#xd;
&quot;documents&quot;:&#xd;
	[&#xd;
		{ &#xd;
			&quot;docId&quot;:&quot;${jsonDocId_1}&quot;,&#xd;
			&quot;fileType&quot;:&quot;pdf&quot;&#xd;
		&#xd;
		}&#xd;
	]&#xd;
}&#xd;
</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${server}</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">https</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">pcr-rest-api/V2.1/GetDocument/</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">Content-Type</stringProp>
                        <stringProp name="Header.value">application/json</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
                    <stringProp name="ConstantTimer.delay">5000</stringProp>
                  </ConstantTimer>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="49586">200</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">2</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="CRC- DOCUMENT_ATTACHMENT " enabled="true">
                <stringProp name="IfController.condition">&quot;${update}&quot;==&quot;DOCUMENT_ATTACHMENT&quot;</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
              </IfController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CRC-  DOCUMENT_ATTACHMENT" enabled="true">
                  <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs">
                    <collectionProp name="HTTPFileArgs.files">
                      <elementProp name="${Testdatadocumentpath}//${filetobeuploaded}" elementType="HTTPFileArg">
                        <stringProp name="File.path">${Testdatadocumentpath}//${filetobeuploaded}</stringProp>
                        <stringProp name="File.paramname">file</stringProp>
                        <stringProp name="File.mimetype">zip</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="metadata" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${metadata}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">metadata</stringProp>
                      </elementProp>
                      <elementProp name="request_id" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">067e6162-3b6f-4ae2-a171-2470b63dff01</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">request_id</stringProp>
                      </elementProp>
                      <elementProp name="client_id" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${clientId}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">client_id</stringProp>
                      </elementProp>
                      <elementProp name="contentType" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${Contenttype}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">contentType</stringProp>
                      </elementProp>
                      <elementProp name="fileName" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${filename}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">fileName</stringProp>
                      </elementProp>
                      <elementProp name="update" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${update}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">update</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${server}</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">https</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/pcr-update-api/V2.1/CreateMessage</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="false">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">Content-Type</stringProp>
                        <stringProp name="Header.value">multipart/form-data</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="49588">202</stringProp>
                      <stringProp name="0"></stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">2</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CRC-  Verify if reindexed to SOLR" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
&quot;appId&quot;:&quot;${clientId}&quot;,&#xd;
&quot;clientId&quot;:&quot;${clientId}&quot;,&#xd;
&quot;requestId&quot;:&quot;3r436y 4yyuh46676uy7&quot;,&#xd;
&quot;pageSize&quot;:&quot;1&quot;,&#xd;
&quot;searchOption&quot;:&quot;facsimile&quot;,&#xd;
&quot;searchScope&quot;:&quot;ISOANDCLIENT&quot;,&#xd;
&quot;filterQuery&quot;:&quot;(contentType:\&quot;${Contenttype}\&quot;)&quot;,&#xd;
&quot;uri&quot;:&quot;${uniquekey}&quot;&#xd;
}&#xd;
</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${server}</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">https</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">pcr-rest-api/V4/Search/</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">Content-Type</stringProp>
                        <stringProp name="Header.value">application/json</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
                    <stringProp name="ConstantTimer.delay">5000</stringProp>
                  </ConstantTimer>
                  <hashTree/>
                  <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="jp@gc - JSON Path Extractor" enabled="true">
                    <stringProp name="VAR">jsonDocId</stringProp>
                    <stringProp name="JSONPATH">$.docs[*].doc_id</stringProp>
                    <stringProp name="DEFAULT">NOT FOUND</stringProp>
                    <stringProp name="VARIABLE"></stringProp>
                    <stringProp name="SUBJECT">BODY</stringProp>
                  </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CRC- Download attachment" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{ &#xd;
&quot;clientId&quot; :&quot;VERISK_001&quot;,&#xd;
&quot;requestId&quot;:&quot;b32e9d5f-50f9-4c17-910c-56e3c51aeddb&quot;,&#xd;
&quot;documents&quot;:&#xd;
	[&#xd;
		{ &#xd;
			&quot;docId&quot;:&quot;${jsonDocId_1}&quot;,&#xd;
			&quot;fileType&quot;:&quot;zip&quot;&#xd;
		&#xd;
		}&#xd;
	]&#xd;
}&#xd;
</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${server}</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">https</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">pcr-rest-api/V2.1/GetDocument/</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">Content-Type</stringProp>
                        <stringProp name="Header.value">application/json</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
                    <stringProp name="ConstantTimer.delay">5000</stringProp>
                  </ConstantTimer>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="49586">200</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">2</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                </hashTree>
              </hashTree>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller-CLM" enabled="true">
              <stringProp name="IfController.condition">&quot;${Contenttype}&quot;==&quot;CLM&quot;</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
            </IfController>
            <hashTree>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="false">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">import org.apache.jmeter.protocol.http.control.Header;
sampler.getHeaderManager().removeHeaderNamed(&quot;Content-Type&quot;);</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="CLM -  INSERT Operation" enabled="true">
                <stringProp name="IfController.condition">&quot;${update}&quot;==&quot;INSERT&quot;</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
              </IfController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CLM - INSERT" enabled="true">
                  <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs">
                    <collectionProp name="HTTPFileArgs.files">
                      <elementProp name="${Testdatadocumentpath}//${filetobeuploaded}" elementType="HTTPFileArg">
                        <stringProp name="File.path">${Testdatadocumentpath}//${filetobeuploaded}</stringProp>
                        <stringProp name="File.paramname">file</stringProp>
                        <stringProp name="File.mimetype">html</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="metadata" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${metadata}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">metadata</stringProp>
                      </elementProp>
                      <elementProp name="request_id" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">067e6162-3b6f-4ae2-a171-2470b63dff01</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">request_id</stringProp>
                      </elementProp>
                      <elementProp name="client_id" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${clientId}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">client_id</stringProp>
                      </elementProp>
                      <elementProp name="contentType" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${Contenttype}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">contentType</stringProp>
                      </elementProp>
                      <elementProp name="filename" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${filename}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">filename</stringProp>
                      </elementProp>
                      <elementProp name="update" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${update}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">update</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${server}</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">https</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/pcr-update-api/V2.1/CreateMessage</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="49588">202</stringProp>
                      <stringProp name="0"></stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">2</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                </hashTree>
                <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                  <boolProp name="resetInterpreter">true</boolProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="script">import org.apache.jmeter.protocol.http.control.Header;

sampler.getHeaderManager().add(new Header(&quot;Content-Type&quot;,&quot;application/json&quot;));



</stringProp>
                </BeanShellPostProcessor>
                <hashTree/>
                <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="CLM -Verify if inserted in mongodb" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey"></stringProp>
                  <stringProp name="script">import com.mongodb.*
import com.mongodb.BasicDBObject
import org.apache.jmeter.util.JMeterUtils; 

long result;

    
Properties properties = JMeterUtils.getJMeterProperties();
MongoClient coreMongoClient = properties.get(&quot;coreMongoClient&quot;); 
    DB coreDB = coreMongoClient.getDB(&quot;verisk_smartcontent&quot;);
    DBCollection collection = coreDB.getCollection(&quot;VERISK_METADATA_COLLECTION&quot;);
    BasicDBObject query = new BasicDBObject(&quot;uri&quot;, &quot;${uniquekey}&quot;);
    result = collection.count(query);</stringProp>
                </JSR223Sampler>
                <hashTree>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">dbCount</stringProp>
                    <stringProp name="RegexExtractor.regex">(.*)</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">asd</stringProp>
                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                  <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                    <stringProp name="BeanShellAssertion.query">long mongoCount=Integer.parseInt(vars.get(&quot;dbCount&quot;));

try{
	if (mongoCount==1){
	Failure=false;
	log.info(&quot;Forms inserted to mongodb&quot;);
	
	
	}
	else{
	Failure=true;
	FailureMessage=&quot;Forms didnt get inserted&quot;;
	log.error(&quot;Bean Shell Assertion is Fail&quot;);
	}
}catch(Exception E){
	Failure=true;
	FailureMessage=&quot;Forms didnt get inserted&quot;;
}</stringProp>
                    <stringProp name="BeanShellAssertion.filename"></stringProp>
                    <stringProp name="BeanShellAssertion.parameters"></stringProp>
                    <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                  </BeanShellAssertion>
                  <hashTree/>
                  <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
                    <stringProp name="ConstantTimer.delay">10000</stringProp>
                  </ConstantTimer>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CLM -Verify if reindexed to SOLR" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
&quot;appId&quot;:&quot;${clientId}&quot;,&#xd;
&quot;clientId&quot;:&quot;${clientId}&quot;,&#xd;
&quot;requestId&quot;:&quot;3r436y 4yyuh46676uy7&quot;,&#xd;
&quot;pageSize&quot;:&quot;1&quot;,&#xd;
&quot;searchOption&quot;:&quot;facsimile&quot;,&#xd;
&quot;searchScope&quot;:&quot;ISOANDCLIENT&quot;,&#xd;
&quot;filterQuery&quot;:&quot;(contentType:\&quot;${Contenttype}\&quot;)&quot;,&#xd;
&quot;uri&quot;:&quot;${uniquekey}&quot;&#xd;
}&#xd;
</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${server}</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">https</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">pcr-rest-api/V4/Search/</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">Content-Type</stringProp>
                        <stringProp name="Header.value">application/json</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="jp@gc - JSON Path Extractor" enabled="true">
                    <stringProp name="VAR">jsonCount</stringProp>
                    <stringProp name="JSONPATH">$.numFound</stringProp>
                    <stringProp name="DEFAULT">NOT FOUND</stringProp>
                    <stringProp name="VARIABLE"></stringProp>
                    <stringProp name="SUBJECT">BODY</stringProp>
                  </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
                  <hashTree/>
                  <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                    <stringProp name="BeanShellAssertion.query">long solrCount=Integer.parseInt(vars.get(&quot;jsonCount&quot;));
long mongoCount=Integer.parseInt(vars.get(&quot;dbCount&quot;));

try{
	if (solrCount==1){
	Failure=false;
	log.info(&quot;Forms reindexed to SOLR&quot;);
	
	
	}
	else{
	Failure=true;
	FailureMessage=&quot;Forms didnt get reindexed&quot;;
	log.error(&quot;Bean Shell Assertion is Fail&quot;);
	}
}catch(Exception E){
	Failure=true;
	FailureMessage=&quot;Forms didnt get reindexed&quot;;
}










</stringProp>
                    <stringProp name="BeanShellAssertion.filename"></stringProp>
                    <stringProp name="BeanShellAssertion.parameters"></stringProp>
                    <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                  </BeanShellAssertion>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="CLM - APPLICABILITY_UPDATE" enabled="true">
                <stringProp name="IfController.condition">&quot;${update}&quot;==&quot;APPLICABILITY_UPDATE&quot;</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
              </IfController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CLM - APPLICABILITY UPDATE" enabled="true">
                  <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs">
                    <collectionProp name="HTTPFileArgs.files">
                      <elementProp name="${Testdatadocumentpath}//${filetobeuploaded}" elementType="HTTPFileArg">
                        <stringProp name="File.path">${Testdatadocumentpath}//${filetobeuploaded}</stringProp>
                        <stringProp name="File.paramname">file</stringProp>
                        <stringProp name="File.mimetype">html</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="metadata" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${metadata}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">metadata</stringProp>
                      </elementProp>
                      <elementProp name="request_id" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">067e6162-3b6f-4ae2-a171-2470b63dff01</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">request_id</stringProp>
                      </elementProp>
                      <elementProp name="client_id" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${clientId}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">client_id</stringProp>
                      </elementProp>
                      <elementProp name="contentType" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${Contenttype}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">contentType</stringProp>
                      </elementProp>
                      <elementProp name="filename" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${filename}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">filename</stringProp>
                      </elementProp>
                      <elementProp name="update" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${update}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">update</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${server}</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">https</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/pcr-update-api/V2.1/CreateMessage</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="false">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">Content-Type</stringProp>
                        <stringProp name="Header.value">multipart/form-data</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="49588">202</stringProp>
                      <stringProp name="0"></stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">2</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                  <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                    <boolProp name="resetInterpreter">true</boolProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="script">import org.apache.jmeter.protocol.http.control.Header;

sampler.getHeaderManager().add(new Header(&quot;Content-Type&quot;,&quot;application/json&quot;));



</stringProp>
                  </BeanShellPostProcessor>
                  <hashTree/>
                </hashTree>
                <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="${Contenttype} - Verify if inserted in mongodb" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey"></stringProp>
                  <stringProp name="script">import com.mongodb.*
import com.mongodb.BasicDBObject
import org.apache.jmeter.util.JMeterUtils; 

long result;

    
Properties properties = JMeterUtils.getJMeterProperties();
MongoClient coreMongoClient = properties.get(&quot;coreMongoClient&quot;); 
    DB coreDB = coreMongoClient.getDB(&quot;verisk_smartcontent&quot;);
    DBCollection collection = coreDB.getCollection(&quot;VERISK_METADATA_COLLECTION&quot;);
    BasicDBObject query = new BasicDBObject(&quot;uri&quot;, &quot;${uniquekey}&quot;);
    result = collection.count(query);</stringProp>
                </JSR223Sampler>
                <hashTree>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">dbCount</stringProp>
                    <stringProp name="RegexExtractor.regex">(.*)</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">asd</stringProp>
                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                  <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                    <stringProp name="BeanShellAssertion.query">long mongoCount=Integer.parseInt(vars.get(&quot;dbCount&quot;));

try{
	if (mongoCount==1){
	Failure=false;
	log.info(&quot;Forms inserted to mongodb&quot;);
	
	
	}
	else{
	Failure=true;
	FailureMessage=&quot;Forms didnt get inserted&quot;;
	log.error(&quot;Bean Shell Assertion is Fail&quot;);
	}
}catch(Exception E){
	Failure=true;
	FailureMessage=&quot;Forms didnt get inserted&quot;;
}</stringProp>
                    <stringProp name="BeanShellAssertion.filename"></stringProp>
                    <stringProp name="BeanShellAssertion.parameters"></stringProp>
                    <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                  </BeanShellAssertion>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CLM - Verify if reindexed to SOLR" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
&quot;appId&quot;:&quot;${clientId}&quot;,&#xd;
&quot;clientId&quot;:&quot;${clientId}&quot;,&#xd;
&quot;requestId&quot;:&quot;3r436y 4yyuh46676uy7&quot;,&#xd;
&quot;pageSize&quot;:&quot;1&quot;,&#xd;
&quot;searchOption&quot;:&quot;facsimile&quot;,&#xd;
&quot;searchScope&quot;:&quot;ISOANDCLIENT&quot;,&#xd;
&quot;filterQuery&quot;:&quot;(contentType:\&quot;${Contenttype}\&quot;)&quot;,&#xd;
&quot;uri&quot;:&quot;${uniquekey}&quot;&#xd;
}&#xd;
</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${server}</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">https</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">pcr-rest-api/V4/Search/</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">Content-Type</stringProp>
                        <stringProp name="Header.value">application/json</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
                    <stringProp name="ConstantTimer.delay">12000</stringProp>
                  </ConstantTimer>
                  <hashTree/>
                  <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="jp@gc - JSON Path Extractor" enabled="true">
                    <stringProp name="VAR">jsonCount</stringProp>
                    <stringProp name="JSONPATH">$.numFound</stringProp>
                    <stringProp name="DEFAULT">NOT FOUND</stringProp>
                    <stringProp name="VARIABLE"></stringProp>
                    <stringProp name="SUBJECT">BODY</stringProp>
                  </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
                  <hashTree/>
                  <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                    <stringProp name="BeanShellAssertion.query">long solrCount=Integer.parseInt(vars.get(&quot;jsonCount&quot;));
long mongoCount=Integer.parseInt(vars.get(&quot;dbCount&quot;));

try{
	if (solrCount==2){
	Failure=false;
	log.info(&quot;New Applicability reindexed to SOLR&quot;);
	
	
	}
	else{
	Failure=true;
	FailureMessage=&quot;New Applicability didnt get reindexed to SOLR&quot;;
	log.error(&quot;Bean Shell Assertion is Fail&quot;);
	}
}catch(Exception E){
	Failure=true;
	FailureMessage=&quot;New Applicability didnt get reindexed to SOLR&quot;;
}










</stringProp>
                    <stringProp name="BeanShellAssertion.filename"></stringProp>
                    <stringProp name="BeanShellAssertion.parameters"></stringProp>
                    <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                  </BeanShellAssertion>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="CLM - DOCUMENT_UPDATE " enabled="true">
                <stringProp name="IfController.condition">&quot;${update}&quot;==&quot;DOCUMENT_UPDATE&quot;</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
              </IfController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CLM - UPDATE_DOCUMENT" enabled="true">
                  <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs">
                    <collectionProp name="HTTPFileArgs.files">
                      <elementProp name="${Testdatadocumentpath}//${filetobeuploaded}" elementType="HTTPFileArg">
                        <stringProp name="File.path">${Testdatadocumentpath}//${filetobeuploaded}</stringProp>
                        <stringProp name="File.paramname">file</stringProp>
                        <stringProp name="File.mimetype">html</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="metadata" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${metadata}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">metadata</stringProp>
                      </elementProp>
                      <elementProp name="request_id" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">067e6162-3b6f-4ae2-a171-2470b63dff01</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">request_id</stringProp>
                      </elementProp>
                      <elementProp name="client_id" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${clientId}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">client_id</stringProp>
                      </elementProp>
                      <elementProp name="contentType" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${Contenttype}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">contentType</stringProp>
                      </elementProp>
                      <elementProp name="filename" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${filename}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">filename</stringProp>
                      </elementProp>
                      <elementProp name="update" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${update}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">update</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${server}</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">https</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/pcr-update-api/V2.1/CreateMessage</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="false">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">Content-Type</stringProp>
                        <stringProp name="Header.value">multipart/form-data</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="49588">202</stringProp>
                      <stringProp name="0"></stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">2</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CLM - Verify if reindexed to SOLR" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
&quot;appId&quot;:&quot;${clientId}&quot;,&#xd;
&quot;clientId&quot;:&quot;${clientId}&quot;,&#xd;
&quot;requestId&quot;:&quot;3r436y 4yyuh46676uy7&quot;,&#xd;
&quot;pageSize&quot;:&quot;1&quot;,&#xd;
&quot;searchOption&quot;:&quot;facsimile&quot;,&#xd;
&quot;searchScope&quot;:&quot;ISOANDCLIENT&quot;,&#xd;
&quot;filterQuery&quot;:&quot;(contentType:\&quot;${Contenttype}\&quot;)&quot;,&#xd;
&quot;uri&quot;:&quot;${uniquekey}&quot;&#xd;
}&#xd;
</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${server}</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">https</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">pcr-rest-api/V4/Search/</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">Content-Type</stringProp>
                        <stringProp name="Header.value">application/json</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
                    <stringProp name="ConstantTimer.delay">5000</stringProp>
                  </ConstantTimer>
                  <hashTree/>
                  <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="jp@gc - JSON Path Extractor" enabled="true">
                    <stringProp name="VAR">jsonDocId</stringProp>
                    <stringProp name="JSONPATH">$.docs[*].doc_id</stringProp>
                    <stringProp name="DEFAULT">NOT FOUND</stringProp>
                    <stringProp name="VARIABLE"></stringProp>
                    <stringProp name="SUBJECT">BODY</stringProp>
                  </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CLM -- Download document" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{ &#xd;
&quot;clientId&quot; :&quot;VERISK_001&quot;,&#xd;
&quot;requestId&quot;:&quot;b32e9d5f-50f9-4c17-910c-56e3c51aeddb&quot;,&#xd;
&quot;documents&quot;:&#xd;
	[&#xd;
		{ &#xd;
			&quot;docId&quot;:&quot;${jsonDocId_1}&quot;,&#xd;
			&quot;fileType&quot;:&quot;html&quot;&#xd;
		&#xd;
		}&#xd;
	]&#xd;
}&#xd;
</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${server}</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">https</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">pcr-rest-api/V2.1/GetDocument/</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">Content-Type</stringProp>
                        <stringProp name="Header.value">application/json</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
                    <stringProp name="ConstantTimer.delay">5000</stringProp>
                  </ConstantTimer>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="49586">200</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">2</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                </hashTree>
              </hashTree>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller-EMI" enabled="true">
              <stringProp name="IfController.condition">&quot;${Contenttype}&quot;==&quot;EMI&quot;</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
            </IfController>
            <hashTree>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="false">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">import org.apache.jmeter.protocol.http.control.Header;
sampler.getHeaderManager().removeHeaderNamed(&quot;Content-Type&quot;);</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="${Contenttype} - INSERT Operation" enabled="true">
                <stringProp name="IfController.condition">&quot;${update}&quot;==&quot;INSERT&quot;</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
              </IfController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="EMI - INSERT" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="metadata" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${metadata}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">metadata</stringProp>
                      </elementProp>
                      <elementProp name="request_id" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">067e6162-3b6f-4ae2-a171-2470b63dff01</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">request_id</stringProp>
                      </elementProp>
                      <elementProp name="client_id" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${clientId}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">client_id</stringProp>
                      </elementProp>
                      <elementProp name="contentType" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${Contenttype}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">contentType</stringProp>
                      </elementProp>
                      <elementProp name="update" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${update}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">update</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${server}</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">https</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/pcr-update-api/V2.1/CreateMessage</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="49588">202</stringProp>
                      <stringProp name="0"></stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">2</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                </hashTree>
                <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                  <boolProp name="resetInterpreter">true</boolProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="script">import org.apache.jmeter.protocol.http.control.Header;

sampler.getHeaderManager().add(new Header(&quot;Content-Type&quot;,&quot;application/json&quot;));



</stringProp>
                </BeanShellPostProcessor>
                <hashTree/>
                <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="EMI - Verify if inserted in mongodb" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey"></stringProp>
                  <stringProp name="script">import com.mongodb.*
import com.mongodb.BasicDBObject
import org.apache.jmeter.util.JMeterUtils; 

long result;

    
Properties properties = JMeterUtils.getJMeterProperties();
MongoClient coreMongoClient = properties.get(&quot;coreMongoClient&quot;); 
    DB coreDB = coreMongoClient.getDB(&quot;verisk_smartcontent&quot;);
    DBCollection collection = coreDB.getCollection(&quot;VERISK_METADATA_COLLECTION&quot;);
    BasicDBObject query = new BasicDBObject(&quot;uri&quot;, &quot;${uniquekey}&quot;);
    result = collection.count(query);</stringProp>
                </JSR223Sampler>
                <hashTree>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">dbCount</stringProp>
                    <stringProp name="RegexExtractor.regex">(.*)</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">asd</stringProp>
                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                  <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                    <stringProp name="BeanShellAssertion.query">long mongoCount=Integer.parseInt(vars.get(&quot;dbCount&quot;));

try{
	if (mongoCount==1){
	Failure=false;
	log.info(&quot;Forms inserted to mongodb&quot;);
	
	
	}
	else{
	Failure=true;
	FailureMessage=&quot;Forms didnt get inserted&quot;;
	log.error(&quot;Bean Shell Assertion is Fail&quot;);
	}
}catch(Exception E){
	Failure=true;
	FailureMessage=&quot;Forms didnt get inserted&quot;;
}</stringProp>
                    <stringProp name="BeanShellAssertion.filename"></stringProp>
                    <stringProp name="BeanShellAssertion.parameters"></stringProp>
                    <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                  </BeanShellAssertion>
                  <hashTree/>
                  <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
                    <stringProp name="ConstantTimer.delay">10000</stringProp>
                  </ConstantTimer>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="EMI - Verify if reindexed to SOLR" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
&quot;appId&quot;:&quot;${clientId}&quot;,&#xd;
&quot;clientId&quot;:&quot;${clientId}&quot;,&#xd;
&quot;requestId&quot;:&quot;3r436y 4yyuh46676uy7&quot;,&#xd;
&quot;pageSize&quot;:&quot;1&quot;,&#xd;
&quot;searchOption&quot;:&quot;facsimile&quot;,&#xd;
&quot;searchScope&quot;:&quot;ISOANDCLIENT&quot;,&#xd;
&quot;filterQuery&quot;:&quot;(contentType:\&quot;${Contenttype}\&quot;)&quot;,&#xd;
&quot;uri&quot;:&quot;${uniquekey}&quot;&#xd;
}&#xd;
</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${server}</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">https</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">pcr-rest-api/V4/Search/</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">Content-Type</stringProp>
                        <stringProp name="Header.value">application/json</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="jp@gc - JSON Path Extractor" enabled="true">
                    <stringProp name="VAR">jsonCount</stringProp>
                    <stringProp name="JSONPATH">$.numFound</stringProp>
                    <stringProp name="DEFAULT">NOT FOUND</stringProp>
                    <stringProp name="VARIABLE"></stringProp>
                    <stringProp name="SUBJECT">BODY</stringProp>
                  </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
                  <hashTree/>
                  <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                    <stringProp name="BeanShellAssertion.query">long solrCount=Integer.parseInt(vars.get(&quot;jsonCount&quot;));
long mongoCount=Integer.parseInt(vars.get(&quot;dbCount&quot;));

try{
	if (solrCount==1){
	Failure=false;
	log.info(&quot;Forms reindexed to SOLR&quot;);
	
	
	}
	else{
	Failure=true;
	FailureMessage=&quot;Forms didnt get reindexed&quot;;
	log.error(&quot;Bean Shell Assertion is Fail&quot;);
	}
}catch(Exception E){
	Failure=true;
	FailureMessage=&quot;Forms didnt get reindexed&quot;;
}










</stringProp>
                    <stringProp name="BeanShellAssertion.filename"></stringProp>
                    <stringProp name="BeanShellAssertion.parameters"></stringProp>
                    <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                  </BeanShellAssertion>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="EMI - METADATA_ONLY " enabled="true">
                <stringProp name="IfController.condition">&quot;${update}&quot;==&quot;METADATA_ONLY&quot;</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
              </IfController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="EMI - METADATA_ONLY" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="metadata" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${metadata}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">metadata</stringProp>
                      </elementProp>
                      <elementProp name="request_id" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">067e6162-3b6f-4ae2-a171-2470b63dff01</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">request_id</stringProp>
                      </elementProp>
                      <elementProp name="client_id" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${clientId}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">client_id</stringProp>
                      </elementProp>
                      <elementProp name="contentType" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${Contenttype}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">contentType</stringProp>
                      </elementProp>
                      <elementProp name="update" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${update}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">update</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${server}</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">https</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/pcr-update-api/V2.1/CreateMessage</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="false">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">Content-Type</stringProp>
                        <stringProp name="Header.value">multipart/form-data</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="49588">202</stringProp>
                      <stringProp name="0"></stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">2</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="EMI -  Verify if reindexed to SOLR" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
&quot;appId&quot;:&quot;${clientId}&quot;,&#xd;
&quot;clientId&quot;:&quot;${clientId}&quot;,&#xd;
&quot;requestId&quot;:&quot;3r436y 4yyuh46676uy7&quot;,&#xd;
&quot;pageSize&quot;:&quot;1&quot;,&#xd;
&quot;searchOption&quot;:&quot;facsimile&quot;,&#xd;
&quot;searchScope&quot;:&quot;ISOANDCLIENT&quot;,&#xd;
&quot;filterQuery&quot;:&quot;(contentType:\&quot;${Contenttype}\&quot;)&quot;,&#xd;
&quot;uri&quot;:&quot;${uniquekey}&quot;&#xd;
}&#xd;
</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${server}</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">https</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">pcr-rest-api/V4/Search/</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">Content-Type</stringProp>
                        <stringProp name="Header.value">application/json</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
                    <stringProp name="ConstantTimer.delay">12000</stringProp>
                  </ConstantTimer>
                  <hashTree/>
                  <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="jp@gc - JSON Path Extractor" enabled="true">
                    <stringProp name="VAR">jsonauthor</stringProp>
                    <stringProp name="JSONPATH">$.docs[*].author</stringProp>
                    <stringProp name="DEFAULT">NOT FOUND</stringProp>
                    <stringProp name="VARIABLE"></stringProp>
                    <stringProp name="SUBJECT">BODY</stringProp>
                  </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
                  <hashTree/>
                  <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                    <stringProp name="BeanShellAssertion.query">String responsetitle=vars.get(&quot;jsonauthor_1&quot;);

String csvtitle=&quot;${jurisdiction}&quot;;

try{
	if (responsetitle.equals(csvtitle)){
	Failure=false;
	log.info(&quot;Metadata changed&quot;);
	
	
	}
	else{
	Failure=true;
	FailureMessage=&quot;Metadata not updated&quot;;
	log.error(&quot;Bean Shell Assertion is Fail&quot;);
	}
	}catch(Exception E){
	Failure=true;
	FailureMessage=&quot;Metadata not updated&quot;;
}</stringProp>
                    <stringProp name="BeanShellAssertion.filename"></stringProp>
                    <stringProp name="BeanShellAssertion.parameters"></stringProp>
                    <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                  </BeanShellAssertion>
                  <hashTree/>
                </hashTree>
              </hashTree>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller-LSC" enabled="true">
              <stringProp name="IfController.condition">&quot;${Contenttype}&quot;==&quot;LSC&quot;</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
            </IfController>
            <hashTree>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="false">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">import org.apache.jmeter.protocol.http.control.Header;
sampler.getHeaderManager().removeHeaderNamed(&quot;Content-Type&quot;);</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="LSC -  INSERT Operation" enabled="true">
                <stringProp name="IfController.condition">&quot;${update}&quot;==&quot;INSERT&quot;</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
              </IfController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="LSC -  INSERT" enabled="true">
                  <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs">
                    <collectionProp name="HTTPFileArgs.files">
                      <elementProp name="${Testdatadocumentpath}//${filetobeuploaded}" elementType="HTTPFileArg">
                        <stringProp name="File.path">${Testdatadocumentpath}//${filetobeuploaded}</stringProp>
                        <stringProp name="File.paramname">file</stringProp>
                        <stringProp name="File.mimetype">html</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="metadata" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${metadata}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">metadata</stringProp>
                      </elementProp>
                      <elementProp name="request_id" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">067e6162-3b6f-4ae2-a171-2470b63dff01</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">request_id</stringProp>
                      </elementProp>
                      <elementProp name="client_id" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${clientId}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">client_id</stringProp>
                      </elementProp>
                      <elementProp name="contentType" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${Contenttype}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">contentType</stringProp>
                      </elementProp>
                      <elementProp name="fileName" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${filename}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">fileName</stringProp>
                      </elementProp>
                      <elementProp name="update" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${update}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">update</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${server}</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">https</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/pcr-update-api/V2.1/CreateMessage</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="49588">202</stringProp>
                      <stringProp name="0"></stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">2</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                </hashTree>
                <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                  <boolProp name="resetInterpreter">true</boolProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="script">import org.apache.jmeter.protocol.http.control.Header;

sampler.getHeaderManager().add(new Header(&quot;Content-Type&quot;,&quot;application/json&quot;));



</stringProp>
                </BeanShellPostProcessor>
                <hashTree/>
                <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="LSC - - Verify if inserted in mongodb" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey"></stringProp>
                  <stringProp name="script">import com.mongodb.*
import com.mongodb.BasicDBObject
import org.apache.jmeter.util.JMeterUtils; 

long result;

    
Properties properties = JMeterUtils.getJMeterProperties();
MongoClient coreMongoClient = properties.get(&quot;coreMongoClient&quot;); 
    DB coreDB = coreMongoClient.getDB(&quot;verisk_smartcontent&quot;);
    DBCollection collection = coreDB.getCollection(&quot;VERISK_METADATA_COLLECTION&quot;);
    BasicDBObject query = new BasicDBObject(&quot;documentName&quot;, &quot;${uniquekey}&quot;);
    result = collection.count(query);</stringProp>
                </JSR223Sampler>
                <hashTree>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">dbCount</stringProp>
                    <stringProp name="RegexExtractor.regex">(.*)</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">asd</stringProp>
                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                  <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                    <stringProp name="BeanShellAssertion.query">long mongoCount=Integer.parseInt(vars.get(&quot;dbCount&quot;));

try{
	if (mongoCount==1){
	Failure=false;
	log.info(&quot;Forms inserted to mongodb&quot;);
	
	
	}
	else{
	Failure=true;
	FailureMessage=&quot;Forms didnt get inserted&quot;;
	log.error(&quot;Bean Shell Assertion is Fail&quot;);
	}
}catch(Exception E){
	Failure=true;
	FailureMessage=&quot;Forms didnt get inserted&quot;;
}</stringProp>
                    <stringProp name="BeanShellAssertion.filename"></stringProp>
                    <stringProp name="BeanShellAssertion.parameters"></stringProp>
                    <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                  </BeanShellAssertion>
                  <hashTree/>
                  <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
                    <stringProp name="ConstantTimer.delay">15000</stringProp>
                  </ConstantTimer>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="LSC - - Verify if reindexed to SOLR" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
&quot;appId&quot;:&quot;${clientId}&quot;,&#xd;
&quot;clientId&quot;:&quot;${clientId}&quot;,&#xd;
&quot;requestId&quot;:&quot;3r436y 4yyuh46676uy7&quot;,&#xd;
&quot;pageSize&quot;:&quot;1&quot;,&#xd;
&quot;searchOption&quot;:&quot;facsimile&quot;,&#xd;
&quot;searchScope&quot;:&quot;ISOANDCLIENT&quot;,&#xd;
&quot;filterQuery&quot;:&quot;(contentType:\&quot;${Contenttype}\&quot;)&quot;,&#xd;
&quot;documentName&quot;:&quot;${uniquekey}&quot;&#xd;
}&#xd;
</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${server}</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">https</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">pcr-rest-api/V4/Search/</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">Content-Type</stringProp>
                        <stringProp name="Header.value">application/json</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="jp@gc - JSON Path Extractor" enabled="true">
                    <stringProp name="VAR">jsonCount</stringProp>
                    <stringProp name="JSONPATH">$.numFound</stringProp>
                    <stringProp name="DEFAULT">NOT FOUND</stringProp>
                    <stringProp name="VARIABLE"></stringProp>
                    <stringProp name="SUBJECT">BODY</stringProp>
                  </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
                  <hashTree/>
                  <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                    <stringProp name="BeanShellAssertion.query">long solrCount=Integer.parseInt(vars.get(&quot;jsonCount&quot;));
long mongoCount=Integer.parseInt(vars.get(&quot;dbCount&quot;));

try{
	if (solrCount&gt;1){
	Failure=false;
	log.info(&quot;Forms reindexed to SOLR&quot;);
	
	
	}
	else{
	Failure=true;
	FailureMessage=&quot;Forms didnt get reindexed&quot;;
	log.error(&quot;Bean Shell Assertion is Fail&quot;);
	}
}catch(Exception E){
	Failure=true;
	FailureMessage=&quot;Forms didnt get reindexed&quot;;
}










</stringProp>
                    <stringProp name="BeanShellAssertion.filename"></stringProp>
                    <stringProp name="BeanShellAssertion.parameters"></stringProp>
                    <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                  </BeanShellAssertion>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="LSC - METADATA_ONLY " enabled="true">
                <stringProp name="IfController.condition">&quot;${update}&quot;==&quot;METADATA_ONLY&quot;</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
              </IfController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="LSC - METADATA-ONLY" enabled="true">
                  <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs">
                    <collectionProp name="HTTPFileArgs.files">
                      <elementProp name="${Testdatadocumentpath}//${filetobeuploaded}" elementType="HTTPFileArg">
                        <stringProp name="File.path">${Testdatadocumentpath}//${filetobeuploaded}</stringProp>
                        <stringProp name="File.paramname">file</stringProp>
                        <stringProp name="File.mimetype">docx</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="metadata" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${metadata}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">metadata</stringProp>
                      </elementProp>
                      <elementProp name="request_id" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">067e6162-3b6f-4ae2-a171-2470b63dff01</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">request_id</stringProp>
                      </elementProp>
                      <elementProp name="client_id" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${clientId}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">client_id</stringProp>
                      </elementProp>
                      <elementProp name="contentType" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${Contenttype}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">contentType</stringProp>
                      </elementProp>
                      <elementProp name="filename" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${filename}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">filename</stringProp>
                      </elementProp>
                      <elementProp name="update" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${update}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">update</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${server}</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">https</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/pcr-update-api/V2.1/CreateMessage</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="false">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">Content-Type</stringProp>
                        <stringProp name="Header.value">multipart/form-data</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="49588">202</stringProp>
                      <stringProp name="0"></stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">2</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="LSC - Verify if reindexed to SOLR" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
&quot;appId&quot;:&quot;${clientId}&quot;,&#xd;
&quot;clientId&quot;:&quot;${clientId}&quot;,&#xd;
&quot;requestId&quot;:&quot;3r436y 4yyuh46676uy7&quot;,&#xd;
&quot;pageSize&quot;:&quot;1&quot;,&#xd;
&quot;searchOption&quot;:&quot;facsimile&quot;,&#xd;
&quot;searchScope&quot;:&quot;ISOANDCLIENT&quot;,&#xd;
&quot;filterQuery&quot;:&quot;(contentType:\&quot;${Contenttype}\&quot;)&quot;,&#xd;
&quot;documentName&quot;:&quot;${uniquekey}&quot;&#xd;
}&#xd;
</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${server}</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">https</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">pcr-rest-api/V4/Search/</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">Content-Type</stringProp>
                        <stringProp name="Header.value">application/json</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
                    <stringProp name="ConstantTimer.delay">12000</stringProp>
                  </ConstantTimer>
                  <hashTree/>
                  <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="jp@gc - JSON Path Extractor" enabled="true">
                    <stringProp name="VAR">jsonYear</stringProp>
                    <stringProp name="JSONPATH">$.docs[*].Year</stringProp>
                    <stringProp name="DEFAULT">NOT FOUND</stringProp>
                    <stringProp name="VARIABLE"></stringProp>
                    <stringProp name="SUBJECT">BODY</stringProp>
                  </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
                  <hashTree/>
                  <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                    <stringProp name="BeanShellAssertion.query">String responseYear=vars.get(&quot;jsonYear_1&quot;);

String csvYear=&quot;${jurisdiction}&quot;;

try{
	if (responseYear.equals(csvYear)){
	Failure=false;
	log.info(&quot;Metadata changed&quot;);
	
	
	}
	else{
	Failure=true;
	FailureMessage=&quot;Metadata not updated&quot;;
	log.error(&quot;Bean Shell Assertion is Fail&quot;);
	}
	}catch(Exception E){
	Failure=true;
	FailureMessage=&quot;Metadata not updated&quot;;
}</stringProp>
                    <stringProp name="BeanShellAssertion.filename"></stringProp>
                    <stringProp name="BeanShellAssertion.parameters"></stringProp>
                    <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                  </BeanShellAssertion>
                  <hashTree/>
                </hashTree>
              </hashTree>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller-PRM" enabled="true">
              <stringProp name="IfController.condition">&quot;${Contenttype}&quot;==&quot;PRM&quot;</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
            </IfController>
            <hashTree>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="false">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">import org.apache.jmeter.protocol.http.control.Header;
sampler.getHeaderManager().removeHeaderNamed(&quot;Content-Type&quot;);</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="${Contenttype} - INSERT Operation" enabled="true">
                <stringProp name="IfController.condition">&quot;${update}&quot;==&quot;INSERT&quot;</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
              </IfController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PRM - INSERT" enabled="true">
                  <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs">
                    <collectionProp name="HTTPFileArgs.files">
                      <elementProp name="${Testdatadocumentpath}//${filetobeuploaded}" elementType="HTTPFileArg">
                        <stringProp name="File.path">${Testdatadocumentpath}//${filetobeuploaded}</stringProp>
                        <stringProp name="File.paramname">file</stringProp>
                        <stringProp name="File.mimetype">html</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="metadata" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${metadata}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">metadata</stringProp>
                      </elementProp>
                      <elementProp name="request_id" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">067e6162-3b6f-4ae2-a171-2470b63dff01</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">request_id</stringProp>
                      </elementProp>
                      <elementProp name="client_id" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${clientId}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">client_id</stringProp>
                      </elementProp>
                      <elementProp name="contentType" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${Contenttype}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">contentType</stringProp>
                      </elementProp>
                      <elementProp name="fileName" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${filename}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">fileName</stringProp>
                      </elementProp>
                      <elementProp name="update" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${update}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">update</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${server}</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">https</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/pcr-update-api/V2.1/CreateMessage</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="49588">202</stringProp>
                      <stringProp name="0"></stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">2</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                </hashTree>
                <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                  <boolProp name="resetInterpreter">true</boolProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="script">import org.apache.jmeter.protocol.http.control.Header;

sampler.getHeaderManager().add(new Header(&quot;Content-Type&quot;,&quot;application/json&quot;));



</stringProp>
                </BeanShellPostProcessor>
                <hashTree/>
                <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="PRM -  Verify if inserted in mongodb" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey"></stringProp>
                  <stringProp name="script">import com.mongodb.*
import com.mongodb.BasicDBObject
import org.apache.jmeter.util.JMeterUtils; 

long result;

    
Properties properties = JMeterUtils.getJMeterProperties();
MongoClient coreMongoClient = properties.get(&quot;coreMongoClient&quot;); 
    DB coreDB = coreMongoClient.getDB(&quot;verisk_smartcontent&quot;);
    DBCollection collection = coreDB.getCollection(&quot;VERISK_METADATA_COLLECTION&quot;);
    BasicDBObject query = new BasicDBObject(&quot;documentName&quot;, &quot;${uniquekey}&quot;);
    result = collection.count(query);</stringProp>
                </JSR223Sampler>
                <hashTree>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">dbCount</stringProp>
                    <stringProp name="RegexExtractor.regex">(.*)</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">asd</stringProp>
                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                  <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                    <stringProp name="BeanShellAssertion.query">long mongoCount=Integer.parseInt(vars.get(&quot;dbCount&quot;));

try{
	if (mongoCount==1){
	Failure=false;
	log.info(&quot;Forms inserted to mongodb&quot;);
	
	
	}
	else{
	Failure=true;
	FailureMessage=&quot;Forms didnt get inserted&quot;;
	log.error(&quot;Bean Shell Assertion is Fail&quot;);
	}
}catch(Exception E){
	Failure=true;
	FailureMessage=&quot;Forms didnt get inserted&quot;;
}</stringProp>
                    <stringProp name="BeanShellAssertion.filename"></stringProp>
                    <stringProp name="BeanShellAssertion.parameters"></stringProp>
                    <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                  </BeanShellAssertion>
                  <hashTree/>
                  <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
                    <stringProp name="ConstantTimer.delay">15000</stringProp>
                  </ConstantTimer>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PRM -  Verify if reindexed to SOLR" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
&quot;appId&quot;:&quot;${clientId}&quot;,&#xd;
&quot;clientId&quot;:&quot;${clientId}&quot;,&#xd;
&quot;requestId&quot;:&quot;3r436y 4yyuh46676uy7&quot;,&#xd;
&quot;pageSize&quot;:&quot;1&quot;,&#xd;
&quot;searchOption&quot;:&quot;facsimile&quot;,&#xd;
&quot;searchScope&quot;:&quot;ISOANDCLIENT&quot;,&#xd;
&quot;filterQuery&quot;:&quot;(contentType:\&quot;${Contenttype}\&quot;)&quot;,&#xd;
&quot;documentName&quot;:&quot;${uniquekey}&quot;&#xd;
}&#xd;
</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${server}</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">https</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">pcr-rest-api/V4/Search/</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">Content-Type</stringProp>
                        <stringProp name="Header.value">application/json</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="jp@gc - JSON Path Extractor" enabled="true">
                    <stringProp name="VAR">jsonCount</stringProp>
                    <stringProp name="JSONPATH">$.numFound</stringProp>
                    <stringProp name="DEFAULT">NOT FOUND</stringProp>
                    <stringProp name="VARIABLE"></stringProp>
                    <stringProp name="SUBJECT">BODY</stringProp>
                  </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
                  <hashTree/>
                  <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                    <stringProp name="BeanShellAssertion.query">long solrCount=Integer.parseInt(vars.get(&quot;jsonCount&quot;));
long mongoCount=Integer.parseInt(vars.get(&quot;dbCount&quot;));

try{
	if (solrCount&gt;1){
	Failure=false;
	log.info(&quot;Forms reindexed to SOLR&quot;);
	
	
	}
	else{
	Failure=true;
	FailureMessage=&quot;Forms didnt get reindexed&quot;;
	log.error(&quot;Bean Shell Assertion is Fail&quot;);
	}
}catch(Exception E){
	Failure=true;
	FailureMessage=&quot;Forms didnt get reindexed&quot;;
}










</stringProp>
                    <stringProp name="BeanShellAssertion.filename"></stringProp>
                    <stringProp name="BeanShellAssertion.parameters"></stringProp>
                    <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                  </BeanShellAssertion>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller-METADATA_ONLY " enabled="true">
                <stringProp name="IfController.condition">&quot;${update}&quot;==&quot;METADATA_ONLY&quot;</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
              </IfController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${Contenttype} - INSERT " enabled="true">
                  <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs">
                    <collectionProp name="HTTPFileArgs.files">
                      <elementProp name="${Testdatadocumentpath}//${filetobeuploaded}" elementType="HTTPFileArg">
                        <stringProp name="File.path">${Testdatadocumentpath}//${filetobeuploaded}</stringProp>
                        <stringProp name="File.paramname">file</stringProp>
                        <stringProp name="File.mimetype">docx</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="metadata" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${metadata}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">metadata</stringProp>
                      </elementProp>
                      <elementProp name="request_id" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">067e6162-3b6f-4ae2-a171-2470b63dff01</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">request_id</stringProp>
                      </elementProp>
                      <elementProp name="client_id" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${clientId}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">client_id</stringProp>
                      </elementProp>
                      <elementProp name="contentType" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${Contenttype}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">contentType</stringProp>
                      </elementProp>
                      <elementProp name="filename" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${filename}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">filename</stringProp>
                      </elementProp>
                      <elementProp name="update" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${update}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">update</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${server}</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">https</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/pcr-update-api/V2.1/CreateMessage</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="false">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">Content-Type</stringProp>
                        <stringProp name="Header.value">multipart/form-data</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="49588">202</stringProp>
                      <stringProp name="0"></stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">2</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${Contenttype} - Verify if reindexed to SOLR" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
&quot;appId&quot;:&quot;${clientId}&quot;,&#xd;
&quot;clientId&quot;:&quot;${clientId}&quot;,&#xd;
&quot;requestId&quot;:&quot;3r436y 4yyuh46676uy7&quot;,&#xd;
&quot;pageSize&quot;:&quot;1&quot;,&#xd;
&quot;searchOption&quot;:&quot;facsimile&quot;,&#xd;
&quot;searchScope&quot;:&quot;ISOANDCLIENT&quot;,&#xd;
&quot;filterQuery&quot;:&quot;(contentType:\&quot;${Contenttype}\&quot;)&quot;,&#xd;
&quot;documentName&quot;:&quot;${uniquekey}&quot;&#xd;
}&#xd;
</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${server}</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">https</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">pcr-rest-api/V4/Search/</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">Content-Type</stringProp>
                        <stringProp name="Header.value">application/json</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
                    <stringProp name="ConstantTimer.delay">12000</stringProp>
                  </ConstantTimer>
                  <hashTree/>
                  <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="jp@gc - JSON Path Extractor" enabled="true">
                    <stringProp name="VAR">jsonYear</stringProp>
                    <stringProp name="JSONPATH">$.docs[*].Year</stringProp>
                    <stringProp name="DEFAULT">NOT FOUND</stringProp>
                    <stringProp name="VARIABLE"></stringProp>
                    <stringProp name="SUBJECT">BODY</stringProp>
                  </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
                  <hashTree/>
                  <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                    <stringProp name="BeanShellAssertion.query">String responseYear=vars.get(&quot;jsonYear_1&quot;);

String csvYear=&quot;${jurisdiction}&quot;;

try{
	if (responseYear.equals(csvYear)){
	Failure=false;
	log.info(&quot;Metadata changed&quot;);
	
	
	}
	else{
	Failure=true;
	FailureMessage=&quot;Metadata not updated&quot;;
	log.error(&quot;Bean Shell Assertion is Fail&quot;);
	}
	}catch(Exception E){
	Failure=true;
	FailureMessage=&quot;Metadata not updated&quot;;
}</stringProp>
                    <stringProp name="BeanShellAssertion.filename"></stringProp>
                    <stringProp name="BeanShellAssertion.parameters"></stringProp>
                    <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                  </BeanShellAssertion>
                  <hashTree/>
                </hashTree>
              </hashTree>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller-RUL" enabled="true">
              <stringProp name="IfController.condition">&quot;${Contenttype}&quot;==&quot;RUL&quot;</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
            </IfController>
            <hashTree>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="false">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">import org.apache.jmeter.protocol.http.control.Header;
sampler.getHeaderManager().removeHeaderNamed(&quot;Content-Type&quot;);</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="RUL -  INSERT Operation" enabled="true">
                <stringProp name="IfController.condition">&quot;${update}&quot;==&quot;INSERT&quot;</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
              </IfController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${Contenttype} - INSERT" enabled="true">
                  <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs">
                    <collectionProp name="HTTPFileArgs.files">
                      <elementProp name="${Testdatadocumentpath}//${filetobeuploaded}" elementType="HTTPFileArg">
                        <stringProp name="File.path">${Testdatadocumentpath}//${filetobeuploaded}</stringProp>
                        <stringProp name="File.paramname">file</stringProp>
                        <stringProp name="File.mimetype">html</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="metadata" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${metadata}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">metadata</stringProp>
                      </elementProp>
                      <elementProp name="request_id" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">067e6162-3b6f-4ae2-a171-2470b63dff01</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">request_id</stringProp>
                      </elementProp>
                      <elementProp name="client_id" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${clientId}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">client_id</stringProp>
                      </elementProp>
                      <elementProp name="contentType" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${Contenttype}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">contentType</stringProp>
                      </elementProp>
                      <elementProp name="fileName" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${filename}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">fileName</stringProp>
                      </elementProp>
                      <elementProp name="update" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${update}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">update</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${server}</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">https</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/pcr-update-api/V2.1/CreateMessage</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="49588">202</stringProp>
                      <stringProp name="0"></stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">2</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                </hashTree>
                <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                  <boolProp name="resetInterpreter">true</boolProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="script">import org.apache.jmeter.protocol.http.control.Header;

sampler.getHeaderManager().add(new Header(&quot;Content-Type&quot;,&quot;application/json&quot;));



</stringProp>
                </BeanShellPostProcessor>
                <hashTree/>
                <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="RUL -  Verify if inserted in mongodb" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey"></stringProp>
                  <stringProp name="script">import com.mongodb.*
import com.mongodb.BasicDBObject
import org.apache.jmeter.util.JMeterUtils; 

long result;

    
Properties properties = JMeterUtils.getJMeterProperties();
MongoClient coreMongoClient = properties.get(&quot;coreMongoClient&quot;); 
    DB coreDB = coreMongoClient.getDB(&quot;verisk_smartcontent&quot;);
    DBCollection collection = coreDB.getCollection(&quot;VERISK_METADATA_COLLECTION&quot;);
    BasicDBObject query = new BasicDBObject(&quot;documentName&quot;, &quot;${uniquekey}&quot;);
    result = collection.count(query);</stringProp>
                </JSR223Sampler>
                <hashTree>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">dbCount</stringProp>
                    <stringProp name="RegexExtractor.regex">(.*)</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">asd</stringProp>
                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                  <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                    <stringProp name="BeanShellAssertion.query">long mongoCount=Integer.parseInt(vars.get(&quot;dbCount&quot;));

try{
	if (mongoCount==1){
	Failure=false;
	log.info(&quot;Forms inserted to mongodb&quot;);
	
	
	}
	else{
	Failure=true;
	FailureMessage=&quot;Forms didnt get inserted&quot;;
	log.error(&quot;Bean Shell Assertion is Fail&quot;);
	}
}catch(Exception E){
	Failure=true;
	FailureMessage=&quot;Forms didnt get inserted&quot;;
}</stringProp>
                    <stringProp name="BeanShellAssertion.filename"></stringProp>
                    <stringProp name="BeanShellAssertion.parameters"></stringProp>
                    <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                  </BeanShellAssertion>
                  <hashTree/>
                  <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
                    <stringProp name="ConstantTimer.delay">15000</stringProp>
                  </ConstantTimer>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="RUL - Verify if reindexed to SOLR" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
&quot;appId&quot;:&quot;${clientId}&quot;,&#xd;
&quot;clientId&quot;:&quot;${clientId}&quot;,&#xd;
&quot;requestId&quot;:&quot;3r436y 4yyuh46676uy7&quot;,&#xd;
&quot;pageSize&quot;:&quot;1&quot;,&#xd;
&quot;searchOption&quot;:&quot;facsimile&quot;,&#xd;
&quot;searchScope&quot;:&quot;ISOANDCLIENT&quot;,&#xd;
&quot;filterQuery&quot;:&quot;(contentType:\&quot;${Contenttype}\&quot;)&quot;,&#xd;
&quot;documentName&quot;:&quot;${uniquekey}&quot;&#xd;
}&#xd;
</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${server}</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">https</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">pcr-rest-api/V4/Search/</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">Content-Type</stringProp>
                        <stringProp name="Header.value">application/json</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="jp@gc - JSON Path Extractor" enabled="true">
                    <stringProp name="VAR">jsonCount</stringProp>
                    <stringProp name="JSONPATH">$.numFound</stringProp>
                    <stringProp name="DEFAULT">NOT FOUND</stringProp>
                    <stringProp name="VARIABLE"></stringProp>
                    <stringProp name="SUBJECT">BODY</stringProp>
                  </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
                  <hashTree/>
                  <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                    <stringProp name="BeanShellAssertion.query">long solrCount=Integer.parseInt(vars.get(&quot;jsonCount&quot;));
long mongoCount=Integer.parseInt(vars.get(&quot;dbCount&quot;));

try{
	if (solrCount&gt;=1){
	Failure=false;
	log.info(&quot;Forms reindexed to SOLR&quot;);
	
	
	}
	else{
	Failure=true;
	FailureMessage=&quot;Forms didnt get reindexed&quot;;
	log.error(&quot;Bean Shell Assertion is Fail&quot;);
	}
}catch(Exception E){
	Failure=true;
	FailureMessage=&quot;Forms didnt get reindexed&quot;;
}










</stringProp>
                    <stringProp name="BeanShellAssertion.filename"></stringProp>
                    <stringProp name="BeanShellAssertion.parameters"></stringProp>
                    <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                  </BeanShellAssertion>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller-METADATA_ONLY " enabled="true">
                <stringProp name="IfController.condition">&quot;${update}&quot;==&quot;METADATA_ONLY&quot;</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
              </IfController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="RUL- METADATA_ONLY" enabled="true">
                  <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs">
                    <collectionProp name="HTTPFileArgs.files">
                      <elementProp name="${Testdatadocumentpath}//${filetobeuploaded}" elementType="HTTPFileArg">
                        <stringProp name="File.path">${Testdatadocumentpath}//${filetobeuploaded}</stringProp>
                        <stringProp name="File.paramname">file</stringProp>
                        <stringProp name="File.mimetype">docx</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="metadata" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${metadata}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">metadata</stringProp>
                      </elementProp>
                      <elementProp name="request_id" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">067e6162-3b6f-4ae2-a171-2470b63dff01</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">request_id</stringProp>
                      </elementProp>
                      <elementProp name="client_id" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${clientId}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">client_id</stringProp>
                      </elementProp>
                      <elementProp name="contentType" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${Contenttype}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">contentType</stringProp>
                      </elementProp>
                      <elementProp name="filename" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${filename}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">filename</stringProp>
                      </elementProp>
                      <elementProp name="update" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${update}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">update</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${server}</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">https</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/pcr-update-api/V2.1/CreateMessage</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="false">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">Content-Type</stringProp>
                        <stringProp name="Header.value">multipart/form-data</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="49588">202</stringProp>
                      <stringProp name="0"></stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">2</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="RUL - Verify if reindexed to SOLR" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
&quot;appId&quot;:&quot;${clientId}&quot;,&#xd;
&quot;clientId&quot;:&quot;${clientId}&quot;,&#xd;
&quot;requestId&quot;:&quot;3r436y 4yyuh46676uy7&quot;,&#xd;
&quot;pageSize&quot;:&quot;1&quot;,&#xd;
&quot;searchOption&quot;:&quot;facsimile&quot;,&#xd;
&quot;searchScope&quot;:&quot;ISOANDCLIENT&quot;,&#xd;
&quot;filterQuery&quot;:&quot;(contentType:\&quot;${Contenttype}\&quot;)&quot;,&#xd;
&quot;documentName&quot;:&quot;${uniquekey}&quot;&#xd;
}&#xd;
</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${server}</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">https</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">pcr-rest-api/V4/Search/</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">Content-Type</stringProp>
                        <stringProp name="Header.value">application/json</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
                    <stringProp name="ConstantTimer.delay">12000</stringProp>
                  </ConstantTimer>
                  <hashTree/>
                  <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="jp@gc - JSON Path Extractor" enabled="true">
                    <stringProp name="VAR">jsonYear</stringProp>
                    <stringProp name="JSONPATH">$.docs[*].Year</stringProp>
                    <stringProp name="DEFAULT">NOT FOUND</stringProp>
                    <stringProp name="VARIABLE"></stringProp>
                    <stringProp name="SUBJECT">BODY</stringProp>
                  </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
                  <hashTree/>
                  <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                    <stringProp name="BeanShellAssertion.query">String responseYear=vars.get(&quot;jsonYear_1&quot;);

String csvYear=&quot;${jurisdiction}&quot;;

try{
	if (responseYear.equals(csvYear)){
	Failure=false;
	log.info(&quot;Metadata changed&quot;);
	
	
	}
	else{
	Failure=true;
	FailureMessage=&quot;Metadata not updated&quot;;
	log.error(&quot;Bean Shell Assertion is Fail&quot;);
	}
	}catch(Exception E){
	Failure=true;
	FailureMessage=&quot;Metadata not updated&quot;;
}</stringProp>
                    <stringProp name="BeanShellAssertion.filename"></stringProp>
                    <stringProp name="BeanShellAssertion.parameters"></stringProp>
                    <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                  </BeanShellAssertion>
                  <hashTree/>
                </hashTree>
              </hashTree>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller-LMN" enabled="true">
              <stringProp name="IfController.condition">&quot;${Contenttype}&quot;==&quot;LMN&quot;</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
            </IfController>
            <hashTree>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="false">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">import org.apache.jmeter.protocol.http.control.Header;
sampler.getHeaderManager().removeHeaderNamed(&quot;Content-Type&quot;);</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="LMN - INSERT Operation" enabled="true">
                <stringProp name="IfController.condition">&quot;${update}&quot;==&quot;INSERT&quot;</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
              </IfController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${Contenttype} - INSERT" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="metadata" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${metadata}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">metadata</stringProp>
                      </elementProp>
                      <elementProp name="request_id" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">067e6162-3b6f-4ae2-a171-2470b63dff01</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">request_id</stringProp>
                      </elementProp>
                      <elementProp name="client_id" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${clientId}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">client_id</stringProp>
                      </elementProp>
                      <elementProp name="contentType" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${Contenttype}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">contentType</stringProp>
                      </elementProp>
                      <elementProp name="update" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${update}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">update</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${server}</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">https</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/pcr-update-api/V2.1/CreateMessage</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="49588">202</stringProp>
                      <stringProp name="0"></stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">2</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                </hashTree>
                <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                  <boolProp name="resetInterpreter">true</boolProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="script">import org.apache.jmeter.protocol.http.control.Header;

sampler.getHeaderManager().add(new Header(&quot;Content-Type&quot;,&quot;application/json&quot;));



</stringProp>
                </BeanShellPostProcessor>
                <hashTree/>
                <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="${Contenttype} - Verify if inserted in mongodb" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey"></stringProp>
                  <stringProp name="script">import com.mongodb.*
import com.mongodb.BasicDBObject
import org.apache.jmeter.util.JMeterUtils; 

long result;

    
Properties properties = JMeterUtils.getJMeterProperties();
MongoClient coreMongoClient = properties.get(&quot;coreMongoClient&quot;); 
    DB coreDB = coreMongoClient.getDB(&quot;verisk_smartcontent&quot;);
    DBCollection collection = coreDB.getCollection(&quot;VERISK_METADATA_COLLECTION&quot;);
    BasicDBObject query = new BasicDBObject(&quot;uri&quot;, &quot;${uniquekey}&quot;);
    result = collection.count(query);</stringProp>
                </JSR223Sampler>
                <hashTree>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">dbCount</stringProp>
                    <stringProp name="RegexExtractor.regex">(.*)</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">asd</stringProp>
                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                  <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                    <stringProp name="BeanShellAssertion.query">long mongoCount=Integer.parseInt(vars.get(&quot;dbCount&quot;));

try{
	if (mongoCount==1){
	Failure=false;
	log.info(&quot;Forms inserted to mongodb&quot;);
	
	
	}
	else{
	Failure=true;
	FailureMessage=&quot;Forms didnt get inserted&quot;;
	log.error(&quot;Bean Shell Assertion is Fail&quot;);
	}
}catch(Exception E){
	Failure=true;
	FailureMessage=&quot;Forms didnt get inserted&quot;;
}</stringProp>
                    <stringProp name="BeanShellAssertion.filename"></stringProp>
                    <stringProp name="BeanShellAssertion.parameters"></stringProp>
                    <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                  </BeanShellAssertion>
                  <hashTree/>
                  <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
                    <stringProp name="ConstantTimer.delay">10000</stringProp>
                  </ConstantTimer>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${Contenttype} - Verify if reindexed to SOLR" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
&quot;appId&quot;:&quot;${clientId}&quot;,&#xd;
&quot;clientId&quot;:&quot;${clientId}&quot;,&#xd;
&quot;requestId&quot;:&quot;3r436y 4yyuh46676uy7&quot;,&#xd;
&quot;pageSize&quot;:&quot;1&quot;,&#xd;
&quot;searchOption&quot;:&quot;facsimile&quot;,&#xd;
&quot;searchScope&quot;:&quot;ISOANDCLIENT&quot;,&#xd;
&quot;filterQuery&quot;:&quot;(contentType:\&quot;${Contenttype}\&quot;)&quot;,&#xd;
&quot;uri&quot;:&quot;${uniquekey}&quot;&#xd;
}&#xd;
</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${server}</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">https</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">pcr-rest-api/V4/Search/</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">Content-Type</stringProp>
                        <stringProp name="Header.value">application/json</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="jp@gc - JSON Path Extractor" enabled="true">
                    <stringProp name="VAR">jsonCount</stringProp>
                    <stringProp name="JSONPATH">$.numFound</stringProp>
                    <stringProp name="DEFAULT">NOT FOUND</stringProp>
                    <stringProp name="VARIABLE"></stringProp>
                    <stringProp name="SUBJECT">BODY</stringProp>
                  </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
                  <hashTree/>
                  <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                    <stringProp name="BeanShellAssertion.query">long solrCount=Integer.parseInt(vars.get(&quot;jsonCount&quot;));
long mongoCount=Integer.parseInt(vars.get(&quot;dbCount&quot;));

try{
	if (solrCount==1){
	Failure=false;
	log.info(&quot;Records reindexed to SOLR&quot;);
	
	
	}
	else{
	Failure=true;
	FailureMessage=&quot;Record didnt get reindexed&quot;;
	log.error(&quot;Bean Shell Assertion is Fail&quot;);
	}
}catch(Exception E){
	Failure=true;
	FailureMessage=&quot;Record didnt get reindexed&quot;;
}










</stringProp>
                    <stringProp name="BeanShellAssertion.filename"></stringProp>
                    <stringProp name="BeanShellAssertion.parameters"></stringProp>
                    <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                  </BeanShellAssertion>
                  <hashTree/>
                </hashTree>
              </hashTree>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller-MLC" enabled="true">
              <stringProp name="IfController.condition">&quot;${Contenttype}&quot;==&quot;MLC&quot;</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
            </IfController>
            <hashTree>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="false">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">import org.apache.jmeter.protocol.http.control.Header;
sampler.getHeaderManager().removeHeaderNamed(&quot;Content-Type&quot;);</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="MLC - INSERT Operation" enabled="true">
                <stringProp name="IfController.condition">&quot;${update}&quot;==&quot;INSERT&quot;</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
              </IfController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="MLC - INSERT" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="metadata" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${metadata}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">metadata</stringProp>
                      </elementProp>
                      <elementProp name="request_id" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">067e6162-3b6f-4ae2-a171-2470b63dff01</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">request_id</stringProp>
                      </elementProp>
                      <elementProp name="client_id" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${clientId}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">client_id</stringProp>
                      </elementProp>
                      <elementProp name="contentType" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${Contenttype}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">contentType</stringProp>
                      </elementProp>
                      <elementProp name="update" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${update}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">update</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${server}</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">https</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/pcr-update-api/V2.1/CreateMessage</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="49588">202</stringProp>
                      <stringProp name="0"></stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">2</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                </hashTree>
                <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                  <boolProp name="resetInterpreter">true</boolProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="script">import org.apache.jmeter.protocol.http.control.Header;

sampler.getHeaderManager().add(new Header(&quot;Content-Type&quot;,&quot;application/json&quot;));



</stringProp>
                </BeanShellPostProcessor>
                <hashTree/>
                <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="MLC - Verify if inserted in mongodb" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey"></stringProp>
                  <stringProp name="script">import com.mongodb.*
import com.mongodb.BasicDBObject
import org.apache.jmeter.util.JMeterUtils; 

long result;

    
Properties properties = JMeterUtils.getJMeterProperties();
MongoClient coreMongoClient = properties.get(&quot;coreMongoClient&quot;); 
    DB coreDB = coreMongoClient.getDB(&quot;verisk_smartcontent&quot;);
    DBCollection collection = coreDB.getCollection(&quot;VERISK_METADATA_COLLECTION&quot;);
    BasicDBObject query = new BasicDBObject(&quot;uri&quot;, &quot;${uniquekey}&quot;);
    result = collection.count(query);</stringProp>
                </JSR223Sampler>
                <hashTree>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">dbCount</stringProp>
                    <stringProp name="RegexExtractor.regex">(.*)</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">asd</stringProp>
                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                  <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                    <stringProp name="BeanShellAssertion.query">long mongoCount=Integer.parseInt(vars.get(&quot;dbCount&quot;));

try{
	if (mongoCount==1){
	Failure=false;
	log.info(&quot;Forms inserted to mongodb&quot;);
	
	
	}
	else{
	Failure=true;
	FailureMessage=&quot;Forms didnt get inserted&quot;;
	log.error(&quot;Bean Shell Assertion is Fail&quot;);
	}
}catch(Exception E){
	Failure=true;
	FailureMessage=&quot;Forms didnt get inserted&quot;;
}</stringProp>
                    <stringProp name="BeanShellAssertion.filename"></stringProp>
                    <stringProp name="BeanShellAssertion.parameters"></stringProp>
                    <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                  </BeanShellAssertion>
                  <hashTree/>
                  <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
                    <stringProp name="ConstantTimer.delay">10000</stringProp>
                  </ConstantTimer>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="MLC- Verify if reindexed to SOLR" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
&quot;appId&quot;:&quot;${clientId}&quot;,&#xd;
&quot;clientId&quot;:&quot;${clientId}&quot;,&#xd;
&quot;requestId&quot;:&quot;3r436y 4yyuh46676uy7&quot;,&#xd;
&quot;pageSize&quot;:&quot;1&quot;,&#xd;
&quot;searchOption&quot;:&quot;facsimile&quot;,&#xd;
&quot;searchScope&quot;:&quot;ISOANDCLIENT&quot;,&#xd;
&quot;filterQuery&quot;:&quot;(contentType:\&quot;${Contenttype}\&quot;)&quot;,&#xd;
&quot;uri&quot;:&quot;${uniquekey}&quot;&#xd;
}&#xd;
</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${server}</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">https</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">pcr-rest-api/V4/Search/</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">Content-Type</stringProp>
                        <stringProp name="Header.value">application/json</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="jp@gc - JSON Path Extractor" enabled="true">
                    <stringProp name="VAR">jsonCount</stringProp>
                    <stringProp name="JSONPATH">$.numFound</stringProp>
                    <stringProp name="DEFAULT">NOT FOUND</stringProp>
                    <stringProp name="VARIABLE"></stringProp>
                    <stringProp name="SUBJECT">BODY</stringProp>
                  </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
                  <hashTree/>
                  <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                    <stringProp name="BeanShellAssertion.query">long solrCount=Integer.parseInt(vars.get(&quot;jsonCount&quot;));
long mongoCount=Integer.parseInt(vars.get(&quot;dbCount&quot;));

try{
	if (solrCount&gt;=1){
	Failure=false;
	log.info(&quot;Record reindexed to SOLR&quot;);
	
	
	}
	else{
	Failure=true;
	FailureMessage=&quot;Record didnt get reindexed&quot;;
	log.error(&quot;Bean Shell Assertion is Fail&quot;);
	}
}catch(Exception E){
	Failure=true;
	FailureMessage=&quot;Record didnt get reindexed&quot;;
}










</stringProp>
                    <stringProp name="BeanShellAssertion.filename"></stringProp>
                    <stringProp name="BeanShellAssertion.parameters"></stringProp>
                    <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                  </BeanShellAssertion>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="MLC-APPLICABILITY_UPDATE" enabled="true">
                <stringProp name="IfController.condition">&quot;${update}&quot;==&quot;APPLICABILITY_UPDATE&quot;</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
              </IfController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="MLC - APLLICABILITY_UPDATE" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="metadata" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${metadata}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">metadata</stringProp>
                      </elementProp>
                      <elementProp name="request_id" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">067e6162-3b6f-4ae2-a171-2470b63dff01</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">request_id</stringProp>
                      </elementProp>
                      <elementProp name="client_id" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${clientId}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">client_id</stringProp>
                      </elementProp>
                      <elementProp name="contentType" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${Contenttype}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">contentType</stringProp>
                      </elementProp>
                      <elementProp name="update" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${update}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">update</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${server}</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">https</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/pcr-update-api/V2.1/CreateMessage</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="false">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">Content-Type</stringProp>
                        <stringProp name="Header.value">multipart/form-data</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="49588">202</stringProp>
                      <stringProp name="0"></stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">2</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                  <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                    <boolProp name="resetInterpreter">true</boolProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="script">import org.apache.jmeter.protocol.http.control.Header;

sampler.getHeaderManager().add(new Header(&quot;Content-Type&quot;,&quot;application/json&quot;));



</stringProp>
                  </BeanShellPostProcessor>
                  <hashTree/>
                </hashTree>
                <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="${Contenttype} - Verify if inserted in mongodb" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey"></stringProp>
                  <stringProp name="script">import com.mongodb.*
import com.mongodb.BasicDBObject
import org.apache.jmeter.util.JMeterUtils; 

long result;

    
Properties properties = JMeterUtils.getJMeterProperties();
MongoClient coreMongoClient = properties.get(&quot;coreMongoClient&quot;); 
    DB coreDB = coreMongoClient.getDB(&quot;verisk_smartcontent&quot;);
    DBCollection collection = coreDB.getCollection(&quot;VERISK_METADATA_COLLECTION&quot;);
    BasicDBObject query = new BasicDBObject(&quot;uri&quot;, &quot;${uniquekey}&quot;);
    result = collection.count(query);</stringProp>
                </JSR223Sampler>
                <hashTree>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">dbCount</stringProp>
                    <stringProp name="RegexExtractor.regex">(.*)</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">asd</stringProp>
                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                  <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                    <stringProp name="BeanShellAssertion.query">long mongoCount=Integer.parseInt(vars.get(&quot;dbCount&quot;));

try{
	if (mongoCount==1){
	Failure=false;
	log.info(&quot;Forms inserted to mongodb&quot;);
	
	
	}
	else{
	Failure=true;
	FailureMessage=&quot;Forms didnt get inserted&quot;;
	log.error(&quot;Bean Shell Assertion is Fail&quot;);
	}
}catch(Exception E){
	Failure=true;
	FailureMessage=&quot;Forms didnt get inserted&quot;;
}</stringProp>
                    <stringProp name="BeanShellAssertion.filename"></stringProp>
                    <stringProp name="BeanShellAssertion.parameters"></stringProp>
                    <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                  </BeanShellAssertion>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="MLC - Verify if reindexed to SOLR" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
&quot;appId&quot;:&quot;${clientId}&quot;,&#xd;
&quot;clientId&quot;:&quot;${clientId}&quot;,&#xd;
&quot;requestId&quot;:&quot;3r436y 4yyuh46676uy7&quot;,&#xd;
&quot;pageSize&quot;:&quot;1&quot;,&#xd;
&quot;searchOption&quot;:&quot;facsimile&quot;,&#xd;
&quot;searchScope&quot;:&quot;ISOANDCLIENT&quot;,&#xd;
&quot;filterQuery&quot;:&quot;(contentType:\&quot;${Contenttype}\&quot;)&quot;,&#xd;
&quot;uri&quot;:&quot;${uniquekey}&quot;&#xd;
}&#xd;
</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${server}</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">https</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">pcr-rest-api/V4/Search/</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">Content-Type</stringProp>
                        <stringProp name="Header.value">application/json</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
                    <stringProp name="ConstantTimer.delay">12000</stringProp>
                  </ConstantTimer>
                  <hashTree/>
                  <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="jp@gc - JSON Path Extractor" enabled="true">
                    <stringProp name="VAR">jsonCount</stringProp>
                    <stringProp name="JSONPATH">$.numFound</stringProp>
                    <stringProp name="DEFAULT">NOT FOUND</stringProp>
                    <stringProp name="VARIABLE"></stringProp>
                    <stringProp name="SUBJECT">BODY</stringProp>
                  </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
                  <hashTree/>
                  <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                    <stringProp name="BeanShellAssertion.query">long solrCount=Integer.parseInt(vars.get(&quot;jsonCount&quot;));
long mongoCount=Integer.parseInt(vars.get(&quot;dbCount&quot;));

try{
	if (solrCount&gt;1){
	Failure=false;
	log.info(&quot;New Applicability reindexed to SOLR&quot;);
	
	
	}
	else{
	Failure=true;
	FailureMessage=&quot;New Applicability didnt get reindexed to SOLR&quot;;
	log.error(&quot;Bean Shell Assertion is Fail&quot;);
	}
}catch(Exception E){
	Failure=true;
	FailureMessage=&quot;New Applicability didnt get reindexed to SOLR&quot;;
}










</stringProp>
                    <stringProp name="BeanShellAssertion.filename"></stringProp>
                    <stringProp name="BeanShellAssertion.parameters"></stringProp>
                    <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                  </BeanShellAssertion>
                  <hashTree/>
                </hashTree>
              </hashTree>
            </hashTree>
          </hashTree>
        </hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="flush" enabled="true">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey"></stringProp>
          <stringProp name="script">import com.mongodb.*;
import org.apache.jmeter.util.JMeterUtils; 
import org.apache.jmeter.testelement.property.CollectionProperty;
import org.apache.jmeter.services.FileServer;

Properties properties = JMeterUtils.getJMeterProperties();
MongoClient coreMongoClient = properties.get(&quot;coreMongoClient&quot;); 
CollectionProperty csvFile=new CollectionProperty();



coreMongoClient.close()
try
{
	coreMongoClient.getDatabaseNames()
}
catch (Exception e)
{
	log.info &quot;Connection already closed&quot;
}

csvFile.clear();


</stringProp>
        </JSR223Sampler>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group-Cleaning up created data" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1520571546000</longProp>
        <longProp name="ThreadGroup.end_time">1520571546000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="false">
          <stringProp name="BeanShellSampler.query">import com.mongodb.client.MongoDatabase;
import com.mongodb.*;
import com.mongodb.Block;
import  com.mongodb.MongoClient;
import com.mongodb.MongoException;
import com.mongodb.client.*;
import java.util.Arrays;
import java.util.List;
import java.util.ArrayList;
import org.bson.BsonNull;
import org.bson.Document;
import org.bson.conversions.Bson;
import org.apache.jmeter.util.JMeterUtils; 


MongoClient coreMongoClient;
com.mongodb.client.MongoDatabase database;
		
		if(vars.get(&quot;Environment&quot;).equalsIgnoreCase(&quot;prod&quot;))
		{
			
			vars.put(&quot;server&quot;,vars.get(&quot;prodserver&quot;));
			vars.put(&quot;Mongodbserver&quot;,&quot;0931-PCRMGD-P01.veriskp.local&quot;);
			vars.put(&quot;Mongodbserverport&quot;,&quot;27017&quot;);
			vars.put(&quot;solrServer&quot;,vars.get(&quot;prodSolr&quot;));
			vars.put(&quot;userName&quot;,&quot;PCRREADUSRP&quot;);
			//vars.put(&quot;passWord&quot;,&apos;6rUbEwu#\$&apos;);
			vars.put(&quot;source&quot;,&quot;admin&quot;);
			MongoCredential mongoCredential = MongoCredential.createScramSha1Credential(&quot;PCRREADUSRP&quot;,&quot;admin&quot;,&apos;6rUbEwu#\$&apos;.toCharArray());
    			coreMongoClient = new MongoClient(new ServerAddress(&quot;0931-PCRMGD-P01.veriskp.local&quot;, 27017),Arrays.asList(mongoCredential));
    			
			}
			
		else if(vars.get(&quot;Environment&quot;).equalsIgnoreCase(&quot;stg&quot;))
		{
			vars.put(&quot;server&quot;,vars.get(&quot;stgserver&quot;));
			vars.put(&quot;Mongodbserver&quot;,&quot;0931-PCRMGD-U01.veriska.local&quot;);
			vars.put(&quot;Mongodbserverport&quot;,&quot;27017&quot;);
			vars.put(&quot;solrServer&quot;,vars.get(&quot;stagingSolr&quot;));
			vars.put(&quot;userName&quot;,&quot;PIDPCRBPA&quot;);
			vars.put(&quot;passWord&quot;,&apos;pRU6Refe\$&apos;);
			vars.put(&quot;source&quot;,&quot;admin&quot;);
			MongoCredential mongoCredential = MongoCredential.createScramSha1Credential(&quot;PIDPCRBPA&quot;,&quot;admin&quot;,&apos;pRU6Refe\$&apos;.toCharArray());
    			coreMongoClient = new MongoClient(new ServerAddress(&quot;0931-PCRMGD-U01.veriska.local&quot;, 27017),Arrays.asList(mongoCredential));
    			
			
		}
		else if(vars.get(&quot;Environment&quot;).equalsIgnoreCase(&quot;uat&quot;))
		{
			vars.put(&quot;server&quot;,vars.get(&quot;uatserver&quot;));
			vars.put(&quot;Mongodbserver&quot;,&quot;10.93.204.78&quot;);
			
			vars.put(&quot;Mongodbserverport&quot;,&quot;27017&quot;);
			vars.put(&quot;solrServer&quot;,vars.get(&quot;uatSolr&quot;));
			coreMongoClient = new MongoClient(&quot;10.93.204.78&quot;, 27017);
			database = coreMongoClient.getDatabase(&quot;verisk_smartcontent&quot;);
			
			
			
			//vars.put(&quot;Mongodbserver&quot;,&quot;0931-PCRMGD-U01.veriska.local&quot;);
			//vars.put(&quot;Mongodbserverport&quot;,&quot;27017&quot;);
		}

		Properties properties=JMeterUtils.getJMeterProperties();
		properties.put(&quot;coreMongoClient&quot;,coreMongoClient);
		properties.put(&quot;database&quot;,database);
	 
			
			 </stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler" enabled="true">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey"></stringProp>
          <stringProp name="script">import com.mongodb.*;
import com.mongodb.MongoCredential;
import org.apache.jmeter.util.JMeterUtils; 
import org.apache.jmeter.testelement.property.CollectionProperty;

MongoClient coreMongoClient=null;
		
		if(vars.get(&quot;Environment&quot;).equalsIgnoreCase(&quot;prod&quot;))
		{
			vars.put(&quot;server&quot;,vars.get(&quot;prodserver&quot;));
			vars.put(&quot;Mongodbserver&quot;,&quot;0931-PCRMGD-P01.veriskp.local&quot;);
			vars.put(&quot;Mongodbserverport&quot;,&quot;27017&quot;);
			vars.put(&quot;solrServer&quot;,vars.get(&quot;prodSolr&quot;));
			vars.put(&quot;userName&quot;,&quot;PCRREADUSRP&quot;);
			//vars.put(&quot;passWord&quot;,&apos;6rUbEwu#\$&apos;);
			vars.put(&quot;source&quot;,&quot;admin&quot;);
			MongoCredential mongoCredential = MongoCredential.createScramSha1Credential(&quot;PCRREADUSRP&quot;,&quot;admin&quot;,&apos;6rUbEwu#\$&apos;.toCharArray());
    			coreMongoClient = new MongoClient(new ServerAddress(&quot;0931-PCRMGD-P01.veriskp.local&quot;, 27017),Arrays.asList(mongoCredential));
    			
			}
			
		else if(vars.get(&quot;Environment&quot;).equalsIgnoreCase(&quot;stg&quot;))
		{
			vars.put(&quot;server&quot;,vars.get(&quot;stgserver&quot;));
			vars.put(&quot;Mongodbserver&quot;,&quot;0931-PCRMGD-U02.veriska.local&quot;);
			vars.put(&quot;Mongodbserverport&quot;,&quot;27017&quot;);
			vars.put(&quot;solrServer&quot;,vars.get(&quot;stagingSolr&quot;));
			vars.put(&quot;userName&quot;,&quot;PIDPCRBPA&quot;);
			vars.put(&quot;passWord&quot;,&apos;pRU6Refe\$&apos;);
			vars.put(&quot;source&quot;,&quot;admin&quot;);
			MongoCredential mongoCredential = MongoCredential.createScramSha1Credential(&quot;PIDPCRBPA&quot;,&quot;admin&quot;,&apos;pRU6Refe\$&apos;.toCharArray());
    			coreMongoClient = new MongoClient(new ServerAddress(&quot;0931-PCRMGD-U01.veriska.local&quot;, 27017),Arrays.asList(mongoCredential));
    			
			
		}
		else if(vars.get(&quot;Environment&quot;).equalsIgnoreCase(&quot;uat&quot;))
		{
			vars.put(&quot;server&quot;,vars.get(&quot;uatserver&quot;));
			vars.put(&quot;Mongodbserver&quot;,&quot;10.93.204.78&quot;);
			
			vars.put(&quot;Mongodbserverport&quot;,&quot;27017&quot;);
			vars.put(&quot;solrServer&quot;,vars.get(&quot;uatSolr&quot;));
			coreMongoClient = new MongoClient(&quot;10.93.204.78&quot;, 27017);
			
			
			
			//vars.put(&quot;Mongodbserver&quot;,&quot;0931-PCRMGD-U01.veriska.local&quot;);
			//vars.put(&quot;Mongodbserverport&quot;,&quot;27017&quot;);
		}

		Properties properties=JMeterUtils.getJMeterProperties();
		properties.put(&quot;coreMongoClient&quot;,coreMongoClient);
	 
			
			  

			  




    


    
    
    
    </stringProp>
        </JSR223Sampler>
        <hashTree/>
        <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="While Controller" enabled="true">
          <stringProp name="WhileController.condition">${__javaScript(&quot;${contentType}&quot; != &quot;&lt;EOF&gt;&quot;,)} </stringProp>
        </WhileController>
        <hashTree>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
            <stringProp name="delimiter">,</stringProp>
            <stringProp name="fileEncoding"></stringProp>
            <stringProp name="filename">${csv}/CLEANUP_UPDATE_${Environment}.csv</stringProp>
            <boolProp name="quotedData">true</boolProp>
            <boolProp name="recycle">false</boolProp>
            <stringProp name="shareMode">shareMode.all</stringProp>
            <boolProp name="stopThread">false</boolProp>
            <stringProp name="variableNames">contentType,uniqueKey,activeSolrCollection</stringProp>
            <boolProp name="ignoreFirstLine">true</boolProp>
          </CSVDataSet>
          <hashTree/>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
            <stringProp name="IfController.condition">&quot;${contentType}&quot; != &quot;&lt;EOF&gt;&quot;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller-FRM" enabled="true">
              <stringProp name="IfController.condition">&quot;${contentType}&quot;==&quot;FRM&quot;</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
            </IfController>
            <hashTree>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="${contentType} - Mongo cleaning" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey"></stringProp>
                <stringProp name="script">import com.mongodb.*
import com.mongodb.BasicDBObject
import org.apache.jmeter.util.JMeterUtils; 


   Properties properties = JMeterUtils.getJMeterProperties();
   MongoClient coreMongoClient = properties.get(&quot;coreMongoClient&quot;); 
	
    DB coreDB = coreMongoClient.getDB(&quot;verisk_smartcontent&quot;);
    DBCollection collection = coreDB.getCollection(&quot;VERISK_METADATA_COLLECTION&quot;);
    BasicDBObject query = new BasicDBObject(&quot;uri&quot;, &quot;${uniqueKey}&quot;);
    collection.remove(query);</stringProp>
              </JSR223Sampler>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${contentType} - SOLR cleanup" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="stream.body" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">%3Cdelete%3E%3Cquery%3Euri:${uniqueKey}%3C/query%3E%3C/delete%3E</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">stream.body</stringProp>
                    </elementProp>
                    <elementProp name="commit" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">true</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">commit</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${solrServer}</stringProp>
                <stringProp name="HTTPSampler.port">8983</stringProp>
                <stringProp name="HTTPSampler.protocol">http</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/solr/${activeSolrCollection}/update?</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller-CRC" enabled="true">
              <stringProp name="IfController.condition">&quot;${contentType}&quot;==&quot;CRC&quot;</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
            </IfController>
            <hashTree>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="${contentType} -  Mongo cleaning" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey"></stringProp>
                <stringProp name="script">import com.mongodb.*
import com.mongodb.BasicDBObject
import org.apache.jmeter.util.JMeterUtils; 


   Properties properties = JMeterUtils.getJMeterProperties();
   MongoClient coreMongoClient = properties.get(&quot;coreMongoClient&quot;); 
    DB coreDB = coreMongoClient.getDB(&quot;verisk_smartcontent&quot;);
    DBCollection collection = coreDB.getCollection(&quot;VERISK_METADATA_COLLECTION&quot;);
    BasicDBObject query = new BasicDBObject(&quot;uri&quot;, &quot;${uniqueKey}&quot;);
   collection.remove(query);</stringProp>
              </JSR223Sampler>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${contentType} - SOLR cleanup" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="stream.body" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">%3Cdelete%3E%3Cquery%3Euri:${uniqueKey}%3C/query%3E%3C/delete%3E</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">stream.body</stringProp>
                    </elementProp>
                    <elementProp name="commit" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">true</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">commit</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">10.93.204.24</stringProp>
                <stringProp name="HTTPSampler.port">8983</stringProp>
                <stringProp name="HTTPSampler.protocol">http</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/solr/${activeSolrCollection}/update?</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller-CLM" enabled="true">
              <stringProp name="IfController.condition">&quot;${contentType}&quot;==&quot;CLM&quot;</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
            </IfController>
            <hashTree>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="${contentType} -  Mongo cleaning" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey"></stringProp>
                <stringProp name="script">import com.mongodb.*
import com.mongodb.BasicDBObject

import org.apache.jmeter.util.JMeterUtils; 


   Properties properties = JMeterUtils.getJMeterProperties();
   MongoClient coreMongoClient = properties.get(&quot;coreMongoClient&quot;); 
    DB coreDB = coreMongoClient.getDB(&quot;verisk_smartcontent&quot;);
    DBCollection collection = coreDB.getCollection(&quot;VERISK_METADATA_COLLECTION&quot;);
    BasicDBObject query = new BasicDBObject(&quot;uri&quot;, &quot;${uniqueKey}&quot;);
   collection.remove(query);</stringProp>
              </JSR223Sampler>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${contentType} - SOLR cleanup" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="stream.body" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">%3Cdelete%3E%3Cquery%3Euri:${uniqueKey}%3C/query%3E%3C/delete%3E</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">stream.body</stringProp>
                    </elementProp>
                    <elementProp name="commit" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">true</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">commit</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">10.93.204.24</stringProp>
                <stringProp name="HTTPSampler.port">8983</stringProp>
                <stringProp name="HTTPSampler.protocol">http</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/solr/${activeSolrCollection}/update?</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller-EMI" enabled="true">
              <stringProp name="IfController.condition">&quot;${contentType}&quot;==&quot;EMI&quot;</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
            </IfController>
            <hashTree>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="${contentType} -  Mongo cleaning" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey"></stringProp>
                <stringProp name="script">import com.mongodb.*
import com.mongodb.BasicDBObject
import org.apache.jmeter.util.JMeterUtils; 


   Properties properties = JMeterUtils.getJMeterProperties();
   MongoClient coreMongoClient = properties.get(&quot;coreMongoClient&quot;); 
    DB coreDB = coreMongoClient.getDB(&quot;verisk_smartcontent&quot;);
    DBCollection collection = coreDB.getCollection(&quot;VERISK_METADATA_COLLECTION&quot;);
    BasicDBObject query = new BasicDBObject(&quot;uri&quot;, &quot;${uniqueKey}&quot;);
   collection.remove(query);</stringProp>
              </JSR223Sampler>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${contentType} - SOLR cleanup" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="stream.body" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">%3Cdelete%3E%3Cquery%3Euri:${uniqueKey}%3C/query%3E%3C/delete%3E</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">stream.body</stringProp>
                    </elementProp>
                    <elementProp name="commit" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">true</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">commit</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">10.93.204.24</stringProp>
                <stringProp name="HTTPSampler.port">8983</stringProp>
                <stringProp name="HTTPSampler.protocol">http</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/solr/${activeSolrCollection}/update?</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller-LSC" enabled="true">
              <stringProp name="IfController.condition">&quot;${contentType}&quot;==&quot;LSC&quot;</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
            </IfController>
            <hashTree>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="${contentType} -  Mongo cleaning" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey"></stringProp>
                <stringProp name="script">import com.mongodb.*
import com.mongodb.BasicDBObject
import org.apache.jmeter.util.JMeterUtils; 


   Properties properties = JMeterUtils.getJMeterProperties();
   MongoClient coreMongoClient = properties.get(&quot;coreMongoClient&quot;); 
    DB coreDB = coreMongoClient.getDB(&quot;verisk_smartcontent&quot;);
    DBCollection collection = coreDB.getCollection(&quot;VERISK_METADATA_COLLECTION&quot;);
    BasicDBObject query = new BasicDBObject(&quot;documentName&quot;, &quot;${uniqueKey}&quot;);
   collection.remove(query);</stringProp>
              </JSR223Sampler>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${contentType} - SOLR cleanup" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="stream.body" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">%3Cdelete%3E%3Cquery%3EdocumentName:${uniqueKey}%3C/query%3E%3C/delete%3E</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">stream.body</stringProp>
                    </elementProp>
                    <elementProp name="commit" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">true</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">commit</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">10.93.204.24</stringProp>
                <stringProp name="HTTPSampler.port">8983</stringProp>
                <stringProp name="HTTPSampler.protocol">http</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/solr/${activeSolrCollection}/update?</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller-PRM" enabled="true">
              <stringProp name="IfController.condition">&quot;${contentType}&quot;==&quot;PRM&quot;</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
            </IfController>
            <hashTree>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="${contentType} -  Mongo cleaning" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey"></stringProp>
                <stringProp name="script">import com.mongodb.*
import com.mongodb.BasicDBObject
import org.apache.jmeter.util.JMeterUtils; 


   Properties properties = JMeterUtils.getJMeterProperties();
   MongoClient coreMongoClient = properties.get(&quot;coreMongoClient&quot;); 
    DB coreDB = coreMongoClient.getDB(&quot;verisk_smartcontent&quot;);
    DBCollection collection = coreDB.getCollection(&quot;VERISK_METADATA_COLLECTION&quot;);
    BasicDBObject query = new BasicDBObject(&quot;documentName&quot;, &quot;${uniqueKey}&quot;);
   collection.remove(query);</stringProp>
              </JSR223Sampler>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${contentType} - SOLR cleanup" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="stream.body" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">%3Cdelete%3E%3Cquery%3EdocumentName:${uniqueKey}%3C/query%3E%3C/delete%3E</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">stream.body</stringProp>
                    </elementProp>
                    <elementProp name="commit" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">true</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">commit</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">10.93.204.24</stringProp>
                <stringProp name="HTTPSampler.port">8983</stringProp>
                <stringProp name="HTTPSampler.protocol">http</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/solr/${activeSolrCollection}/update?</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller-RUL" enabled="true">
              <stringProp name="IfController.condition">&quot;${contentType}&quot;==&quot;RUL&quot;</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
            </IfController>
            <hashTree>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="${contentType} - Mongo cleaning" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey"></stringProp>
                <stringProp name="script">import com.mongodb.*
import com.mongodb.BasicDBObject
import org.apache.jmeter.util.JMeterUtils; 


   Properties properties = JMeterUtils.getJMeterProperties();
   MongoClient coreMongoClient = properties.get(&quot;coreMongoClient&quot;); 
    DB coreDB = coreMongoClient.getDB(&quot;verisk_smartcontent&quot;);
    DBCollection collection = coreDB.getCollection(&quot;VERISK_METADATA_COLLECTION&quot;);
    BasicDBObject query = new BasicDBObject(&quot;documentName&quot;, &quot;${uniqueKey}&quot;);
   collection.remove(query);</stringProp>
              </JSR223Sampler>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${contentType} - SOLR cleanup" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="stream.body" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">%3Cdelete%3E%3Cquery%3EdocumentName:${uniqueKey}%3C/query%3E%3C/delete%3E</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">stream.body</stringProp>
                    </elementProp>
                    <elementProp name="commit" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">true</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">commit</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">10.93.204.24</stringProp>
                <stringProp name="HTTPSampler.port">8983</stringProp>
                <stringProp name="HTTPSampler.protocol">http</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/solr/${activeSolrCollection}/update?</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller-LMN" enabled="true">
              <stringProp name="IfController.condition">&quot;${contentType}&quot;==&quot;LMN&quot;</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
            </IfController>
            <hashTree>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="${contentType} -  Mongo cleaning" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey"></stringProp>
                <stringProp name="script">import com.mongodb.*
import com.mongodb.BasicDBObject
import org.apache.jmeter.util.JMeterUtils; 


   Properties properties = JMeterUtils.getJMeterProperties();
   MongoClient coreMongoClient = properties.get(&quot;coreMongoClient&quot;); 
    DB coreDB = coreMongoClient.getDB(&quot;verisk_smartcontent&quot;);
    DBCollection collection = coreDB.getCollection(&quot;VERISK_METADATA_COLLECTION&quot;);
    BasicDBObject query = new BasicDBObject(&quot;uri&quot;, &quot;${uniqueKey}&quot;);
   collection.remove(query);</stringProp>
              </JSR223Sampler>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${contentType} - SOLR cleanup" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="stream.body" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">%3Cdelete%3E%3Cquery%3Euri:${uniqueKey}%3C/query%3E%3C/delete%3E</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">stream.body</stringProp>
                    </elementProp>
                    <elementProp name="commit" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">true</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">commit</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">10.93.204.24</stringProp>
                <stringProp name="HTTPSampler.port">8983</stringProp>
                <stringProp name="HTTPSampler.protocol">http</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/solr/${activeSolrCollection}/update?</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller-MLC" enabled="true">
              <stringProp name="IfController.condition">&quot;${contentType}&quot;==&quot;MLC&quot;</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
            </IfController>
            <hashTree>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="${contentType} - Mongo cleaning" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey"></stringProp>
                <stringProp name="script">import com.mongodb.*
import com.mongodb.BasicDBObject
import org.apache.jmeter.util.JMeterUtils; 


   Properties properties = JMeterUtils.getJMeterProperties();
   MongoClient coreMongoClient = properties.get(&quot;coreMongoClient&quot;); 
    DB coreDB = coreMongoClient.getDB(&quot;verisk_smartcontent&quot;);
    DBCollection collection = coreDB.getCollection(&quot;VERISK_METADATA_COLLECTION&quot;);
    BasicDBObject query = new BasicDBObject(&quot;uri&quot;, &quot;${uniqueKey}&quot;);
   collection.remove(query);</stringProp>
              </JSR223Sampler>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${contentType} - SOLR cleanup" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="stream.body" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">%3Cdelete%3E%3Cquery%3Euri:${uniqueKey}%3C/query%3E%3C/delete%3E</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">stream.body</stringProp>
                    </elementProp>
                    <elementProp name="commit" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">true</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">commit</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">10.93.204.24</stringProp>
                <stringProp name="HTTPSampler.port">8983</stringProp>
                <stringProp name="HTTPSampler.protocol">http</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/solr/${activeSolrCollection}/update?</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="flush" enabled="true">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey"></stringProp>
          <stringProp name="script">import com.mongodb.*;
import org.apache.jmeter.util.JMeterUtils; 
import org.apache.jmeter.testelement.property.CollectionProperty;
import org.apache.jmeter.services.FileServer;

Properties properties = JMeterUtils.getJMeterProperties();
MongoClient coreMongoClient = properties.get(&quot;coreMongoClient&quot;); 
CollectionProperty csvFile=new CollectionProperty();



coreMongoClient.close()
try
{
	coreMongoClient.getDatabaseNames()
}
catch (Exception e)
{
	log.info &quot;Connection already closed&quot;
}

csvFile.clear();


</stringProp>
        </JSR223Sampler>
        <hashTree/>
      </hashTree>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>false</time>
            <latency>false</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>false</threadName>
            <dataType>false</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>false</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
    </hashTree>
    <WorkBench guiclass="WorkBenchGui" testclass="WorkBench" testname="WorkBench" enabled="true">
      <boolProp name="WorkBench.save">true</boolProp>
    </WorkBench>
    <hashTree/>
  </hashTree>
</jmeterTestPlan>
