<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="3.2" jmeter="3.3 r1808647">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1514014914000</longProp>
        <longProp name="ThreadGroup.end_time">1514014914000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="uatserver" elementType="Argument">
              <stringProp name="Argument.name">uatserver</stringProp>
              <stringProp name="Argument.value">pcr-uat.iso.com</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="csv" elementType="Argument">
              <stringProp name="Argument.name">csv</stringProp>
              <stringProp name="Argument.value">${__property(csvSource,,C://Users//i20918//Desktop//PCR//pcr_automation//pcr_test//develop//pcr.test//API//PCRTestJAR//src//test//resources)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.desc">C://Users//i20918//Desktop//PCR//APITestData</stringProp>
            </elementProp>
            <elementProp name="Environment" elementType="Argument">
              <stringProp name="Argument.name">Environment</stringProp>
              <stringProp name="Argument.value">${__property(Server,,prod)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="stgserver" elementType="Argument">
              <stringProp name="Argument.name">stgserver</stringProp>
              <stringProp name="Argument.value">staging-content.iso.com</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="prodserver" elementType="Argument">
              <stringProp name="Argument.name">prodserver</stringProp>
              <stringProp name="Argument.value">pcr-content.iso.com</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="uatSolr" elementType="Argument">
              <stringProp name="Argument.name">uatSolr</stringProp>
              <stringProp name="Argument.value">10.93.204.24</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="stagingSolr" elementType="Argument">
              <stringProp name="Argument.name">stagingSolr</stringProp>
              <stringProp name="Argument.value">0931-pcrslr-u01.veriska.local</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="prodSolr" elementType="Argument">
              <stringProp name="Argument.name">prodSolr</stringProp>
              <stringProp name="Argument.value">10.53.196.25</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Content-Type</stringProp>
              <stringProp name="Header.value">application/json</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="false">
          <stringProp name="BeanShellSampler.query">
		
		if(vars.get(&quot;Environment&quot;).equalsIgnoreCase(&quot;prod&quot;))
		{
			vars.put(&quot;server&quot;,vars.get(&quot;prodserver&quot;));
			
		}
		else if(vars.get(&quot;Environment&quot;).equalsIgnoreCase(&quot;Staging&quot;))
		{
			vars.put(&quot;server&quot;,vars.get(&quot;stgserver&quot;));
			
   		     //MongoCredential abc = MongoCredential.createScramSha1Credential(&quot;PIDPCRBPA&quot;,&quot;admin&quot;,&apos;pRU6Refe\$&apos;.toCharArray());
			vars.put(&quot;Mongodbserver&quot;,&quot;0931-PCRMGD-U01.veriska.local&quot;);
			vars.put(&quot;Mongodbserverport&quot;,&quot;27017&quot;);
			
			vars.put(&quot;solrServer&quot;,vars.get(&quot;stagingSolr&quot;));
			vars.put(&quot;userName&quot;,&quot;PIDPCRBPA&quot;);
			//vars.put(&quot;passWord&quot;,&quot;pRU6Refe\$&quot;);
			vars.put(&quot;source&quot;,&quot;admin&quot;);
			
		}
		else if(vars.get(&quot;Environment&quot;).equalsIgnoreCase(&quot;uat&quot;))
		{
			vars.put(&quot;server&quot;,vars.get(&quot;uatserver&quot;));
			vars.put(&quot;Mongodbserver&quot;,&quot;10.93.204.78&quot;);
			vars.put(&quot;Mongodbserverport&quot;,&quot;27017&quot;);
			vars.put(&quot;solrServer&quot;,vars.get(&quot;uatSolr&quot;));
			//vars.put(&quot;Mongodbserver&quot;,&quot;0931-PCRMGD-U01.veriska.local&quot;);
			//vars.put(&quot;Mongodbserverport&quot;,&quot;27017&quot;);
			}</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler" enabled="true">
          <stringProp name="scriptLanguage">beanshell</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey"></stringProp>
          <stringProp name="script">import com.mongodb.client.MongoDatabase;
import com.mongodb.*;
import com.mongodb.Block;
import  com.mongodb.MongoClient;
import com.mongodb.MongoException;
import com.mongodb.client.*;
import java.util.Arrays;
import java.util.List;
import java.util.ArrayList;
import org.bson.BsonNull;
import org.bson.Document;
import org.bson.conversions.Bson;
import org.apache.jmeter.util.JMeterUtils; 


		
		if(vars.get(&quot;Environment&quot;).equalsIgnoreCase(&quot;prod&quot;))
		{
			
			vars.put(&quot;server&quot;,vars.get(&quot;prodserver&quot;));
			vars.put(&quot;Mongodbserver&quot;,&quot;0931-PCRMGD-P01.veriskp.local&quot;);
			vars.put(&quot;Mongodbserverport&quot;,&quot;27017&quot;);
			vars.put(&quot;solrServer&quot;,vars.get(&quot;prodSolr&quot;));
			
			
    			
			}
			
		else if(vars.get(&quot;Environment&quot;).equalsIgnoreCase(&quot;stg&quot;))
		{
			vars.put(&quot;server&quot;,vars.get(&quot;stgserver&quot;));
			vars.put(&quot;Mongodbserver&quot;,&quot;0931-PCRMGD-U01.veriska.local&quot;);
			vars.put(&quot;Mongodbserverport&quot;,&quot;27017&quot;);
			vars.put(&quot;solrServer&quot;,vars.get(&quot;stagingSolr&quot;));
			
    			
			
		}
		 if(vars.get(&quot;Environment&quot;).equalsIgnoreCase(&quot;uat&quot;))
		{
			vars.put(&quot;server&quot;,vars.get(&quot;uatserver&quot;));
			vars.put(&quot;Mongodbserver&quot;,&quot;10.93.204.78&quot;);
			
			vars.put(&quot;Mongodbserverport&quot;,&quot;27017&quot;);
			vars.put(&quot;solrServer&quot;,vars.get(&quot;uatSolr&quot;));
			
		}

		
	 
			
			  

			  




    


    
    
    
    </stringProp>
        </JSR223Sampler>
        <hashTree/>
        <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="While Controller" enabled="true">
          <stringProp name="WhileController.condition">${__javaScript(&quot;${contentType}&quot; != &quot;&lt;EOF&gt;&quot;,)} </stringProp>
        </WhileController>
        <hashTree>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
            <stringProp name="delimiter">,</stringProp>
            <stringProp name="fileEncoding"></stringProp>
            <stringProp name="filename">${csv}/clientSolrIndexing_${Environment}.csv</stringProp>
            <boolProp name="quotedData">true</boolProp>
            <boolProp name="recycle">false</boolProp>
            <stringProp name="shareMode">shareMode.all</stringProp>
            <boolProp name="stopThread">false</boolProp>
            <stringProp name="variableNames">clientId,method,contentType,metadataId,uatactiveSolrCollection,formNumber,OtherValues,expectedValue,searchText1</stringProp>
            <boolProp name="ignoreFirstLine">false</boolProp>
          </CSVDataSet>
          <hashTree/>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
            <stringProp name="IfController.condition">&quot;${contentType}&quot; != &quot;&lt;EOF&gt;&quot;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller-FRM_ClientUpdate" enabled="true">
              <stringProp name="IfController.condition">&quot;${method}&quot;.equalsIgnoreCase(&quot;clientSolr&quot;)</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${contentType} -Index client form- ${formNumber}" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;id&quot;:&quot;5a8215954045ca19f81b3d5d&quot;,&#xd;
&quot;documentType&quot;:&quot;docx&quot;,&#xd;
&quot;doc_id&quot;:&quot;5a8215954045ca19f81b3d54&quot;,&#xd;
&quot;metadata_id&quot;:&quot;${metadataId}&quot;,&#xd;
&quot;title&quot;:&quot;FEB12_04&quot;,&#xd;
&quot;displayFormNumber&quot;:&quot;${formNumber}&quot;,&#xd;
&quot;client_id&quot;:&quot;${clientId}&quot;,&#xd;
&quot;formLobType&quot;:&quot;1917CL1&quot;,&#xd;
&quot;formNumber&quot;:&quot;${formNumber}&quot;,&#xd;
&quot;contentType&quot;:&quot;FRM&quot;,&#xd;
&quot;formsType&quot;:&quot;O&quot;,&#xd;
&quot;documentName&quot;:&quot;${formNumber}&quot;,&#xd;
&quot;categoryCode&quot;:&quot;00&quot;,&#xd;
&quot;formStatus&quot;:&quot;P&quot;,&#xd;
&quot;content&quot;:&quot;\n  \n \n  ENDORSEMENT NO. 816 PAGE 1 OF 1\n \n  CUSTOMER’S AUTO - SPECIAL REPAIR PROGRAM - DIRECT PRIMARY COVERAGE PART 300\n \n  UNICOVER V\n \n  \n\n  \n \n  THIS ENDORSEMENT CHANGES THE POLICY. PLEASE READ IT CAREFULLY.\n \n  \n \n  EXCLUSIONS\n \n  \n \n  WITH RESPECT TO CUSTOMER’S AUTOS OF SPECIAL REPAIR PROGRAMS, EXCLUSIONS (P) AND (Q) ARE DELETED.\n \n  \n \n  FOR THIS ENDORSEMENT ONLY, SPECIAL REPAIR PROGRAMS ARE DEFINED AS CONTRACTED PROGRAMS WHICH HAVE SPECIAL REQUIREMENTS.\n \n  \n \n  ALL OTHER TERMS, CONDITIONS, PROVISIONS AND EXCLUSIONS OF THIS POLICY REMAIN UNCHANGED. THE * INDICATES THE WORD IS DEFINED IN THE\n \n  COVERAGE PART TO WHICH THIS ENDORSEMENT APPLIES\n \n  \n \n  COPYRIGHT 2009 UNIVERSAL UNDERWRITERS INSURANCE COMPANY\n \n   \n \n  \n \n  EDITION 04-2009\n \n &quot;,&#xd;
&quot;cc_IsDeleted&quot;:&quot;N&quot;,&#xd;
&quot;cc_Library&quot;:&quot;Approved&quot;,&#xd;
&quot;cc_ModifiedDate&quot;:&quot;2018-02-12&quot;,&#xd;
&quot;cc_CreatedDate&quot;:&quot;2018-02-12&quot;,&#xd;
&quot;cc_WordCount&quot;:&quot;0&quot;,&#xd;
&quot;cc_SyllableCount&quot;:&quot;0&quot;,&#xd;
&quot;cc_SentenceCount&quot;:&quot;0&quot;,&#xd;
&quot;cc_FleschScore&quot;:&quot;0&quot;,&#xd;
&quot;cc_ProjectId&quot;:&quot;589de96bd8d5e40b54fea7fa&quot;,&#xd;
&quot;documentCreate_date&quot;:&quot;2018-02-12T00:00:00Z&quot;,&#xd;
&quot;documentModified_date&quot;:&quot;2018-02-12T00:00:00Z&quot;,&#xd;
&quot;documentAvailable_date&quot;:&quot;2018-02-12T00:00:00Z&quot;,&#xd;
&quot;applicability&quot;:[&#xd;
{&quot;lob&quot;:&quot;PA&quot;,&quot;withDrawnDate&quot;:&quot;2999-01-01T00:00:00Z&quot;}&#xd;
],&#xd;
&quot;uri&quot;:&quot;${clientId}/${contentType}/${metadataId}&quot;         &#xd;
}&#xd;
&#xd;
</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${server}</stringProp>
                <stringProp name="HTTPSampler.port">443</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">clientupdateapi/SolrIndexing?requestId=ad74080b-c01f-4907-a9ee-56791343d5a4</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49588">202</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="FRM - Verify if reindexed to SOLR- ${formNumber}" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
&quot;appId&quot;:&quot;${clientId}&quot;,&#xd;
&quot;clientId&quot;:&quot;${clientId}&quot;,&#xd;
&quot;requestId&quot;:&quot;3r436y 4yyuh46676uy7&quot;,&#xd;
&quot;pageSize&quot;:&quot;1&quot;,&#xd;
&quot;searchOption&quot;:&quot;facsimile&quot;,&#xd;
&quot;searchScope&quot;:&quot;CLIENT&quot;,&#xd;
&quot;filterQuery&quot;:&quot;(contentType:\&quot;${contentType}\&quot;)&quot;,&#xd;
&quot;formNumber&quot;:&quot;${formNumber}&quot;&#xd;
}&#xd;
</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${server}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">pcr-rest-api/V4/Search/</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="jp@gc - JSON Path Extractor" enabled="true">
                  <stringProp name="VAR">jsonCount</stringProp>
                  <stringProp name="JSONPATH">$.numFound</stringProp>
                  <stringProp name="DEFAULT">NOT FOUND</stringProp>
                  <stringProp name="VARIABLE"></stringProp>
                  <stringProp name="SUBJECT">BODY</stringProp>
                </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
                <hashTree/>
                <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                  <stringProp name="BeanShellAssertion.query">long apiCount=Integer.parseInt(vars.get(&quot;jsonCount&quot;));


try{
	if (apiCount==1){
	Failure=false;
	log.info(&quot;Forms reindexed to SOLR&quot;);
	
	
	}
	else{
	Failure=true;
	FailureMessage=&quot;Forms didnt get reindexed&quot;;
	log.error(&quot;Bean Shell Assertion is Fail&quot;);
	}
}catch(Exception E){
	Failure=true;
	FailureMessage=&quot;Forms didnt get reindexed&quot;;
}










</stringProp>
                  <stringProp name="BeanShellAssertion.filename"></stringProp>
                  <stringProp name="BeanShellAssertion.parameters"></stringProp>
                  <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                </BeanShellAssertion>
                <hashTree/>
                <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
                  <stringProp name="ConstantTimer.delay">12000</stringProp>
                </ConstantTimer>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${contentType} - SOLR parent count" enabled="false">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="indent" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">on</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">indent</stringProp>
                    </elementProp>
                    <elementProp name="q" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">_nested_id:child%20AND%20formNumber:FEB12_04</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">q</stringProp>
                    </elementProp>
                    <elementProp name="wt" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">json</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">wt</stringProp>
                    </elementProp>
                    <elementProp name="rows" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">0</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">rows</stringProp>
                    </elementProp>
                    <elementProp name="fl" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">numFound</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">fl</stringProp>
                    </elementProp>
                    <elementProp name="&amp;omitHeader" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">true</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">&amp;omitHeader</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${solrServer}</stringProp>
                <stringProp name="HTTPSampler.port">8983</stringProp>
                <stringProp name="HTTPSampler.protocol">http</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">solr/${uatactiveSolrCollection}/select?</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="jp@gc - JSON Path Extractor" enabled="true">
                  <stringProp name="VAR">parentCount</stringProp>
                  <stringProp name="JSONPATH">$..response.numFound</stringProp>
                  <stringProp name="DEFAULT">No child records</stringProp>
                  <stringProp name="VARIABLE"></stringProp>
                  <stringProp name="SUBJECT">BODY</stringProp>
                </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
                <hashTree/>
                <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                  <stringProp name="BeanShellAssertion.query">long solrParentCount=Integer.parseInt(vars.get(&quot;parentCount_1&quot;));


try{
	if (solrParentCount==1){
	Failure=false;
	log.info(&quot;Forms reindexed to SOLR&quot;);
	
	
	}
	else{
	Failure=true;
	FailureMessage=&quot;Forms didnt get reindexed&quot;;
	log.error(&quot;Bean Shell Assertion is Fail&quot;);
	}
}catch(Exception E){
	Failure=true;
	FailureMessage=&quot;Forms didnt get reindexed&quot;;
}










</stringProp>
                  <stringProp name="BeanShellAssertion.filename"></stringProp>
                  <stringProp name="BeanShellAssertion.parameters"></stringProp>
                  <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                </BeanShellAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${contentType} - SOLR child count" enabled="false">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="indent" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">on</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">indent</stringProp>
                    </elementProp>
                    <elementProp name="q" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">_nested_id:child%20AND%20formNumber:FEB12_04</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">q</stringProp>
                    </elementProp>
                    <elementProp name="wt" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">json</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">wt</stringProp>
                    </elementProp>
                    <elementProp name="rows" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">0</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">rows</stringProp>
                    </elementProp>
                    <elementProp name="fl" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">numFound</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">fl</stringProp>
                    </elementProp>
                    <elementProp name="&amp;omitHeader" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">true</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">&amp;omitHeader</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${solrServer}</stringProp>
                <stringProp name="HTTPSampler.port">8983</stringProp>
                <stringProp name="HTTPSampler.protocol">http</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">solr/${uatactiveSolrCollection}/select?</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="jp@gc - JSON Path Extractor" enabled="true">
                  <stringProp name="VAR">childCount</stringProp>
                  <stringProp name="JSONPATH">$..response.numFound</stringProp>
                  <stringProp name="DEFAULT">No child records</stringProp>
                  <stringProp name="VARIABLE"></stringProp>
                  <stringProp name="SUBJECT">BODY</stringProp>
                </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
                <hashTree/>
                <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                  <stringProp name="BeanShellAssertion.query">long solrChildCount=Integer.parseInt(vars.get(&quot;childCount_1&quot;));


try{
	if (solrChildCount==1){
	Failure=false;
	log.info(&quot;Forms reindexed to SOLR&quot;);
	
	
	}
	else{
	Failure=true;
	FailureMessage=&quot;Forms didnt get reindexed&quot;;
	log.error(&quot;Bean Shell Assertion is Fail&quot;);
	}
}catch(Exception E){
	Failure=true;
	FailureMessage=&quot;Forms didnt get reindexed&quot;;
}










</stringProp>
                  <stringProp name="BeanShellAssertion.filename"></stringProp>
                  <stringProp name="BeanShellAssertion.parameters"></stringProp>
                  <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                </BeanShellAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${contentType} - Add lob in existing form - ${formNumber}" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;id&quot;:&quot;5a8215954045ca19f81b3d5d&quot;,&#xd;
&quot;documentType&quot;:&quot;docx&quot;,&#xd;
&quot;doc_id&quot;:&quot;5a8215954045ca19f81b3d54&quot;,&#xd;
&quot;metadata_id&quot;:&quot;${metadataId}&quot;,&#xd;
&quot;title&quot;:&quot;FEB12_04&quot;,&#xd;
&quot;displayFormNumber&quot;:&quot;FEB12_04&quot;,&#xd;
&quot;client_id&quot;:&quot;${clientId}&quot;,&#xd;
&quot;formLobType&quot;:&quot;1917CL1&quot;,&#xd;
&quot;formNumber&quot;:&quot;${formNumber}&quot;,&#xd;
&quot;contentType&quot;:&quot;FRM&quot;,&#xd;
&quot;formsType&quot;:&quot;O&quot;,&#xd;
&quot;documentName&quot;:&quot;FEB12_04&quot;,&#xd;
&quot;categoryCode&quot;:&quot;00&quot;,&#xd;
&quot;formStatus&quot;:&quot;P&quot;,&#xd;
&quot;content&quot;:&quot;\n  \n \n  ENDORSEMENT NO. 816 PAGE 1 OF 1\n \n  CUSTOMER’S AUTO - SPECIAL REPAIR PROGRAM - DIRECT PRIMARY COVERAGE PART 300\n \n  UNICOVER V\n \n  \n\n  \n \n  THIS ENDORSEMENT CHANGES THE POLICY. PLEASE READ IT CAREFULLY.\n \n  \n \n  EXCLUSIONS\n \n  \n \n  WITH RESPECT TO CUSTOMER’S AUTOS OF SPECIAL REPAIR PROGRAMS, EXCLUSIONS (P) AND (Q) ARE DELETED.\n \n  \n \n  FOR THIS ENDORSEMENT ONLY, SPECIAL REPAIR PROGRAMS ARE DEFINED AS CONTRACTED PROGRAMS WHICH HAVE SPECIAL REQUIREMENTS.\n \n  \n \n  ALL OTHER TERMS, CONDITIONS, PROVISIONS AND EXCLUSIONS OF THIS POLICY REMAIN UNCHANGED. THE * INDICATES THE WORD IS DEFINED IN THE\n \n  COVERAGE PART TO WHICH THIS ENDORSEMENT APPLIES\n \n  \n \n  COPYRIGHT 2009 UNIVERSAL UNDERWRITERS INSURANCE COMPANY\n \n   \n \n  \n \n  EDITION 04-2009\n \n &quot;,&#xd;
&quot;cc_IsDeleted&quot;:&quot;N&quot;,&#xd;
&quot;cc_Library&quot;:&quot;Approved&quot;,&#xd;
&quot;cc_ModifiedDate&quot;:&quot;2018-02-12&quot;,&#xd;
&quot;cc_CreatedDate&quot;:&quot;2018-02-12&quot;,&#xd;
&quot;cc_WordCount&quot;:&quot;0&quot;,&#xd;
&quot;cc_SyllableCount&quot;:&quot;0&quot;,&#xd;
&quot;cc_SentenceCount&quot;:&quot;0&quot;,&#xd;
&quot;cc_FleschScore&quot;:&quot;0&quot;,&#xd;
&quot;cc_ProjectId&quot;:&quot;589de96bd8d5e40b54fea7fa&quot;,&#xd;
&quot;documentCreate_date&quot;:&quot;2018-02-12T00:00:00Z&quot;,&#xd;
&quot;documentModified_date&quot;:&quot;2018-02-12T00:00:00Z&quot;,&#xd;
&quot;documentAvailable_date&quot;:&quot;2018-02-12T00:00:00Z&quot;,&#xd;
&quot;applicability&quot;:[&#xd;
{&quot;lob&quot;:&quot;PA&quot;,&quot;withDrawnDate&quot;:&quot;2999-01-01T00:00:00Z&quot;},&#xd;
{&quot;lob&quot;:&quot;CA&quot;,&quot;withDrawnDate&quot;:&quot;2999-01-01T00:00:00Z&quot;}&#xd;
],&#xd;
&quot;uri&quot;:&quot;${clientId}/${contentType}/${metadataId}&quot;         &#xd;
}&#xd;
&#xd;
</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${server}</stringProp>
                <stringProp name="HTTPSampler.port">443</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">clientupdateapi/SolrIndexing?requestId=ad74080b-c01f-4907-a9ee-56791343d5a4</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49588">202</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="FRM - Verify if lob is added and reindexed to SOLR - ${formNumber}" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
&quot;appId&quot;:&quot;${clientId}&quot;,&#xd;
&quot;clientId&quot;:&quot;${clientId}&quot;,&#xd;
&quot;requestId&quot;:&quot;3r436y 4yyuh46676uy7&quot;,&#xd;
&quot;pageSize&quot;:&quot;1&quot;,&#xd;
&quot;searchOption&quot;:&quot;facsimile&quot;,&#xd;
&quot;searchScope&quot;:&quot;CLIENT&quot;,&#xd;
&quot;filterQuery&quot;:&quot;(contentType:\&quot;${contentType}\&quot;)&quot;,&#xd;
&quot;formNumber&quot;:&quot;${formNumber}&quot;&#xd;
}&#xd;
</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${server}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">pcr-rest-api/V4/Search/</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="jp@gc - JSON Path Extractor" enabled="true">
                  <stringProp name="VAR">jsonCount</stringProp>
                  <stringProp name="JSONPATH">$.numFound</stringProp>
                  <stringProp name="DEFAULT">NOT FOUND</stringProp>
                  <stringProp name="VARIABLE"></stringProp>
                  <stringProp name="SUBJECT">BODY</stringProp>
                </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
                <hashTree/>
                <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                  <stringProp name="BeanShellAssertion.query">long apiCount=Integer.parseInt(vars.get(&quot;jsonCount&quot;));


try{
	if (apiCount==2){
	Failure=false;
	log.info(&quot;Forms reindexed to SOLR&quot;);
	
	
	}
	else{
	Failure=true;
	FailureMessage=&quot;Forms didnt get reindexed&quot;;
	log.error(&quot;Bean Shell Assertion is Fail&quot;);
	}
}catch(Exception E){
	Failure=true;
	FailureMessage=&quot;Forms didnt get reindexed&quot;;
}
</stringProp>
                  <stringProp name="BeanShellAssertion.filename"></stringProp>
                  <stringProp name="BeanShellAssertion.parameters"></stringProp>
                  <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                </BeanShellAssertion>
                <hashTree/>
                <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
                  <stringProp name="ConstantTimer.delay">12000</stringProp>
                </ConstantTimer>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${contentType} - SOLR parent count" enabled="false">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="indent" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">on</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">indent</stringProp>
                    </elementProp>
                    <elementProp name="q" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">_nested_id:child%20AND%20formNumber:FEB12_04</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">q</stringProp>
                    </elementProp>
                    <elementProp name="wt" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">json</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">wt</stringProp>
                    </elementProp>
                    <elementProp name="rows" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">0</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">rows</stringProp>
                    </elementProp>
                    <elementProp name="fl" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">numFound</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">fl</stringProp>
                    </elementProp>
                    <elementProp name="&amp;omitHeader" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">true</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">&amp;omitHeader</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${solrServer}</stringProp>
                <stringProp name="HTTPSampler.port">8983</stringProp>
                <stringProp name="HTTPSampler.protocol">http</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">solr/${uatactiveSolrCollection}/select?</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="jp@gc - JSON Path Extractor" enabled="true">
                  <stringProp name="VAR">parentCount</stringProp>
                  <stringProp name="JSONPATH">$..response.numFound</stringProp>
                  <stringProp name="DEFAULT">No child records</stringProp>
                  <stringProp name="VARIABLE"></stringProp>
                  <stringProp name="SUBJECT">BODY</stringProp>
                </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
                <hashTree/>
                <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                  <stringProp name="BeanShellAssertion.query">long solrParentCount=Integer.parseInt(vars.get(&quot;parentCount_1&quot;));


try{
	if (solrParentCount==2){
	Failure=false;
	log.info(&quot;Forms reindexed to SOLR&quot;);
	
	
	}
	else{
	Failure=true;
	FailureMessage=&quot;Forms didnt get reindexed&quot;;
	log.error(&quot;Bean Shell Assertion is Fail&quot;);
	}
}catch(Exception E){
	Failure=true;
	FailureMessage=&quot;Forms didnt get reindexed&quot;;
}










</stringProp>
                  <stringProp name="BeanShellAssertion.filename"></stringProp>
                  <stringProp name="BeanShellAssertion.parameters"></stringProp>
                  <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                </BeanShellAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${contentType} - SOLR child count" enabled="false">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="indent" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">on</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">indent</stringProp>
                    </elementProp>
                    <elementProp name="q" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">_nested_id:child%20AND%20formNumber:FEB12_04</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">q</stringProp>
                    </elementProp>
                    <elementProp name="wt" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">json</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">wt</stringProp>
                    </elementProp>
                    <elementProp name="rows" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">0</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">rows</stringProp>
                    </elementProp>
                    <elementProp name="fl" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">numFound</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">fl</stringProp>
                    </elementProp>
                    <elementProp name="&amp;omitHeader" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">true</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">&amp;omitHeader</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${solrServer}</stringProp>
                <stringProp name="HTTPSampler.port">8983</stringProp>
                <stringProp name="HTTPSampler.protocol">http</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">solr/${uatactiveSolrCollection}/select?</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="jp@gc - JSON Path Extractor" enabled="true">
                  <stringProp name="VAR">childCount</stringProp>
                  <stringProp name="JSONPATH">$..response.numFound</stringProp>
                  <stringProp name="DEFAULT">No child records</stringProp>
                  <stringProp name="VARIABLE"></stringProp>
                  <stringProp name="SUBJECT">BODY</stringProp>
                </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
                <hashTree/>
                <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                  <stringProp name="BeanShellAssertion.query">long solrChildCount=Integer.parseInt(vars.get(&quot;childCount_1&quot;));


try{
	if (solrChildCount==2){
	Failure=false;
	log.info(&quot;Forms reindexed to SOLR&quot;);
	
	
	}
	else{
	Failure=true;
	FailureMessage=&quot;Forms didnt get reindexed&quot;;
	log.error(&quot;Bean Shell Assertion is Fail&quot;);
	}
}catch(Exception E){
	Failure=true;
	FailureMessage=&quot;Forms didnt get reindexed&quot;;
}










</stringProp>
                  <stringProp name="BeanShellAssertion.filename"></stringProp>
                  <stringProp name="BeanShellAssertion.parameters"></stringProp>
                  <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                </BeanShellAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${contentType} - Remove one lob for formNumber - ${formNumber}" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;id&quot;:&quot;5a8215954045ca19f81b3d5d&quot;,&#xd;
&quot;documentType&quot;:&quot;docx&quot;,&#xd;
&quot;doc_id&quot;:&quot;5a8215954045ca19f81b3d54&quot;,&#xd;
&quot;metadata_id&quot;:&quot;${metadataId}&quot;,&#xd;
&quot;title&quot;:&quot;FEB12_04&quot;,&#xd;
&quot;displayFormNumber&quot;:&quot;FEB12_04&quot;,&#xd;
&quot;client_id&quot;:&quot;${clientId}&quot;,&#xd;
&quot;formLobType&quot;:&quot;1917CL1&quot;,&#xd;
&quot;formNumber&quot;:&quot;${formNumber}&quot;,&#xd;
&quot;contentType&quot;:&quot;FRM&quot;,&#xd;
&quot;formsType&quot;:&quot;O&quot;,&#xd;
&quot;documentName&quot;:&quot;FEB12_04&quot;,&#xd;
&quot;categoryCode&quot;:&quot;00&quot;,&#xd;
&quot;formStatus&quot;:&quot;P&quot;,&#xd;
&quot;content&quot;:&quot;\n  \n \n  ENDORSEMENT NO. 816 PAGE 1 OF 1\n \n  CUSTOMER’S AUTO - SPECIAL REPAIR PROGRAM - DIRECT PRIMARY COVERAGE PART 300\n \n  UNICOVER V\n \n  \n\n  \n \n  THIS ENDORSEMENT CHANGES THE POLICY. PLEASE READ IT CAREFULLY.\n \n  \n \n  EXCLUSIONS\n \n  \n \n  WITH RESPECT TO CUSTOMER’S AUTOS OF SPECIAL REPAIR PROGRAMS, EXCLUSIONS (P) AND (Q) ARE DELETED.\n \n  \n \n  FOR THIS ENDORSEMENT ONLY, SPECIAL REPAIR PROGRAMS ARE DEFINED AS CONTRACTED PROGRAMS WHICH HAVE SPECIAL REQUIREMENTS.\n \n  \n \n  ALL OTHER TERMS, CONDITIONS, PROVISIONS AND EXCLUSIONS OF THIS POLICY REMAIN UNCHANGED. THE * INDICATES THE WORD IS DEFINED IN THE\n \n  COVERAGE PART TO WHICH THIS ENDORSEMENT APPLIES\n \n  \n \n  COPYRIGHT 2009 UNIVERSAL UNDERWRITERS INSURANCE COMPANY\n \n   \n \n  \n \n  EDITION 04-2009\n \n &quot;,&#xd;
&quot;cc_IsDeleted&quot;:&quot;N&quot;,&#xd;
&quot;cc_Library&quot;:&quot;Approved&quot;,&#xd;
&quot;cc_ModifiedDate&quot;:&quot;2018-02-12&quot;,&#xd;
&quot;cc_CreatedDate&quot;:&quot;2018-02-12&quot;,&#xd;
&quot;cc_WordCount&quot;:&quot;0&quot;,&#xd;
&quot;cc_SyllableCount&quot;:&quot;0&quot;,&#xd;
&quot;cc_SentenceCount&quot;:&quot;0&quot;,&#xd;
&quot;cc_FleschScore&quot;:&quot;0&quot;,&#xd;
&quot;cc_ProjectId&quot;:&quot;589de96bd8d5e40b54fea7fa&quot;,&#xd;
&quot;documentCreate_date&quot;:&quot;2018-02-12T00:00:00Z&quot;,&#xd;
&quot;documentModified_date&quot;:&quot;2018-02-12T00:00:00Z&quot;,&#xd;
&quot;documentAvailable_date&quot;:&quot;2018-02-12T00:00:00Z&quot;,&#xd;
&quot;applicability&quot;:[&#xd;
{&quot;lob&quot;:&quot;CA&quot;,&quot;withDrawnDate&quot;:&quot;2999-01-01T00:00:00Z&quot;}&#xd;
],&#xd;
&quot;uri&quot;:&quot;${clientId}/${contentType}/${metadataId}&quot;         &#xd;
}&#xd;
&#xd;
</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${server}</stringProp>
                <stringProp name="HTTPSampler.port">443</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">clientupdateapi/SolrIndexing?requestId=ad74080b-c01f-4907-a9ee-56791343d5a4</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49588">202</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="FRM - Verify if one lob is removed for formNumber - ${formNumber}" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
&quot;appId&quot;:&quot;${clientId}&quot;,&#xd;
&quot;clientId&quot;:&quot;${clientId}&quot;,&#xd;
&quot;requestId&quot;:&quot;3r436y 4yyuh46676uy7&quot;,&#xd;
&quot;pageSize&quot;:&quot;1&quot;,&#xd;
&quot;searchOption&quot;:&quot;facsimile&quot;,&#xd;
&quot;searchScope&quot;:&quot;CLIENT&quot;,&#xd;
&quot;filterQuery&quot;:&quot;(contentType:\&quot;${contentType}\&quot;)&quot;,&#xd;
&quot;formNumber&quot;:&quot;${formNumber}&quot;&#xd;
}&#xd;
</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${server}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">pcr-rest-api/V4/Search/</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="jp@gc - JSON Path Extractor" enabled="true">
                  <stringProp name="VAR">jsonCount</stringProp>
                  <stringProp name="JSONPATH">$.numFound</stringProp>
                  <stringProp name="DEFAULT">NOT FOUND</stringProp>
                  <stringProp name="VARIABLE"></stringProp>
                  <stringProp name="SUBJECT">BODY</stringProp>
                </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
                <hashTree/>
                <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                  <stringProp name="BeanShellAssertion.query">long apiCount=Integer.parseInt(vars.get(&quot;jsonCount&quot;));


try{
	if (apiCount==1){
	Failure=false;
	log.info(&quot;Forms reindexed to SOLR&quot;);
	
	
	}
	else{
	Failure=true;
	FailureMessage=&quot;Forms didnt get reindexed&quot;;
	log.error(&quot;Bean Shell Assertion is Fail&quot;);
	}
}catch(Exception E){
	Failure=true;
	FailureMessage=&quot;Forms didnt get reindexed&quot;;
}
</stringProp>
                  <stringProp name="BeanShellAssertion.filename"></stringProp>
                  <stringProp name="BeanShellAssertion.parameters"></stringProp>
                  <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                </BeanShellAssertion>
                <hashTree/>
                <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
                  <stringProp name="ConstantTimer.delay">15000</stringProp>
                </ConstantTimer>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${contentType} - SOLR parent count" enabled="false">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="indent" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">on</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">indent</stringProp>
                    </elementProp>
                    <elementProp name="q" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">_nested_id:child%20AND%20formNumber:FEB12_04</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">q</stringProp>
                    </elementProp>
                    <elementProp name="wt" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">json</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">wt</stringProp>
                    </elementProp>
                    <elementProp name="rows" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">0</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">rows</stringProp>
                    </elementProp>
                    <elementProp name="fl" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">numFound</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">fl</stringProp>
                    </elementProp>
                    <elementProp name="&amp;omitHeader" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">true</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">&amp;omitHeader</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${solrServer}</stringProp>
                <stringProp name="HTTPSampler.port">8983</stringProp>
                <stringProp name="HTTPSampler.protocol">http</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">solr/${uatactiveSolrCollection}/select?</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="jp@gc - JSON Path Extractor" enabled="true">
                  <stringProp name="VAR">parentCount</stringProp>
                  <stringProp name="JSONPATH">$..response.numFound</stringProp>
                  <stringProp name="DEFAULT">No child records</stringProp>
                  <stringProp name="VARIABLE"></stringProp>
                  <stringProp name="SUBJECT">BODY</stringProp>
                </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
                <hashTree/>
                <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                  <stringProp name="BeanShellAssertion.query">long solrParentCount=Integer.parseInt(vars.get(&quot;parentCount_1&quot;));


try{
	if (solrParentCount==1){
	Failure=false;
	log.info(&quot;Forms reindexed to SOLR&quot;);
	
	
	}
	else{
	Failure=true;
	FailureMessage=&quot;Forms didnt get reindexed&quot;;
	log.error(&quot;Bean Shell Assertion is Fail&quot;);
	}
}catch(Exception E){
	Failure=true;
	FailureMessage=&quot;Forms didnt get reindexed&quot;;
}










</stringProp>
                  <stringProp name="BeanShellAssertion.filename"></stringProp>
                  <stringProp name="BeanShellAssertion.parameters"></stringProp>
                  <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                </BeanShellAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${contentType} - SOLR child count" enabled="false">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="indent" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">on</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">indent</stringProp>
                    </elementProp>
                    <elementProp name="q" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">_nested_id:child%20AND%20formNumber:FEB12_04</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">q</stringProp>
                    </elementProp>
                    <elementProp name="wt" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">json</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">wt</stringProp>
                    </elementProp>
                    <elementProp name="rows" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">0</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">rows</stringProp>
                    </elementProp>
                    <elementProp name="fl" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">numFound</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">fl</stringProp>
                    </elementProp>
                    <elementProp name="&amp;omitHeader" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">true</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">&amp;omitHeader</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${solrServer}</stringProp>
                <stringProp name="HTTPSampler.port">8983</stringProp>
                <stringProp name="HTTPSampler.protocol">http</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">solr/${uatactiveSolrCollection}/select?</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="jp@gc - JSON Path Extractor" enabled="true">
                  <stringProp name="VAR">childCount</stringProp>
                  <stringProp name="JSONPATH">$..response.numFound</stringProp>
                  <stringProp name="DEFAULT">No child records</stringProp>
                  <stringProp name="VARIABLE"></stringProp>
                  <stringProp name="SUBJECT">BODY</stringProp>
                </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
                <hashTree/>
                <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                  <stringProp name="BeanShellAssertion.query">long solrChildCount=Integer.parseInt(vars.get(&quot;childCount_1&quot;));


try{
	if (solrChildCount==1){
	Failure=false;
	log.info(&quot;Forms reindexed to SOLR&quot;);
	
	
	}
	else{
	Failure=true;
	FailureMessage=&quot;Forms didnt get reindexed&quot;;
	log.error(&quot;Bean Shell Assertion is Fail&quot;);
	}
}catch(Exception E){
	Failure=true;
	FailureMessage=&quot;Forms didnt get reindexed&quot;;
}










</stringProp>
                  <stringProp name="BeanShellAssertion.filename"></stringProp>
                  <stringProp name="BeanShellAssertion.parameters"></stringProp>
                  <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                </BeanShellAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${contentType} - Change metadata for formNumber- ${formNumber}" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;id&quot;:&quot;5a8215954045ca19f81b3d5d&quot;,&#xd;
&quot;documentType&quot;:&quot;docx&quot;,&#xd;
&quot;doc_id&quot;:&quot;5a8215954045ca19f81b3d54&quot;,&#xd;
&quot;metadata_id&quot;:&quot;${metadataId}&quot;,&#xd;
&quot;title&quot;:&quot;Changing the title&quot;,&#xd;
&quot;displayFormNumber&quot;:&quot;FEB12_04&quot;,&#xd;
&quot;client_id&quot;:&quot;${clientId}&quot;,&#xd;
&quot;formLobType&quot;:&quot;1917CL1&quot;,&#xd;
&quot;formNumber&quot;:&quot;${formNumber}&quot;,&#xd;
&quot;contentType&quot;:&quot;FRM&quot;,&#xd;
&quot;formsType&quot;:&quot;O&quot;,&#xd;
&quot;documentName&quot;:&quot;FEB12_04&quot;,&#xd;
&quot;categoryCode&quot;:&quot;00&quot;,&#xd;
&quot;formStatus&quot;:&quot;P&quot;,&#xd;
&quot;content&quot;:&quot;\n  \n \n  ENDORSEMENT NO. 816 PAGE 1 OF 1\n \n  CUSTOMER’S AUTO - SPECIAL REPAIR PROGRAM - DIRECT PRIMARY COVERAGE PART 300\n \n  UNICOVER V\n \n  \n\n  \n \n  THIS ENDORSEMENT CHANGES THE POLICY. PLEASE READ IT CAREFULLY.\n \n  \n \n  EXCLUSIONS\n \n  \n \n  WITH RESPECT TO CUSTOMER’S AUTOS OF SPECIAL REPAIR PROGRAMS, EXCLUSIONS (P) AND (Q) ARE DELETED.\n \n  \n \n  FOR THIS ENDORSEMENT ONLY, SPECIAL REPAIR PROGRAMS ARE DEFINED AS CONTRACTED PROGRAMS WHICH HAVE SPECIAL REQUIREMENTS.\n \n  \n \n  ALL OTHER TERMS, CONDITIONS, PROVISIONS AND EXCLUSIONS OF THIS POLICY REMAIN UNCHANGED. THE * INDICATES THE WORD IS DEFINED IN THE\n \n  COVERAGE PART TO WHICH THIS ENDORSEMENT APPLIES\n \n  \n \n  COPYRIGHT 2009 UNIVERSAL UNDERWRITERS INSURANCE COMPANY\n \n   \n \n  \n \n  EDITION 04-2009\n \n &quot;,&#xd;
&quot;cc_IsDeleted&quot;:&quot;N&quot;,&#xd;
&quot;cc_Library&quot;:&quot;Approved&quot;,&#xd;
&quot;cc_ModifiedDate&quot;:&quot;2018-02-12&quot;,&#xd;
&quot;cc_CreatedDate&quot;:&quot;2018-02-12&quot;,&#xd;
&quot;cc_WordCount&quot;:&quot;0&quot;,&#xd;
&quot;cc_SyllableCount&quot;:&quot;0&quot;,&#xd;
&quot;cc_SentenceCount&quot;:&quot;0&quot;,&#xd;
&quot;cc_FleschScore&quot;:&quot;0&quot;,&#xd;
&quot;cc_ProjectId&quot;:&quot;589de96bd8d5e40b54fea7fa&quot;,&#xd;
&quot;documentCreate_date&quot;:&quot;2018-02-12T00:00:00Z&quot;,&#xd;
&quot;documentModified_date&quot;:&quot;2018-02-12T00:00:00Z&quot;,&#xd;
&quot;documentAvailable_date&quot;:&quot;2018-02-12T00:00:00Z&quot;,&#xd;
&quot;applicability&quot;:[&#xd;
{&quot;lob&quot;:&quot;CA&quot;,&quot;withDrawnDate&quot;:&quot;2999-01-01T00:00:00Z&quot;}&#xd;
],&#xd;
&quot;uri&quot;:&quot;${clientId}/${contentType}/${metadataId}&quot;         &#xd;
}&#xd;
&#xd;
</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${server}</stringProp>
                <stringProp name="HTTPSampler.port">443</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">clientupdateapi/SolrIndexing?requestId=ad74080b-c01f-4907-a9ee-56791343d5a4</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49588">202</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="FRM - Verify if metadata is changed and reindexed to SOLR for ${formNumber}" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
&quot;appId&quot;:&quot;${clientId}&quot;,&#xd;
&quot;clientId&quot;:&quot;${clientId}&quot;,&#xd;
&quot;requestId&quot;:&quot;3r436y 4yyuh46676uy7&quot;,&#xd;
&quot;pageSize&quot;:&quot;1&quot;,&#xd;
&quot;searchOption&quot;:&quot;facsimile&quot;,&#xd;
&quot;searchScope&quot;:&quot;CLIENT&quot;,&#xd;
&quot;filterQuery&quot;:&quot;(contentType:\&quot;${contentType}\&quot;)&quot;,&#xd;
&quot;formNumber&quot;:&quot;${formNumber}&quot;&#xd;
}&#xd;
</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${server}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">pcr-rest-api/V4/Search/</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="jp@gc - JSON Path Extractor" enabled="true">
                  <stringProp name="VAR">jsonCount</stringProp>
                  <stringProp name="JSONPATH">$.numFound</stringProp>
                  <stringProp name="DEFAULT">NOT FOUND</stringProp>
                  <stringProp name="VARIABLE"></stringProp>
                  <stringProp name="SUBJECT">BODY</stringProp>
                </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
                <hashTree/>
                <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="jp@gc - JSON Path Extractor" enabled="true">
                  <stringProp name="VAR">jsontitle</stringProp>
                  <stringProp name="JSONPATH">$.docs[*].title</stringProp>
                  <stringProp name="DEFAULT">NOT FOUND</stringProp>
                  <stringProp name="VARIABLE"></stringProp>
                  <stringProp name="SUBJECT">BODY</stringProp>
                </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
                <hashTree/>
                <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                  <stringProp name="BeanShellAssertion.query">long apiCount=Integer.parseInt(vars.get(&quot;jsonCount&quot;));
String title=vars.get(&quot;jsontitle_1&quot;);


try{
	if (apiCount==1 &amp;&amp; (title.equals(&quot;Changing the title&quot;))){
	Failure=false;
	log.info(&quot;Forms reindexed to SOLR&quot;);
	
	
	}
	else{
	Failure=true;
	FailureMessage=&quot;Forms didnt get reindexed&quot;;
	log.error(&quot;Bean Shell Assertion is Fail&quot;);
	}
}catch(Exception E){
	Failure=true;
	FailureMessage=&quot;Some exception occurred.&quot;;
}










</stringProp>
                  <stringProp name="BeanShellAssertion.filename"></stringProp>
                  <stringProp name="BeanShellAssertion.parameters"></stringProp>
                  <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                </BeanShellAssertion>
                <hashTree/>
                <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
                  <stringProp name="ConstantTimer.delay">12000</stringProp>
                </ConstantTimer>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${contentType} -Delete indexed data for form: ${formNumber}" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;clientId&quot;:&quot;${clientId}&quot;,&quot;requestId&quot;:&quot;30246725-a700-4bef-a8a3-e639156f33bb&quot;,&quot;metadataId&quot;:&quot;${metadataId}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${server}</stringProp>
                <stringProp name="HTTPSampler.port">443</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">clientupdateapi/deleteClientData</stringProp>
                <stringProp name="HTTPSampler.method">DELETE</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="FRM - Verify if created form is deleted for - ${formNumber}" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
&quot;appId&quot;:&quot;${clientId}&quot;,&#xd;
&quot;clientId&quot;:&quot;${clientId}&quot;,&#xd;
&quot;requestId&quot;:&quot;3r436y 4yyuh46676uy7&quot;,&#xd;
&quot;pageSize&quot;:&quot;1&quot;,&#xd;
&quot;searchOption&quot;:&quot;facsimile&quot;,&#xd;
&quot;searchScope&quot;:&quot;ISOANDCLIENT&quot;,&#xd;
&quot;filterQuery&quot;:&quot;(contentType:\&quot;${Contenttype}\&quot;)&quot;,&#xd;
&quot;formNumber&quot;:&quot;${formNumber}&quot;&#xd;
}&#xd;
</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${server}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">pcr-rest-api/V4/Search/</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="jp@gc - JSON Path Extractor" enabled="true">
                  <stringProp name="VAR">jsonCount</stringProp>
                  <stringProp name="JSONPATH">$.numFound</stringProp>
                  <stringProp name="DEFAULT">0</stringProp>
                  <stringProp name="VARIABLE"></stringProp>
                  <stringProp name="SUBJECT">BODY</stringProp>
                </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
                <hashTree/>
                <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                  <stringProp name="BeanShellAssertion.query">long solrCount=Integer.parseInt(vars.get(&quot;jsonCount&quot;));


try{
	if (solrCount==0){
	Failure=false;
	log.info(&quot;Form deleted successfully.&quot;);
	
	
	}
	else{
	Failure=true;
	FailureMessage=&quot;Form didnt get deleted&quot;;
	log.error(&quot;Bean Shell Assertion is Fail&quot;);
	}
}catch(Exception E){
	Failure=true;
	FailureMessage=&quot;Some exception occurred.&quot;;
}










</stringProp>
                  <stringProp name="BeanShellAssertion.filename"></stringProp>
                  <stringProp name="BeanShellAssertion.parameters"></stringProp>
                  <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                </BeanShellAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller_ANDORNOT" enabled="true">
              <stringProp name="IfController.condition">&quot;${method}&quot;.equalsIgnoreCase(&quot;ANDORNOT&quot;)</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${contentType} -Index client form - ${formNumber}" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;id&quot;:&quot;5a8215954045ca19f81b3d5d&quot;,&#xd;
&quot;documentType&quot;:&quot;docx&quot;,&#xd;
&quot;doc_id&quot;:&quot;5a8215954045ca19f81b3d54&quot;,&#xd;
&quot;metadata_id&quot;:&quot;${metadataId}&quot;,&#xd;
&quot;title&quot;:&quot;FEB12_04&quot;,&#xd;
&quot;displayFormNumber&quot;:&quot;${formNumber}&quot;,&#xd;
&quot;client_id&quot;:&quot;${clientId}&quot;,&#xd;
&quot;formLobType&quot;:&quot;1917CL1&quot;,&#xd;
&quot;formNumber&quot;:&quot;${formNumber}&quot;,&#xd;
&quot;contentType&quot;:&quot;FRM&quot;,&#xd;
&quot;formsType&quot;:&quot;O&quot;,&#xd;
&quot;documentName&quot;:&quot;${formNumber}&quot;,&#xd;
&quot;categoryCode&quot;:&quot;00&quot;,&#xd;
&quot;formStatus&quot;:&quot;P&quot;,&#xd;
&quot;content&quot;:&quot;\n  \n \n  ENDORSEMENT NO. 816 PAGE 1 OF 1\n \n  CUSTOMER’S AUTO - SPECIAL REPAIR PROGRAM - DIRECT PRIMARY COVERAGE PART 300\n \n  UNICOVER V\n \n  \n\n  \n \n  THIS ENDORSEMENT CHANGES THE POLICY. PLEASE READ IT CAREFULLY.\n \n  \n \n  EXCLUSIONS\n \n  \n \n  WITH RESPECT TO CUSTOMER’S AUTOS OF SPECIAL REPAIR PROGRAMS, EXCLUSIONS (P) AND (Q) ARE DELETED.\n \n  \n \n  FOR THIS ENDORSEMENT ONLY, SPECIAL REPAIR PROGRAMS ARE DEFINED AS CONTRACTED PROGRAMS WHICH HAVE SPECIAL REQUIREMENTS.\n \n  \n \n  ALL OTHER TERMS, CONDITIONS, PROVISIONS AND EXCLUSIONS OF THIS POLICY REMAIN UNCHANGED. THE * INDICATES THE WORD IS DEFINED IN THE\n \n  COVERAGE PART TO WHICH THIS ENDORSEMENT APPLIES\n \n  \n \n  COPYRIGHT 2009 UNIVERSAL UNDERWRITERS INSURANCE COMPANY\n \n   \n \n  \n \n  EDITION 04-2009\n \n &quot;,&#xd;
&quot;cc_IsDeleted&quot;:&quot;N&quot;,&#xd;
&quot;cc_Library&quot;:&quot;Approved&quot;,&#xd;
&quot;cc_ModifiedDate&quot;:&quot;2018-02-12&quot;,&#xd;
&quot;cc_CreatedDate&quot;:&quot;2018-02-12&quot;,&#xd;
&quot;cc_WordCount&quot;:&quot;0&quot;,&#xd;
&quot;cc_SyllableCount&quot;:&quot;0&quot;,&#xd;
&quot;cc_SentenceCount&quot;:&quot;0&quot;,&#xd;
&quot;cc_FleschScore&quot;:&quot;0&quot;,&#xd;
&quot;cc_ProjectId&quot;:&quot;589de96bd8d5e40b54fea7fa&quot;,&#xd;
&quot;documentCreate_date&quot;:&quot;2018-02-12T00:00:00Z&quot;,&#xd;
&quot;documentModified_date&quot;:&quot;2018-02-12T00:00:00Z&quot;,&#xd;
&quot;documentAvailable_date&quot;:&quot;2018-02-12T00:00:00Z&quot;,&#xd;
&quot;applicability&quot;:[&#xd;
{&quot;lob&quot;:&quot;PA&quot;,&quot;withDrawnDate&quot;:&quot;2999-01-01T00:00:00Z&quot;}&#xd;
],&#xd;
&quot;uri&quot;:&quot;${clientId}/${contentType}/${metadataId}&quot;         &#xd;
}&#xd;
&#xd;
</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${server}</stringProp>
                <stringProp name="HTTPSampler.port">443</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">clientupdateapi/SolrIndexing?requestId=ad74080b-c01f-4907-a9ee-56791343d5a4</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49588">202</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="FRM - Search- ${formNumber}" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
&quot;appId&quot;:&quot;${clientId}&quot;,&#xd;
&quot;clientId&quot;:&quot;${clientId}&quot;,&#xd;
&quot;requestId&quot;:&quot;3r436y 4yyuh46676uy7&quot;,&#xd;
&quot;pageSize&quot;:&quot;1&quot;,&#xd;
&quot;searchOption&quot;:&quot;facsimile&quot;,&#xd;
&quot;searchScope&quot;:&quot;CLIENT&quot;,&#xd;
&quot;filterQuery&quot;:&quot;(contentType:\&quot;${contentType}\&quot;)&quot;,&#xd;
&quot;searchText&quot;:&quot;\&quot;${formNumber}\&quot;&quot;&#xd;
}&#xd;
</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${server}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">pcr-rest-api/V4/Search/</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="jp@gc - JSON Path Extractor" enabled="true">
                  <stringProp name="VAR">jsonFormNumber</stringProp>
                  <stringProp name="JSONPATH">$.docs[*].formNumber</stringProp>
                  <stringProp name="DEFAULT">NOT FOUND</stringProp>
                  <stringProp name="VARIABLE"></stringProp>
                  <stringProp name="SUBJECT">BODY</stringProp>
                </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
                <hashTree/>
                <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                  <stringProp name="BeanShellAssertion.query">String responseformNumber=vars.get(&quot;jsonFormNumber_1&quot;);

String csvformNumber=&quot;${formNumber}&quot;;
try{
	if (responseformNumber.equals(csvformNumber)){
	Failure=false;
	
	
	}
	else{
	Failure=true;
	FailureMessage=&quot;Expected FormNumber not found&quot;;
	log.error(&quot;Bean Shell Assertion is Fail&quot;);
	}
	}catch(Exception E){
	Failure=true;
	FailureMessage=&quot;Unexpected error&quot;;
}










</stringProp>
                  <stringProp name="BeanShellAssertion.filename"></stringProp>
                  <stringProp name="BeanShellAssertion.parameters"></stringProp>
                  <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                </BeanShellAssertion>
                <hashTree/>
                <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
                  <stringProp name="ConstantTimer.delay">12000</stringProp>
                </ConstantTimer>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${contentType} -Delete indexed data -${formNumber}" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;clientId&quot;:&quot;${clientId}&quot;,&quot;requestId&quot;:&quot;30246725-a700-4bef-a8a3-e639156f33bb&quot;,&quot;metadataId&quot;:&quot;${metadataId}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${server}</stringProp>
                <stringProp name="HTTPSampler.port">443</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">clientupdateapi/deleteClientData</stringProp>
                <stringProp name="HTTPSampler.method">DELETE</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="FRM - Verify if formNumber: ${formNumber}  is deleted" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
&quot;appId&quot;:&quot;${clientId}&quot;,&#xd;
&quot;clientId&quot;:&quot;${clientId}&quot;,&#xd;
&quot;requestId&quot;:&quot;3r436y 4yyuh46676uy7&quot;,&#xd;
&quot;pageSize&quot;:&quot;1&quot;,&#xd;
&quot;searchOption&quot;:&quot;facsimile&quot;,&#xd;
&quot;searchScope&quot;:&quot;ISOANDCLIENT&quot;,&#xd;
&quot;filterQuery&quot;:&quot;(contentType:\&quot;${Contenttype}\&quot;)&quot;,&#xd;
&quot;searchText&quot;:&quot;\&quot;${formNumber}\&quot;&quot;&#xd;
}&#xd;
</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${server}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">pcr-rest-api/V4/Search/</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="jp@gc - JSON Path Extractor" enabled="true">
                  <stringProp name="VAR">jsonCount</stringProp>
                  <stringProp name="JSONPATH">$.numFound</stringProp>
                  <stringProp name="DEFAULT">0</stringProp>
                  <stringProp name="VARIABLE"></stringProp>
                  <stringProp name="SUBJECT">BODY</stringProp>
                </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
                <hashTree/>
                <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                  <stringProp name="BeanShellAssertion.query">long solrCount=Integer.parseInt(vars.get(&quot;jsonCount&quot;));


try{
	if (solrCount==0){
	Failure=false;
	log.info(&quot;Form deleted successfully.&quot;);
	
	
	}
	else{
	Failure=true;
	FailureMessage=&quot;Form didnt get deleted&quot;;
	log.error(&quot;Bean Shell Assertion is Fail&quot;);
	}
}catch(Exception E){
	Failure=true;
	FailureMessage=&quot;Some exception occurred.&quot;;
}










</stringProp>
                  <stringProp name="BeanShellAssertion.filename"></stringProp>
                  <stringProp name="BeanShellAssertion.parameters"></stringProp>
                  <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                </BeanShellAssertion>
                <hashTree/>
              </hashTree>
              <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="false">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugSampler>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller_specialChars" enabled="true">
              <stringProp name="IfController.condition">&quot;${method}&quot;.equalsIgnoreCase(&quot;specialChars&quot;)</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${contentType} -Index client form-${formNumber}" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;id&quot;:&quot;5a8215954045ca19f81b3d5d&quot;,&#xd;
&quot;documentType&quot;:&quot;docx&quot;,&#xd;
&quot;doc_id&quot;:&quot;5a8215954045ca19f81b3d54&quot;,&#xd;
&quot;metadata_id&quot;:&quot;${metadataId}&quot;,&#xd;
&quot;title&quot;:&quot;${OtherValues}&quot;,&#xd;
&quot;displayFormNumber&quot;:&quot;${formNumber}&quot;,&#xd;
&quot;client_id&quot;:&quot;${clientId}&quot;,&#xd;
&quot;formLobType&quot;:&quot;1917CL1&quot;,&#xd;
&quot;formNumber&quot;:&quot;${formNumber}&quot;,&#xd;
&quot;contentType&quot;:&quot;FRM&quot;,&#xd;
&quot;formsType&quot;:&quot;O&quot;,&#xd;
&quot;documentName&quot;:&quot;${formNumber}&quot;,&#xd;
&quot;categoryCode&quot;:&quot;00&quot;,&#xd;
&quot;formStatus&quot;:&quot;P&quot;,&#xd;
&quot;content&quot;:&quot;\n  \n \n  ENDORSEMENT NO. 816 PAGE 1 OF 1\n \n  CUSTOMER’S AUTO - SPECIAL REPAIR PROGRAM - DIRECT PRIMARY COVERAGE PART 300\n \n  UNICOVER V\n \n  \n\n  \n \n  THIS ENDORSEMENT CHANGES THE POLICY. PLEASE READ IT CAREFULLY.\n \n  \n \n  EXCLUSIONS\n \n  \n \n  WITH RESPECT TO CUSTOMER’S AUTOS OF SPECIAL REPAIR PROGRAMS, EXCLUSIONS (P) AND (Q) ARE DELETED.\n \n  \n \n  FOR THIS ENDORSEMENT ONLY, SPECIAL REPAIR PROGRAMS ARE DEFINED AS CONTRACTED PROGRAMS WHICH HAVE SPECIAL REQUIREMENTS.\n \n  \n \n  ALL OTHER TERMS, CONDITIONS, PROVISIONS AND EXCLUSIONS OF THIS POLICY REMAIN UNCHANGED. THE * INDICATES THE WORD IS DEFINED IN THE\n \n  COVERAGE PART TO WHICH THIS ENDORSEMENT APPLIES\n \n  \n \n  COPYRIGHT 2009 UNIVERSAL UNDERWRITERS INSURANCE COMPANY\n \n   \n \n  \n \n  EDITION 04-2009\n \n &quot;,&#xd;
&quot;cc_IsDeleted&quot;:&quot;N&quot;,&#xd;
&quot;cc_Library&quot;:&quot;Approved&quot;,&#xd;
&quot;cc_ModifiedDate&quot;:&quot;2018-02-12&quot;,&#xd;
&quot;cc_CreatedDate&quot;:&quot;2018-02-12&quot;,&#xd;
&quot;cc_WordCount&quot;:&quot;0&quot;,&#xd;
&quot;cc_SyllableCount&quot;:&quot;0&quot;,&#xd;
&quot;cc_SentenceCount&quot;:&quot;0&quot;,&#xd;
&quot;cc_FleschScore&quot;:&quot;0&quot;,&#xd;
&quot;cc_ProjectId&quot;:&quot;589de96bd8d5e40b54fea7fa&quot;,&#xd;
&quot;documentCreate_date&quot;:&quot;2018-02-12T00:00:00Z&quot;,&#xd;
&quot;documentModified_date&quot;:&quot;2018-02-12T00:00:00Z&quot;,&#xd;
&quot;documentAvailable_date&quot;:&quot;2018-02-12T00:00:00Z&quot;,&#xd;
&quot;applicability&quot;:[&#xd;
{&quot;lob&quot;:&quot;PA&quot;,&quot;withDrawnDate&quot;:&quot;2999-01-01T00:00:00Z&quot;}&#xd;
],&#xd;
&quot;uri&quot;:&quot;${clientId}/${contentType}/${metadataId}&quot;         &#xd;
}&#xd;
&#xd;
</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${server}</stringProp>
                <stringProp name="HTTPSampler.port">443</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">clientupdateapi/SolrIndexing?requestId=ad74080b-c01f-4907-a9ee-56791343d5a4</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49588">202</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="FRM - Search- ${formNumber}" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
&quot;appId&quot;:&quot;${clientId}&quot;,&#xd;
&quot;clientId&quot;:&quot;${clientId}&quot;,&#xd;
&quot;requestId&quot;:&quot;3r436y 4yyuh46676uy7&quot;,&#xd;
&quot;pageSize&quot;:&quot;1&quot;,&#xd;
&quot;searchOption&quot;:&quot;facsimile&quot;,&#xd;
&quot;searchScope&quot;:&quot;CLIENT&quot;,&#xd;
&quot;filterQuery&quot;:&quot;(contentType:\&quot;${contentType}\&quot;)&quot;,&#xd;
&quot;searchText&quot;:&quot;\&quot;${searchText1}\&quot;&quot;&#xd;
}&#xd;
</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${server}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">pcr-rest-api/V4/Search/</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="jp@gc - JSON Path Extractor" enabled="true">
                  <stringProp name="VAR">jsonFormNumber</stringProp>
                  <stringProp name="JSONPATH">$.docs[*].formNumber</stringProp>
                  <stringProp name="DEFAULT">NOT FOUND</stringProp>
                  <stringProp name="VARIABLE"></stringProp>
                  <stringProp name="SUBJECT">BODY</stringProp>
                </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
                <hashTree/>
                <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                  <stringProp name="BeanShellAssertion.query">String responseformNumber=vars.get(&quot;jsonFormNumber_1&quot;);

String csvExpectedVal=&quot;${expectedValue}&quot;;
try{
	if (responseformNumber.equals(csvExpectedVal)){
	Failure=false;
	
	
	}
	else{
	Failure=true;
	FailureMessage=&quot;Expected FormNumber not found&quot;;
	log.error(&quot;Bean Shell Assertion is Fail&quot;);
	}
	}catch(Exception E){
	Failure=true;
	FailureMessage=&quot;Unexpected error&quot;;
}










</stringProp>
                  <stringProp name="BeanShellAssertion.filename"></stringProp>
                  <stringProp name="BeanShellAssertion.parameters"></stringProp>
                  <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                </BeanShellAssertion>
                <hashTree/>
                <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
                  <stringProp name="ConstantTimer.delay">12000</stringProp>
                </ConstantTimer>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${contentType} -Delete indexed data- ${formNumber}" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;clientId&quot;:&quot;${clientId}&quot;,&quot;requestId&quot;:&quot;30246725-a700-4bef-a8a3-e639156f33bb&quot;,&quot;metadataId&quot;:&quot;${metadataId}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${server}</stringProp>
                <stringProp name="HTTPSampler.port">443</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">clientupdateapi/deleteClientData</stringProp>
                <stringProp name="HTTPSampler.method">DELETE</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="false">
                  <stringProp name="ConstantTimer.delay"></stringProp>
                </ConstantTimer>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="FRM - Verify if created form is deleted- ${formNumber}" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
&quot;appId&quot;:&quot;${clientId}&quot;,&#xd;
&quot;clientId&quot;:&quot;${clientId}&quot;,&#xd;
&quot;requestId&quot;:&quot;3r436y 4yyuh46676uy7&quot;,&#xd;
&quot;pageSize&quot;:&quot;1&quot;,&#xd;
&quot;searchOption&quot;:&quot;facsimile&quot;,&#xd;
&quot;searchScope&quot;:&quot;ISOANDCLIENT&quot;,&#xd;
&quot;filterQuery&quot;:&quot;(contentType:\&quot;${Contenttype}\&quot;)&quot;,&#xd;
&quot;searchText&quot;:&quot;\&quot;${formNumber}\&quot;&quot;&#xd;
}&#xd;
</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${server}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">pcr-rest-api/V4/Search/</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="jp@gc - JSON Path Extractor" enabled="true">
                  <stringProp name="VAR">jsonCount</stringProp>
                  <stringProp name="JSONPATH">$.numFound</stringProp>
                  <stringProp name="DEFAULT">0</stringProp>
                  <stringProp name="VARIABLE"></stringProp>
                  <stringProp name="SUBJECT">BODY</stringProp>
                </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
                <hashTree/>
                <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                  <stringProp name="BeanShellAssertion.query">long solrCount=Integer.parseInt(vars.get(&quot;jsonCount&quot;));


try{
	if (solrCount==0){
	Failure=false;
	log.info(&quot;Form deleted successfully.&quot;);
	
	
	}
	else{
	Failure=true;
	FailureMessage=&quot;Form didnt get deleted&quot;;
	log.error(&quot;Bean Shell Assertion is Fail&quot;);
	}
}catch(Exception E){
	Failure=true;
	FailureMessage=&quot;Some exception occurred.&quot;;
}










</stringProp>
                  <stringProp name="BeanShellAssertion.filename"></stringProp>
                  <stringProp name="BeanShellAssertion.parameters"></stringProp>
                  <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                </BeanShellAssertion>
                <hashTree/>
              </hashTree>
              <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="false">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugSampler>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
    </hashTree>
    <WorkBench guiclass="WorkBenchGui" testclass="WorkBench" testname="WorkBench" enabled="true">
      <boolProp name="WorkBench.save">true</boolProp>
    </WorkBench>
    <hashTree/>
  </hashTree>
</jmeterTestPlan>
