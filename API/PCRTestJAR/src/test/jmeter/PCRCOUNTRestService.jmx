<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="3.2" jmeter="3.3 r1808647">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1514014914000</longProp>
        <longProp name="ThreadGroup.end_time">1514014914000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="uatserver" elementType="Argument">
              <stringProp name="Argument.name">uatserver</stringProp>
              <stringProp name="Argument.value">pcr-uat.iso.com</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="csv" elementType="Argument">
              <stringProp name="Argument.name">csv</stringProp>
              <stringProp name="Argument.value">${__property(csvSource,,C://Users//i20918//Desktop//PCR//pcr_automation//pcr_test//develop//pcr.test//API//PCRTestJAR//src//test//resources)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.desc">C://Users//i20918//Desktop//PCR//APITestData</stringProp>
            </elementProp>
            <elementProp name="Environment" elementType="Argument">
              <stringProp name="Argument.name">Environment</stringProp>
              <stringProp name="Argument.value">${__property(Server,,uat)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="stgserver" elementType="Argument">
              <stringProp name="Argument.name">stgserver</stringProp>
              <stringProp name="Argument.value">staging-content.iso.com</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="prodserver" elementType="Argument">
              <stringProp name="Argument.name">prodserver</stringProp>
              <stringProp name="Argument.value">pcr-content.iso.com</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="uatSolr" elementType="Argument">
              <stringProp name="Argument.name">uatSolr</stringProp>
              <stringProp name="Argument.value">10.93.204.24</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="stagingSolr" elementType="Argument">
              <stringProp name="Argument.name">stagingSolr</stringProp>
              <stringProp name="Argument.value">0931-pcrslr-u01.veriska.local</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="prodSolr" elementType="Argument">
              <stringProp name="Argument.name">prodSolr</stringProp>
              <stringProp name="Argument.value">10.53.196.25</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="devserver" elementType="Argument">
              <stringProp name="Argument.name">devserver</stringProp>
              <stringProp name="Argument.value">pcr-uat.iso.com</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="devSolr" elementType="Argument">
              <stringProp name="Argument.name">devSolr</stringProp>
              <stringProp name="Argument.value">10.93.204.103</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Content-Type</stringProp>
              <stringProp name="Header.value">application/json</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="false">
          <stringProp name="BeanShellSampler.query">
		
		if(vars.get(&quot;Environment&quot;).equalsIgnoreCase(&quot;prod&quot;))
		{
			vars.put(&quot;server&quot;,vars.get(&quot;prodserver&quot;));
			
		}
		else if(vars.get(&quot;Environment&quot;).equalsIgnoreCase(&quot;Staging&quot;))
		{
			vars.put(&quot;server&quot;,vars.get(&quot;stgserver&quot;));
			
   		     //MongoCredential abc = MongoCredential.createScramSha1Credential(&quot;PIDPCRBPA&quot;,&quot;admin&quot;,&apos;pRU6Refe\$&apos;.toCharArray());
			vars.put(&quot;Mongodbserver&quot;,&quot;0931-PCRMGD-U01.veriska.local&quot;);
			vars.put(&quot;Mongodbserverport&quot;,&quot;27017&quot;);
			
			vars.put(&quot;solrServer&quot;,vars.get(&quot;stagingSolr&quot;));
			vars.put(&quot;userName&quot;,&quot;PIDPCRBPA&quot;);
			//vars.put(&quot;passWord&quot;,&quot;pRU6Refe\$&quot;);
			vars.put(&quot;source&quot;,&quot;admin&quot;);
			
		}
		else if(vars.get(&quot;Environment&quot;).equalsIgnoreCase(&quot;uat&quot;))
		{
			vars.put(&quot;server&quot;,vars.get(&quot;uatserver&quot;));
			vars.put(&quot;Mongodbserver&quot;,&quot;10.93.204.78&quot;);
			vars.put(&quot;Mongodbserverport&quot;,&quot;27017&quot;);
			vars.put(&quot;solrServer&quot;,vars.get(&quot;uatSolr&quot;));
			//vars.put(&quot;Mongodbserver&quot;,&quot;0931-PCRMGD-U01.veriska.local&quot;);
			//vars.put(&quot;Mongodbserverport&quot;,&quot;27017&quot;);
			}</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler" enabled="true">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey"></stringProp>
          <stringProp name="script">import com.mongodb.MongoClient;
import com.mongodb.MongoException;
import com.mongodb.MongoCredential;
import java.util.Arrays;
import java.util.List;
import java.util.ArrayList;
import org.apache.jmeter.util.JMeterUtils;
import com.mongodb.*;




MongoClient coreMongoClient;
		
		if(vars.get(&quot;Environment&quot;).equalsIgnoreCase(&quot;prod&quot;))
		{
			vars.put(&quot;server&quot;,vars.get(&quot;prodserver&quot;));
			vars.put(&quot;Mongodbserver&quot;,&quot;0931-PCRMGD-P01.veriskp.local&quot;);
			vars.put(&quot;Mongodbserverport&quot;,&quot;27017&quot;);
			vars.put(&quot;solrServer&quot;,vars.get(&quot;prodSolr&quot;));
			vars.put(&quot;userName&quot;,&quot;PCRREADUSRP&quot;);
			vars.put(&quot;source&quot;,&quot;admin&quot;);
			
			MongoCredential mongoCredential = MongoCredential.createScramSha1Credential(&quot;PCRREADUSRP&quot;,&quot;admin&quot;,&apos;6rUbEwu#\$&apos;.toCharArray());
    			coreMongoClient = new MongoClient(new ServerAddress(&quot;0931-PCRMGD-P01.veriskp.local&quot;, 27017), Arrays.asList(mongoCredential));
		}
			
		else if(vars.get(&quot;Environment&quot;).equalsIgnoreCase(&quot;stg&quot;))
		{
			vars.put(&quot;server&quot;,vars.get(&quot;stgserver&quot;));
			vars.put(&quot;Mongodbserver&quot;,&quot;0931-PCRMGD-U01.veriska.local&quot;);
			vars.put(&quot;Mongodbserverport&quot;,&quot;27017&quot;);
			vars.put(&quot;solrServer&quot;,vars.get(&quot;stagingSolr&quot;));
			vars.put(&quot;userName&quot;,&quot;PIDPCRBPA&quot;);
			//vars.put(&quot;passWord&quot;,&apos;pRU6Refe\$&apos;);
			//char[] pass=&apos;pRU6Refe$&apos;;
			//&apos;pRU6Refe\$&apos;.toCharArray()
			vars.put(&quot;source&quot;,&quot;admin&quot;);
			MongoCredential mongoCredential = MongoCredential.createScramSha1Credential(&quot;PIDPCRBPA&quot;,&quot;admin&quot;,&apos;pRU6Refe\$&apos;.toCharArray());
    			coreMongoClient = new MongoClient(new ServerAddress(&quot;0931-PCRMGD-U01.veriska.local&quot;, 27017),Arrays.asList(mongoCredential));
    		}
    		
		else if(vars.get(&quot;Environment&quot;).equalsIgnoreCase(&quot;uat&quot;))
		{
			vars.put(&quot;server&quot;,vars.get(&quot;uatserver&quot;));
			vars.put(&quot;Mongodbserver&quot;,&quot;10.93.204.78&quot;);
			
			vars.put(&quot;Mongodbserverport&quot;,&quot;27017&quot;);
			vars.put(&quot;solrServer&quot;,vars.get(&quot;uatSolr&quot;));
			coreMongoClient = new MongoClient(&quot;10.93.204.78&quot;, 27017);
			
			
			
			//vars.put(&quot;Mongodbserver&quot;,&quot;0931-PCRMGD-U01.veriska.local&quot;);
			//vars.put(&quot;Mongodbserverport&quot;,&quot;27017&quot;);
		}

		else if(vars.get(&quot;Environment&quot;).equalsIgnoreCase(&quot;dev&quot;))
		{
			vars.put(&quot;server&quot;,vars.get(&quot;devserver&quot;));
			vars.put(&quot;Mongodbserver&quot;,&quot;10.93.204.215&quot;);
			
			vars.put(&quot;Mongodbserverport&quot;,&quot;27017&quot;);
			vars.put(&quot;solrServer&quot;,vars.get(&quot;devSolr&quot;));
			coreMongoClient = new MongoClient(&quot;10.93.204.215&quot;, 27017);
			
			
			
			//vars.put(&quot;Mongodbserver&quot;,&quot;0931-PCRMGD-U01.veriska.local&quot;);
			//vars.put(&quot;Mongodbserverport&quot;,&quot;27017&quot;);
		}

		Properties properties=JMeterUtils.getJMeterProperties();
		properties.put(&quot;coreMongoClient&quot;,coreMongoClient);
	 
			
			  

			  




    


    
    
    
    </stringProp>
        </JSR223Sampler>
        <hashTree/>
        <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="While Controller" enabled="true">
          <stringProp name="WhileController.condition">${__javaScript(&quot;${contentType}&quot; != &quot;&lt;EOF&gt;&quot;,)} </stringProp>
        </WhileController>
        <hashTree>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
            <stringProp name="delimiter">,</stringProp>
            <stringProp name="fileEncoding"></stringProp>
            <stringProp name="filename">${csv}/PCRCOUNT_${Environment}.csv</stringProp>
            <boolProp name="quotedData">true</boolProp>
            <boolProp name="recycle">false</boolProp>
            <stringProp name="shareMode">shareMode.all</stringProp>
            <boolProp name="stopThread">false</boolProp>
            <stringProp name="variableNames">contentType,groupFields,clientId,uatactiveSolrCollection </stringProp>
            <boolProp name="ignoreFirstLine">true</boolProp>
          </CSVDataSet>
          <hashTree/>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
            <stringProp name="IfController.condition">&quot;${contentType}&quot; != &quot;&lt;EOF&gt;&quot;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller-FRM" enabled="false">
              <stringProp name="IfController.condition">&quot;${contentType}&quot;.equalsIgnoreCase(&quot;FRM&quot;)</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
            </IfController>
            <hashTree>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="${contentType} - Mongodb Count" enabled="true">
                <stringProp name="cacheKey">f253aa47-66e5-4ca5-b317-d80f883d4c8d</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">import org.apache.jmeter.util.JMeterUtils; 
import com.mongodb.*;
import com.mongodb.BasicDBObject;
import com.mongodb.client.model.BsonField.*;
import com.mongodb.Block;
import com.mongodb.MongoClient;
import com.mongodb.MongoException;
import com.mongodb.client.MongoCollection;
import com.mongodb.client.MongoDatabase;
import java.util.Arrays;
import java.util.List;
import java.util.ArrayList;
import org.bson.BsonNull;
import org.bson.Document;
import org.bson.conversions.Bson;
//import org.apache.jmeter.testelement;

long result;

Properties properties = JMeterUtils.getJMeterProperties();
MongoClient coreMongoClient = properties.get(&quot;coreMongoClient&quot;); 




		
    DB coreDB = coreMongoClient.getDB(&quot;verisk_smartcontent&quot;);
    DBCollection collection = coreDB.getCollection(&quot;VERISK_METADATA_COLLECTION&quot;);
   
 	BasicDBObject query = new BasicDBObject(&quot;contentType&quot;, &quot;${contentType}&quot;);
  	result=collection.count(query);
    

    


    
    
    
    </stringProp>
                <stringProp name="scriptLanguage">java</stringProp>
              </JSR223Sampler>
              <hashTree>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">dbCount</stringProp>
                  <stringProp name="RegexExtractor.regex">(.*)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">asd</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${contentType} - SOLR parent count" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="indent" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">on</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">indent</stringProp>
                    </elementProp>
                    <elementProp name="q" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">_nested_id:parent</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">q</stringProp>
                    </elementProp>
                    <elementProp name="wt" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">json</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">wt</stringProp>
                    </elementProp>
                    <elementProp name="rows" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">0</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">rows</stringProp>
                    </elementProp>
                    <elementProp name="fl" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">numFound</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">fl</stringProp>
                    </elementProp>
                    <elementProp name="&amp;omitHeader" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">true</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">&amp;omitHeader</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${solrServer}</stringProp>
                <stringProp name="HTTPSampler.port">8983</stringProp>
                <stringProp name="HTTPSampler.protocol">http</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">solr/${uatactiveSolrCollection}/select?</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="jp@gc - JSON Path Extractor" enabled="true">
                  <stringProp name="VAR">parentCount</stringProp>
                  <stringProp name="JSONPATH">$..response.numFound</stringProp>
                  <stringProp name="DEFAULT">No child records</stringProp>
                  <stringProp name="VARIABLE"></stringProp>
                  <stringProp name="SUBJECT">BODY</stringProp>
                </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${contentType} -API Count" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
&quot;appId&quot;:&quot;${clientId}&quot;,&#xd;
&quot;clientId&quot;:&quot;${clientId}&quot;,&#xd;
&quot;requestId&quot;:&quot;3r436y 4yyuh46676uy7&quot;,&#xd;
&quot;pageSize&quot;:&quot;0&quot;,&#xd;
&quot;searchOption&quot;:&quot;facsimile&quot;,&#xd;
&quot;searchScope&quot;:&quot;ISOANDCLIENT&quot;,&#xd;
&quot;filterQuery&quot;:&quot;(contentType:\&quot;${contentType}\&quot;)&quot;,&#xd;
&quot;group&quot;:&quot;true&quot;,&#xd;
&quot;groupFields&quot;:&quot;uri&quot;,&#xd;
&quot;responseFields&quot;:&quot;ngroups&quot;&#xd;
}&#xd;
&#xd;
</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${server}</stringProp>
                <stringProp name="HTTPSampler.port">443</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">pcr-rest-api/V4/Search/</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="jp@gc - JSON Path Extractor" enabled="true">
                  <stringProp name="VAR">apiCount</stringProp>
                  <stringProp name="JSONPATH">$.grouped.uri.ngroups</stringProp>
                  <stringProp name="DEFAULT">NOT FOUND</stringProp>
                  <stringProp name="VARIABLE"></stringProp>
                  <stringProp name="SUBJECT">BODY</stringProp>
                </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${contentType} - SOLR child count" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="indent" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">on</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">indent</stringProp>
                    </elementProp>
                    <elementProp name="q" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">_nested_id:child</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">q</stringProp>
                    </elementProp>
                    <elementProp name="wt" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">json</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">wt</stringProp>
                    </elementProp>
                    <elementProp name="rows" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">0</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">rows</stringProp>
                    </elementProp>
                    <elementProp name="fl" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">numFound</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">fl</stringProp>
                    </elementProp>
                    <elementProp name="&amp;omitHeader" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">true</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">&amp;omitHeader</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${solrServer}</stringProp>
                <stringProp name="HTTPSampler.port">8983</stringProp>
                <stringProp name="HTTPSampler.protocol">http</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">solr/${uatactiveSolrCollection}/select?</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="jp@gc - JSON Path Extractor" enabled="true">
                  <stringProp name="VAR">childCount</stringProp>
                  <stringProp name="JSONPATH">$..response.numFound</stringProp>
                  <stringProp name="DEFAULT">No child records</stringProp>
                  <stringProp name="VARIABLE"></stringProp>
                  <stringProp name="SUBJECT">BODY</stringProp>
                </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
                <hashTree/>
              </hashTree>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="${contentType} - Mongodb-Applicability Count" enabled="true">
                <stringProp name="cacheKey"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">import com.mongodb.*;
import com.mongodb.Block;
import com.mongodb.MongoClient;
import com.mongodb.MongoException;
import com.mongodb.client.MongoCollection;
import com.mongodb.client.MongoDatabase;
import java.util.Arrays;
import java.util.List;
import java.util.ArrayList;
import org.bson.BsonNull;
import org.bson.Document;
import org.bson.conversions.Bson;
import org.apache.jmeter.util.JMeterUtils;


long result;




Properties properties = JMeterUtils.getJMeterProperties();
MongoClient coreMongoClient = properties.get(&quot;coreMongoClient&quot;); 


com.mongodb.client.MongoDatabase database =coreMongoClient.getDatabase(&quot;verisk_smartcontent&quot;);
          MongoCollection collection = database.getCollection(&quot;VERISK_METADATA_COLLECTION&quot;); 
            
            List pipeline = new ArrayList();
            pipeline.add(
                    new Document()
                            .append(&quot;$match&quot;, new Document()
                                    .append(&quot;contentType&quot;, &quot;FRM&quot;)
                            ));
           pipeline.add(new Document()
                            .append(&quot;$project&quot;, new Document()
                                    .append(&quot;appCount&quot;, new Document()
                                            .append(&quot;$size&quot;, &quot;$applicability&quot;)
                                    )
                            ));
           pipeline.add(new Document()
                            .append(&quot;$group&quot;, new Document()
                                    .append(&quot;_id&quot;, new BsonNull())
                                    .append(&quot;Total&quot;, new Document()
                                            .append(&quot;$sum&quot;, &quot;$appCount&quot;)
                                    )
                            ));
           pipeline.add(new Document()
                            .append(&quot;$project&quot;, new Document()
                                    .append(&quot;Total&quot;, 1.0)
                                    .append(&quot;_id&quot;, 0.0)
                            ));
          
        result=collection.aggregate(pipeline).first().get(&quot;Total&quot;); 
          
          </stringProp>
                <stringProp name="scriptLanguage">beanshell</stringProp>
              </JSR223Sampler>
              <hashTree>
                <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="script">  log.info(&quot;beanshell total :&quot;+vars.get(${Total}));
  vars.put(&quot;Appcount&quot;,Total);</stringProp>
                </BeanShellPostProcessor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">mongoApplicabilityCount</stringProp>
                  <stringProp name="RegexExtractor.regex">(.*)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">asd</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
                <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                  <stringProp name="BeanShellAssertion.query">long var_mongoCount=Long.parseLong(vars.get(&quot;dbCount&quot;));
long var_apiCount=Long.parseLong(vars.get(&quot;apiCount&quot;));
long var_solrParentCount=Long.parseLong(vars.get(&quot;parentCount_1&quot;));
long var_solrChildCount=Long.parseLong(vars.get(&quot;childCount_1&quot;));
long var_mongoApplicabilityCount=Long.parseLong(vars.get(&quot;mongoApplicabilityCount&quot;));

try{
	if ((var_mongoCount!=var_solrParentCount) &amp;&amp; (var_mongoCount!=var_apiCount)){
		Failure=true;
		FailureMessage=&quot;Parent Counts not matching&quot;;
	}

	else if(var_mongoApplicabilityCount!=var_solrChildCount){
		Failure=true;
		FailureMessage=&quot;Child Counts not matching&quot;;
	}

	else{
		Failure=false;
		log.info(&quot;Counts are matching&quot;);
	}
	

}catch(Throwable ex){
	log.error(&quot;Error in Beanshell&quot;, ex);
    throw ex;
	
}


</stringProp>
                  <stringProp name="BeanShellAssertion.filename"></stringProp>
                  <stringProp name="BeanShellAssertion.parameters"></stringProp>
                  <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                </BeanShellAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller-CRC" enabled="false">
              <stringProp name="IfController.condition">&quot;${contentType}&quot;.equalsIgnoreCase(&quot;CRC&quot;)</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
            </IfController>
            <hashTree>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="${contentType} - Mongodb Count" enabled="true">
                <stringProp name="cacheKey">f253aa47-66e5-4ca5-b317-d80f883d4c8d</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">import com.mongodb.*;
import com.mongodb.BasicDBObject;
import com.mongodb.client.model.BsonField.*;
import org.apache.jmeter.util.JMeterUtils; 

long result;



    
Properties properties = JMeterUtils.getJMeterProperties();
MongoClient coreMongoClient = properties.get(&quot;coreMongoClient&quot;); 
    DB coreDB = coreMongoClient.getDB(&quot;verisk_smartcontent&quot;);
    DBCollection collection = coreDB.getCollection(&quot;VERISK_METADATA_COLLECTION&quot;);
    //BsonField a=new BsonField(&quot;uri&quot;,&quot;VERISK_001/FRM/FP10530905&quot;);
 	 BasicDBObject query = new BasicDBObject(&quot;contentType&quot;, &quot;${contentType}&quot;);
  	result=collection.count(query);
    

    


    
    
    
    </stringProp>
                <stringProp name="scriptLanguage">beanshell</stringProp>
              </JSR223Sampler>
              <hashTree>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">dbCount</stringProp>
                  <stringProp name="RegexExtractor.regex">(.*)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">asd</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${contentType} - SOLR parent count" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="indent" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">on</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">indent</stringProp>
                    </elementProp>
                    <elementProp name="q" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">_nested_id:parent</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">q</stringProp>
                    </elementProp>
                    <elementProp name="wt" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">json</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">wt</stringProp>
                    </elementProp>
                    <elementProp name="rows" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">0</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">rows</stringProp>
                    </elementProp>
                    <elementProp name="fl" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">numFound</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">fl</stringProp>
                    </elementProp>
                    <elementProp name="&amp;omitHeader" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">true</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">&amp;omitHeader</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${solrServer}</stringProp>
                <stringProp name="HTTPSampler.port">8983</stringProp>
                <stringProp name="HTTPSampler.protocol">http</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">solr/${uatactiveSolrCollection}/select?</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="jp@gc - JSON Path Extractor" enabled="true">
                  <stringProp name="VAR">parentCount</stringProp>
                  <stringProp name="JSONPATH">$..response.numFound</stringProp>
                  <stringProp name="DEFAULT">No child records</stringProp>
                  <stringProp name="VARIABLE"></stringProp>
                  <stringProp name="SUBJECT">BODY</stringProp>
                </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${contentType} -API Count" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
&quot;appId&quot;:&quot;${clientId}&quot;,&#xd;
&quot;clientId&quot;:&quot;${clientId}&quot;,&#xd;
&quot;requestId&quot;:&quot;3r436y 4yyuh46676uy7&quot;,&#xd;
&quot;pageSize&quot;:&quot;0&quot;,&#xd;
&quot;searchOption&quot;:&quot;facsimile&quot;,&#xd;
&quot;searchScope&quot;:&quot;ISOANDCLIENT&quot;,&#xd;
&quot;filterQuery&quot;:&quot;(contentType:\&quot;${contentType}\&quot;)&quot;,&#xd;
&quot;group&quot;:&quot;true&quot;,&#xd;
&quot;groupFields&quot;:&quot;uri&quot;,&#xd;
&quot;responseFields&quot;:&quot;ngroups&quot;&#xd;
}&#xd;
&#xd;
</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${server}</stringProp>
                <stringProp name="HTTPSampler.port">443</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">pcr-rest-api/V4/Search/</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="jp@gc - JSON Path Extractor" enabled="true">
                  <stringProp name="VAR">apiCount</stringProp>
                  <stringProp name="JSONPATH">$.grouped.uri.ngroups</stringProp>
                  <stringProp name="DEFAULT">NOT FOUND</stringProp>
                  <stringProp name="VARIABLE"></stringProp>
                  <stringProp name="SUBJECT">BODY</stringProp>
                </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${contentType} - SOLR child count" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="indent" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">on</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">indent</stringProp>
                    </elementProp>
                    <elementProp name="q" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">_nested_id:child</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">q</stringProp>
                    </elementProp>
                    <elementProp name="wt" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">json</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">wt</stringProp>
                    </elementProp>
                    <elementProp name="rows" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">0</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">rows</stringProp>
                    </elementProp>
                    <elementProp name="fl" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">numFound</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">fl</stringProp>
                    </elementProp>
                    <elementProp name="&amp;omitHeader" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">true</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">&amp;omitHeader</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${solrServer}</stringProp>
                <stringProp name="HTTPSampler.port">8983</stringProp>
                <stringProp name="HTTPSampler.protocol">http</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">solr/${uatactiveSolrCollection}/select?</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="jp@gc - JSON Path Extractor" enabled="true">
                  <stringProp name="VAR">childCount</stringProp>
                  <stringProp name="JSONPATH">$..response.numFound</stringProp>
                  <stringProp name="DEFAULT">No child records</stringProp>
                  <stringProp name="VARIABLE"></stringProp>
                  <stringProp name="SUBJECT">BODY</stringProp>
                </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
                <hashTree/>
              </hashTree>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="${contentType} - Mongodb-Applicability Count" enabled="true">
                <stringProp name="cacheKey"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">import com.mongodb.*;
import com.mongodb.Block;
import com.mongodb.MongoClient;
import com.mongodb.MongoException;
import com.mongodb.client.MongoCollection;
import com.mongodb.client.MongoDatabase;
import java.util.Arrays;
import java.util.List;
import java.util.ArrayList;
import org.bson.BsonNull;
import org.bson.Document;
import org.bson.conversions.Bson;
import org.apache.jmeter.util.JMeterUtils; 


long result;

Properties properties = JMeterUtils.getJMeterProperties();
MongoClient coreMongoClient = properties.get(&quot;coreMongoClient&quot;); 

     	 MongoDatabase database = coreMongoClient.getDatabase(&quot;verisk_smartcontent&quot;);
            MongoCollection collection = database.getCollection(&quot;VERISK_METADATA_COLLECTION&quot;); 
            
            List pipeline = new ArrayList();
            pipeline.add(
                    new Document()
                            .append(&quot;$match&quot;, new Document()
                                    .append(&quot;contentType&quot;, &quot;CRC&quot;)
                            ));
           pipeline.add(new Document()
                            .append(&quot;$project&quot;, new Document()
                                    .append(&quot;appCount&quot;, new Document()
                                            .append(&quot;$size&quot;, &quot;$applicability&quot;)
                                    )
                            ));
           pipeline.add(new Document()
                            .append(&quot;$group&quot;, new Document()
                                    .append(&quot;_id&quot;, new BsonNull())
                                    .append(&quot;Total&quot;, new Document()
                                            .append(&quot;$sum&quot;, &quot;$appCount&quot;)
                                    )
                            ));
           pipeline.add(new Document()
                            .append(&quot;$project&quot;, new Document()
                                    .append(&quot;Total&quot;, 1.0)
                                    .append(&quot;_id&quot;, 0.0)
                            ));
          
            result= collection.aggregate(pipeline).first().get(&quot;Total&quot;); 
          
          </stringProp>
                <stringProp name="scriptLanguage">beanshell</stringProp>
              </JSR223Sampler>
              <hashTree>
                <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="script">  log.info(&quot;beanshell total :&quot;+vars.get(${Total}));
  vars.put(&quot;Appcount&quot;,Total);</stringProp>
                </BeanShellPostProcessor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">mongoApplicabilityCount</stringProp>
                  <stringProp name="RegexExtractor.regex">(.*)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">asd</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
                <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                  <stringProp name="BeanShellAssertion.query">long var_mongoCount=Integer.parseInt(vars.get(&quot;dbCount&quot;));
long var_apiCount=Integer.parseInt(vars.get(&quot;apiCount&quot;));
long var_solrParentCount=Integer.parseInt(vars.get(&quot;parentCount_1&quot;));
long var_solrChildCount=Integer.parseInt(vars.get(&quot;childCount_1&quot;));
long var_mongoApplicabilityCount=Integer.parseInt(vars.get(&quot;mongoApplicabilityCount&quot;));


try{
	if ((var_mongoCount!=var_solrParentCount) &amp;&amp; (var_mongoCount!=var_apiCount)){
		Failure=true;
		FailureMessage=&quot;Parent Counts not matching&quot;;
	}

	else if(var_mongoApplicabilityCount!=var_solrChildCount){
		Failure=true;
		FailureMessage=&quot;Child Counts not matching&quot;;
	}

	else{
		Failure=false;
		log.info(&quot;Counts are matching&quot;);
	}
	

}catch(Exception e){
	Failure=true;
	FailureMessage=&quot;Counts not matching&quot;;
	
}


</stringProp>
                  <stringProp name="BeanShellAssertion.filename"></stringProp>
                  <stringProp name="BeanShellAssertion.parameters"></stringProp>
                  <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                </BeanShellAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller-LMN" enabled="false">
              <stringProp name="IfController.condition">&quot;${contentType}&quot;.equalsIgnoreCase(&quot;LMN&quot;)</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
            </IfController>
            <hashTree>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="${contentType} - Mongodb Count" enabled="true">
                <stringProp name="cacheKey">f253aa47-66e5-4ca5-b317-d80f883d4c8d</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">import com.mongodb.*;
import com.mongodb.BasicDBObject;
import com.mongodb.client.model.BsonField.*;
import org.apache.jmeter.util.JMeterUtils; 

long result;


	
Properties properties = JMeterUtils.getJMeterProperties();
MongoClient coreMongoClient = properties.get(&quot;coreMongoClient&quot;); 

    DB coreDB = coreMongoClient.getDB(&quot;verisk_smartcontent&quot;);
    DBCollection collection = coreDB.getCollection(&quot;VERISK_METADATA_COLLECTION&quot;);
    
 	 BasicDBObject query = new BasicDBObject(&quot;contentType&quot;, &quot;${contentType}&quot;);
  	result=collection.count(query);
    </stringProp>
                <stringProp name="scriptLanguage">beanshell</stringProp>
              </JSR223Sampler>
              <hashTree>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">dbCount</stringProp>
                  <stringProp name="RegexExtractor.regex">(.*)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">asd</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${contentType} - SOLR parent count" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="indent" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">on</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">indent</stringProp>
                    </elementProp>
                    <elementProp name="q" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">_nested_id:parent</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">q</stringProp>
                    </elementProp>
                    <elementProp name="wt" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">json</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">wt</stringProp>
                    </elementProp>
                    <elementProp name="fl" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">numFound</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">fl</stringProp>
                    </elementProp>
                    <elementProp name="&amp;omitHeader" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">true</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">&amp;omitHeader</stringProp>
                    </elementProp>
                    <elementProp name="rows" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">0</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">rows</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${solrServer}</stringProp>
                <stringProp name="HTTPSampler.port">8983</stringProp>
                <stringProp name="HTTPSampler.protocol">http</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">solr/${uatactiveSolrCollection}/select?</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="jp@gc - JSON Path Extractor" enabled="true">
                  <stringProp name="VAR">childCount</stringProp>
                  <stringProp name="JSONPATH">$..response.numFound</stringProp>
                  <stringProp name="DEFAULT">No child records</stringProp>
                  <stringProp name="VARIABLE"></stringProp>
                  <stringProp name="SUBJECT">BODY</stringProp>
                </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${contentType} -API Count" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
&quot;appId&quot;:&quot;${clientId}&quot;,&#xd;
&quot;clientId&quot;:&quot;${clientId}&quot;,&#xd;
&quot;requestId&quot;:&quot;3r436y 4yyuh46676uy7&quot;,&#xd;
&quot;pageSize&quot;:&quot;0&quot;,&#xd;
&quot;searchOption&quot;:&quot;facsimile&quot;,&#xd;
&quot;searchScope&quot;:&quot;ISOANDCLIENT&quot;,&#xd;
&quot;filterQuery&quot;:&quot;(contentType:\&quot;${contentType}\&quot;)&quot;,&#xd;
&quot;group&quot;:&quot;true&quot;,&#xd;
&quot;groupFields&quot;:&quot;uri&quot;,&#xd;
&quot;responseFields&quot;:&quot;ngroups&quot;&#xd;
}&#xd;
&#xd;
</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${server}</stringProp>
                <stringProp name="HTTPSampler.port">443</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">pcr-rest-api/V4/Search/</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="jp@gc - JSON Path Extractor" enabled="true">
                  <stringProp name="VAR">apiCount</stringProp>
                  <stringProp name="JSONPATH">$.grouped.uri.ngroups</stringProp>
                  <stringProp name="DEFAULT">NOT FOUND</stringProp>
                  <stringProp name="VARIABLE"></stringProp>
                  <stringProp name="SUBJECT">BODY</stringProp>
                </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${contentType} - SOLR child count" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="indent" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">on</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">indent</stringProp>
                    </elementProp>
                    <elementProp name="q" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">_nested_id:child</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">q</stringProp>
                    </elementProp>
                    <elementProp name="wt" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">json</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">wt</stringProp>
                    </elementProp>
                    <elementProp name="fl" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">numFound</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">fl</stringProp>
                    </elementProp>
                    <elementProp name="&amp;omitHeader" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">true</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">&amp;omitHeader</stringProp>
                    </elementProp>
                    <elementProp name="rows" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">0</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">rows</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${solrServer}</stringProp>
                <stringProp name="HTTPSampler.port">8983</stringProp>
                <stringProp name="HTTPSampler.protocol">http</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">solr/${uatactiveSolrCollection}/select?</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="jp@gc - JSON Path Extractor" enabled="true">
                  <stringProp name="VAR">childCount</stringProp>
                  <stringProp name="JSONPATH">$..response.numFound</stringProp>
                  <stringProp name="DEFAULT">No child records</stringProp>
                  <stringProp name="VARIABLE"></stringProp>
                  <stringProp name="SUBJECT">BODY</stringProp>
                </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
                <hashTree/>
              </hashTree>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="${contentType} - Mongodb-Applicability Count" enabled="true">
                <stringProp name="cacheKey"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">
import com.mongodb.Block;
import com.mongodb.MongoClient;
import com.mongodb.MongoException;
import com.mongodb.client.MongoCollection;
import com.mongodb.client.MongoDatabase;
import java.util.Arrays;
import java.util.List;
import java.util.ArrayList;
import org.bson.BsonNull;
import org.bson.Document;
import org.bson.conversions.Bson;
import org.apache.jmeter.testelement;
import org.apache.jmeter.util.JMeterUtils; 




        
      
Properties properties = JMeterUtils.getJMeterProperties();
MongoClient coreMongoClient = properties.get(&quot;coreMongoClient&quot;); 
            
            MongoDatabase database = coreMongoClient.getDatabase(&quot;verisk_smartcontent&quot;);
            MongoCollection collection = database.getCollection(&quot;VERISK_METADATA_COLLECTION&quot;);
            
            List pipeline = new ArrayList();
            pipeline.add(
                    new Document()
                            .append(&quot;$match&quot;, new Document()
                                    .append(&quot;contentType&quot;, &quot;LMN&quot;)
                            ));
           pipeline.add(new Document()
                            .append(&quot;$project&quot;, new Document()
                                    .append(&quot;appCount&quot;, new Document()
                                            .append(&quot;$size&quot;, &quot;$applicability&quot;)
                                    )
                            ));
           pipeline.add(new Document()
                            .append(&quot;$group&quot;, new Document()
                                    .append(&quot;_id&quot;, new BsonNull())
                                    .append(&quot;Total&quot;, new Document()
                                            .append(&quot;$sum&quot;, &quot;$appCount&quot;)
                                    )
                            ));
           pipeline.add(new Document()
                            .append(&quot;$project&quot;, new Document()
                                    .append(&quot;Total&quot;, 1.0)
                                    .append(&quot;_id&quot;, 0.0)
                            ));
            
         
           collection.aggregate(pipeline).first().get(&quot;Total&quot;);
          
         </stringProp>
                <stringProp name="scriptLanguage">java</stringProp>
              </JSR223Sampler>
              <hashTree>
                <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="script">  log.info(&quot;beanshell total :&quot;+vars.get(${Total}));
  vars.put(&quot;Appcount&quot;,Total);</stringProp>
                </BeanShellPostProcessor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">mongoApplicabilityCount</stringProp>
                  <stringProp name="RegexExtractor.regex">(.*)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">asd</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
                <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                  <stringProp name="BeanShellAssertion.query">long var_mongoCount=Integer.parseInt(vars.get(&quot;dbCount&quot;));
long var_apiCount=Integer.parseInt(vars.get(&quot;apiCount&quot;));
long var_solrParentCount=Integer.parseInt(vars.get(&quot;parentCount_1&quot;));
long var_solrChildCount=Integer.parseInt(vars.get(&quot;childCount_1&quot;));
long var_mongoApplicabilityCount=Integer.parseInt(vars.get(&quot;mongoApplicabilityCount&quot;));


try{
	if ((var_mongoCount!=var_solrParentCount) &amp;&amp; (var_mongoCount!=var_apiCount)){
		Failure=true;
		FailureMessage=&quot;Parent Counts not matching&quot;;
	}

	else if(var_mongoApplicabilityCount!=var_solrChildCount){
		Failure=true;
		FailureMessage=&quot;Child Counts not matching&quot;;
	}

	else{
		Failure=false;
		log.info(&quot;Counts are matching&quot;);
	}
	

}catch(Exception e){
	Failure=true;
	FailureMessage=&quot;Counts not matching&quot;;
	
}


</stringProp>
                  <stringProp name="BeanShellAssertion.filename"></stringProp>
                  <stringProp name="BeanShellAssertion.parameters"></stringProp>
                  <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                </BeanShellAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller-CLM" enabled="false">
              <stringProp name="IfController.condition">&quot;${contentType}&quot;.equalsIgnoreCase(&quot;CLM&quot;)</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
            </IfController>
            <hashTree>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="${contentType} - Mongodb Count" enabled="true">
                <stringProp name="cacheKey">f253aa47-66e5-4ca5-b317-d80f883d4c8d</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">import com.mongodb.*;
import com.mongodb.BasicDBObject;
import com.mongodb.client.model.BsonField.*;
import org.apache.jmeter.util.JMeterUtils;

long result;



  
Properties properties = JMeterUtils.getJMeterProperties();
MongoClient coreMongoClient = properties.get(&quot;coreMongoClient&quot;); 

    DB coreDB = coreMongoClient.getDB(&quot;verisk_smartcontent&quot;);
    DBCollection collection = coreDB.getCollection(&quot;VERISK_METADATA_COLLECTION&quot;);
    //BsonField a=new BsonField(&quot;uri&quot;,&quot;VERISK_001/FRM/FP10530905&quot;);
 	 BasicDBObject query = new BasicDBObject(&quot;contentType&quot;, &quot;${contentType}&quot;);
  	result=collection.count(query);
    

    


    
    
    
    </stringProp>
                <stringProp name="scriptLanguage">beanshell</stringProp>
              </JSR223Sampler>
              <hashTree>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">dbCount</stringProp>
                  <stringProp name="RegexExtractor.regex">(.*)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">asd</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${contentType} - SOLR parent count" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="indent" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">on</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">indent</stringProp>
                    </elementProp>
                    <elementProp name="q" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">_nested_id:parent</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">q</stringProp>
                    </elementProp>
                    <elementProp name="wt" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">json</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">wt</stringProp>
                    </elementProp>
                    <elementProp name="fl" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">numFound</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">fl</stringProp>
                    </elementProp>
                    <elementProp name="&amp;omitHeader" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">true</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">&amp;omitHeader</stringProp>
                    </elementProp>
                    <elementProp name="rows" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">0</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">rows</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${solrServer}</stringProp>
                <stringProp name="HTTPSampler.port">8983</stringProp>
                <stringProp name="HTTPSampler.protocol">http</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">solr/${uatactiveSolrCollection}/select?</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="jp@gc - JSON Path Extractor" enabled="true">
                  <stringProp name="VAR">parentCount</stringProp>
                  <stringProp name="JSONPATH">$..response.numFound</stringProp>
                  <stringProp name="DEFAULT">No child records</stringProp>
                  <stringProp name="VARIABLE"></stringProp>
                  <stringProp name="SUBJECT">BODY</stringProp>
                </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${contentType} -API Count" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
&quot;appId&quot;:&quot;${clientId}&quot;,&#xd;
&quot;clientId&quot;:&quot;${clientId}&quot;,&#xd;
&quot;requestId&quot;:&quot;3r436y 4yyuh46676uy7&quot;,&#xd;
&quot;pageSize&quot;:&quot;0&quot;,&#xd;
&quot;searchOption&quot;:&quot;facsimile&quot;,&#xd;
&quot;searchScope&quot;:&quot;ISOANDCLIENT&quot;,&#xd;
&quot;filterQuery&quot;:&quot;(contentType:\&quot;${contentType}\&quot;)&quot;,&#xd;
&quot;group&quot;:&quot;true&quot;,&#xd;
&quot;groupFields&quot;:&quot;uri&quot;,&#xd;
&quot;responseFields&quot;:&quot;ngroups&quot;&#xd;
}&#xd;
&#xd;
</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${server}</stringProp>
                <stringProp name="HTTPSampler.port">443</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">pcr-rest-api/V4/Search/</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="jp@gc - JSON Path Extractor" enabled="true">
                  <stringProp name="VAR">apiCount</stringProp>
                  <stringProp name="JSONPATH">$.grouped.uri.ngroups</stringProp>
                  <stringProp name="DEFAULT">NOT FOUND</stringProp>
                  <stringProp name="VARIABLE"></stringProp>
                  <stringProp name="SUBJECT">BODY</stringProp>
                </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${contentType} - SOLR child count" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="indent" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">on</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">indent</stringProp>
                    </elementProp>
                    <elementProp name="q" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">_nested_id:child</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">q</stringProp>
                    </elementProp>
                    <elementProp name="wt" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">json</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">wt</stringProp>
                    </elementProp>
                    <elementProp name="fl" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">numFound</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">fl</stringProp>
                    </elementProp>
                    <elementProp name="&amp;omitHeader" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">true</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">&amp;omitHeader</stringProp>
                    </elementProp>
                    <elementProp name="rows" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">0</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">rows</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${solrServer}</stringProp>
                <stringProp name="HTTPSampler.port">8983</stringProp>
                <stringProp name="HTTPSampler.protocol">http</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">solr/${uatactiveSolrCollection}/select?</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="jp@gc - JSON Path Extractor" enabled="true">
                  <stringProp name="VAR">childCount</stringProp>
                  <stringProp name="JSONPATH">$..response.numFound</stringProp>
                  <stringProp name="DEFAULT">No child records</stringProp>
                  <stringProp name="VARIABLE"></stringProp>
                  <stringProp name="SUBJECT">BODY</stringProp>
                </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
                <hashTree/>
              </hashTree>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="${contentType} - Mongodb-Applicability Count" enabled="true">
                <stringProp name="cacheKey"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">
import com.mongodb.Block;
import com.mongodb.MongoClient;
import com.mongodb.MongoException;
import com.mongodb.client.MongoCollection;
import com.mongodb.client.MongoDatabase;
import java.util.Arrays;
import java.util.List;
import java.util.ArrayList;
import org.bson.BsonNull;
import org.bson.Document;
import org.bson.conversions.Bson;
import org.apache.jmeter.testelement;
import org.apache.jmeter.util.JMeterUtils; 




        

Properties properties = JMeterUtils.getJMeterProperties();
MongoClient coreMongoClient = properties.get(&quot;coreMongoClient&quot;); 
            
            MongoDatabase database = coreMongoClient.getDatabase(&quot;verisk_smartcontent&quot;);
            MongoCollection collection = database.getCollection(&quot;VERISK_METADATA_COLLECTION&quot;);
            
            List pipeline = new ArrayList();
            pipeline.add(
                    new Document()
                            .append(&quot;$match&quot;, new Document()
                                    .append(&quot;contentType&quot;, &quot;CLM&quot;)
                            ));
           pipeline.add(new Document()
                            .append(&quot;$project&quot;, new Document()
                                    .append(&quot;appCount&quot;, new Document()
                                            .append(&quot;$size&quot;, &quot;$applicability&quot;)
                                    )
                            ));
           pipeline.add(new Document()
                            .append(&quot;$group&quot;, new Document()
                                    .append(&quot;_id&quot;, new BsonNull())
                                    .append(&quot;Total&quot;, new Document()
                                            .append(&quot;$sum&quot;, &quot;$appCount&quot;)
                                    )
                            ));
           pipeline.add(new Document()
                            .append(&quot;$project&quot;, new Document()
                                    .append(&quot;Total&quot;, 1.0)
                                    .append(&quot;_id&quot;, 0.0)
                            ));
            
           
           collection.aggregate(pipeline).first().get(&quot;Total&quot;);
          
          </stringProp>
                <stringProp name="scriptLanguage">java</stringProp>
              </JSR223Sampler>
              <hashTree>
                <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="script">  log.info(&quot;beanshell total :&quot;+vars.get(${Total}));
  vars.put(&quot;Appcount&quot;,Total);</stringProp>
                </BeanShellPostProcessor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">mongoApplicabilityCount</stringProp>
                  <stringProp name="RegexExtractor.regex">(.*)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">asd</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
                <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                  <stringProp name="BeanShellAssertion.query">long var_mongoCount=Integer.parseInt(vars.get(&quot;dbCount&quot;));
long var_apiCount=Integer.parseInt(vars.get(&quot;apiCount&quot;));
long var_solrParentCount=Integer.parseInt(vars.get(&quot;parentCount_1&quot;));
long var_solrChildCount=Integer.parseInt(vars.get(&quot;childCount_1&quot;));
long var_mongoApplicabilityCount=Integer.parseInt(vars.get(&quot;mongoApplicabilityCount&quot;));


try{
	if ((var_mongoCount!=var_solrParentCount) &amp;&amp; (var_mongoCount!=var_apiCount)){
		Failure=true;
		FailureMessage=&quot;Parent Counts not matching&quot;;
	}

	else if(var_mongoApplicabilityCount!=var_solrChildCount){
		Failure=true;
		FailureMessage=&quot;Child Counts not matching&quot;;
	}

	else{
		Failure=false;
		log.info(&quot;Counts are matching&quot;);
	}
	

}catch(Exception e){
	Failure=true;
	FailureMessage=&quot;Counts not matching&quot;;
	
}


</stringProp>
                  <stringProp name="BeanShellAssertion.filename"></stringProp>
                  <stringProp name="BeanShellAssertion.parameters"></stringProp>
                  <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                </BeanShellAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller-EMI" enabled="false">
              <stringProp name="IfController.condition">&quot;${contentType}&quot;.equalsIgnoreCase(&quot;EMI&quot;)</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
            </IfController>
            <hashTree>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="${contentType} - Mongodb Count" enabled="true">
                <stringProp name="cacheKey">f253aa47-66e5-4ca5-b317-d80f883d4c8d</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">import com.mongodb.*;
import com.mongodb.BasicDBObject;
import com.mongodb.client.model.BsonField.*;
import org.apache.jmeter.util.JMeterUtils; 

long result;



   
Properties properties = JMeterUtils.getJMeterProperties();
MongoClient coreMongoClient = properties.get(&quot;coreMongoClient&quot;); 

    DB coreDB = coreMongoClient.getDB(&quot;verisk_smartcontent&quot;);
    DBCollection collection = coreDB.getCollection(&quot;VERISK_METADATA_COLLECTION&quot;);
    //BsonField a=new BsonField(&quot;uri&quot;,&quot;VERISK_001/FRM/FP10530905&quot;);
 	 BasicDBObject query = new BasicDBObject(&quot;contentType&quot;, &quot;${contentType}&quot;);
  	result=collection.count(query);
    

    


    
    
    
    </stringProp>
                <stringProp name="scriptLanguage">beanshell</stringProp>
              </JSR223Sampler>
              <hashTree>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">dbCount</stringProp>
                  <stringProp name="RegexExtractor.regex">(.*)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">asd</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${contentType} - SOLR parent count" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="indent" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">on</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">indent</stringProp>
                    </elementProp>
                    <elementProp name="q" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">_nested_id:parent</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">q</stringProp>
                    </elementProp>
                    <elementProp name="wt" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">json</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">wt</stringProp>
                    </elementProp>
                    <elementProp name="rows" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">0</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">rows</stringProp>
                    </elementProp>
                    <elementProp name="fl" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">numFound</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">fl</stringProp>
                    </elementProp>
                    <elementProp name="&amp;omitHeader" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">true</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">&amp;omitHeader</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${solrServer}</stringProp>
                <stringProp name="HTTPSampler.port">8983</stringProp>
                <stringProp name="HTTPSampler.protocol">http</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">solr/${uatactiveSolrCollection}/select?</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="jp@gc - JSON Path Extractor" enabled="true">
                  <stringProp name="VAR">parentCount</stringProp>
                  <stringProp name="JSONPATH">$..response.numFound</stringProp>
                  <stringProp name="DEFAULT">No child records</stringProp>
                  <stringProp name="VARIABLE"></stringProp>
                  <stringProp name="SUBJECT">BODY</stringProp>
                </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${contentType} -API Count" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
&quot;appId&quot;:&quot;${clientId}&quot;,&#xd;
&quot;clientId&quot;:&quot;${clientId}&quot;,&#xd;
&quot;requestId&quot;:&quot;3r436y 4yyuh46676uy7&quot;,&#xd;
&quot;pageSize&quot;:&quot;0&quot;,&#xd;
&quot;searchOption&quot;:&quot;facsimile&quot;,&#xd;
&quot;searchScope&quot;:&quot;ISOANDCLIENT&quot;,&#xd;
&quot;filterQuery&quot;:&quot;(contentType:\&quot;${contentType}\&quot;)&quot;,&#xd;
&quot;group&quot;:&quot;true&quot;,&#xd;
&quot;groupFields&quot;:&quot;uri&quot;,&#xd;
&quot;responseFields&quot;:&quot;ngroups&quot;&#xd;
}&#xd;
&#xd;
</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${server}</stringProp>
                <stringProp name="HTTPSampler.port">443</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">pcr-rest-api/V4/Search/</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="jp@gc - JSON Path Extractor" enabled="true">
                  <stringProp name="VAR">apiCount</stringProp>
                  <stringProp name="JSONPATH">$.grouped.uri.ngroups</stringProp>
                  <stringProp name="DEFAULT">NOT FOUND</stringProp>
                  <stringProp name="VARIABLE"></stringProp>
                  <stringProp name="SUBJECT">BODY</stringProp>
                </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${contentType} - SOLR child count" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="indent" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">on</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">indent</stringProp>
                    </elementProp>
                    <elementProp name="q" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">_nested_id:child</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">q</stringProp>
                    </elementProp>
                    <elementProp name="wt" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">json</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">wt</stringProp>
                    </elementProp>
                    <elementProp name="rows" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">0</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">rows</stringProp>
                    </elementProp>
                    <elementProp name="fl" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">numFound</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">fl</stringProp>
                    </elementProp>
                    <elementProp name="&amp;omitHeader" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">true</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">&amp;omitHeader</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${solrServer}</stringProp>
                <stringProp name="HTTPSampler.port">8983</stringProp>
                <stringProp name="HTTPSampler.protocol">http</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">solr/${uatactiveSolrCollection}/select?</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="jp@gc - JSON Path Extractor" enabled="true">
                  <stringProp name="VAR">childCount</stringProp>
                  <stringProp name="JSONPATH">$..response.numFound</stringProp>
                  <stringProp name="DEFAULT">No child records</stringProp>
                  <stringProp name="VARIABLE"></stringProp>
                  <stringProp name="SUBJECT">BODY</stringProp>
                </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
                <hashTree/>
              </hashTree>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="${contentType} - Mongodb-Applicability Count" enabled="true">
                <stringProp name="cacheKey"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">import com.mongodb.*;
import com.mongodb.BasicDBObject;
import com.mongodb.client.model.BsonField.*;
import org.apache.jmeter.util.JMeterUtils; 

long result;



  
Properties properties = JMeterUtils.getJMeterProperties();
MongoClient coreMongoClient = properties.get(&quot;coreMongoClient&quot;); 

    DB coreDB = coreMongoClient.getDB(&quot;verisk_smartcontent&quot;);
    DBCollection collection = coreDB.getCollection(&quot;VERISK_METADATA_COLLECTION&quot;);
    //BsonField a=new BsonField(&quot;uri&quot;,&quot;VERISK_001/FRM/FP10530905&quot;);
 	 BasicDBObject query = new BasicDBObject(&quot;contentType&quot;, &quot;${contentType}&quot;);
  	result=collection.count(query);
    


</stringProp>
                <stringProp name="scriptLanguage">beanshell</stringProp>
              </JSR223Sampler>
              <hashTree>
                <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="script">  log.info(&quot;beanshell total :&quot;+vars.get(${Total}));
  vars.put(&quot;Appcount&quot;,Total);</stringProp>
                </BeanShellPostProcessor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">mongoApplicabilityCount</stringProp>
                  <stringProp name="RegexExtractor.regex">(.*)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">asd</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
                <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                  <stringProp name="BeanShellAssertion.query">long var_mongoCount=Integer.parseInt(vars.get(&quot;dbCount&quot;));
long var_apiCount=Integer.parseInt(vars.get(&quot;apiCount&quot;));
long var_solrParentCount=Integer.parseInt(vars.get(&quot;parentCount_1&quot;));
long var_solrChildCount=Integer.parseInt(vars.get(&quot;childCount_1&quot;));
long var_mongoApplicabilityCount=Integer.parseInt(vars.get(&quot;mongoApplicabilityCount&quot;));


try{
	if ((var_mongoCount!=var_solrParentCount) &amp;&amp; (var_mongoCount!=var_apiCount)){
		Failure=true;
		FailureMessage=&quot;Parent Counts not matching&quot;;
	}

	else if(var_mongoApplicabilityCount!=var_solrChildCount){
		Failure=true;
		FailureMessage=&quot;Child Counts not matching&quot;;
	}

	else{
		Failure=false;
		log.info(&quot;Counts are matching&quot;);
	}
	

}catch(Exception e){
	Failure=true;
	FailureMessage=&quot;Counts not matching&quot;;
	
}


</stringProp>
                  <stringProp name="BeanShellAssertion.filename"></stringProp>
                  <stringProp name="BeanShellAssertion.parameters"></stringProp>
                  <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                </BeanShellAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller-MLC" enabled="false">
              <stringProp name="IfController.condition">&quot;${contentType}&quot;.equalsIgnoreCase(&quot;MLC&quot;)</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
            </IfController>
            <hashTree>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="${contentType} - Mongodb Count" enabled="true">
                <stringProp name="cacheKey">f253aa47-66e5-4ca5-b317-d80f883d4c8d</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">import com.mongodb.*;
import com.mongodb.BasicDBObject;
import com.mongodb.client.model.BsonField.*;
import org.apache.jmeter.util.JMeterUtils; 

long result;




Properties properties = JMeterUtils.getJMeterProperties();
MongoClient coreMongoClient = properties.get(&quot;coreMongoClient&quot;); 

    DB coreDB = coreMongoClient.getDB(&quot;verisk_smartcontent&quot;);
    DBCollection collection = coreDB.getCollection(&quot;VERISK_METADATA_COLLECTION&quot;);
    //BsonField a=new BsonField(&quot;uri&quot;,&quot;VERISK_001/FRM/FP10530905&quot;);
 	 BasicDBObject query = new BasicDBObject(&quot;contentType&quot;, &quot;${contentType}&quot;);
  	result=collection.count(query);
    

    


    
    
    
    </stringProp>
                <stringProp name="scriptLanguage">beanshell</stringProp>
              </JSR223Sampler>
              <hashTree>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">dbCount</stringProp>
                  <stringProp name="RegexExtractor.regex">(.*)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">asd</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${contentType} - SOLR parent count" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="indent" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">on</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">indent</stringProp>
                    </elementProp>
                    <elementProp name="q" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">_nested_id:parent</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">q</stringProp>
                    </elementProp>
                    <elementProp name="wt" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">json</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">wt</stringProp>
                    </elementProp>
                    <elementProp name="fl" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">numFound</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">fl</stringProp>
                    </elementProp>
                    <elementProp name="&amp;omitHeader" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">true</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">&amp;omitHeader</stringProp>
                    </elementProp>
                    <elementProp name="rows" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">0</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">rows</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${solrServer}</stringProp>
                <stringProp name="HTTPSampler.port">8983</stringProp>
                <stringProp name="HTTPSampler.protocol">http</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">solr/${uatactiveSolrCollection}/select?</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="jp@gc - JSON Path Extractor" enabled="true">
                  <stringProp name="VAR">parentCount</stringProp>
                  <stringProp name="JSONPATH">$..response.numFound</stringProp>
                  <stringProp name="DEFAULT">No child records</stringProp>
                  <stringProp name="VARIABLE"></stringProp>
                  <stringProp name="SUBJECT">BODY</stringProp>
                </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${contentType} -API Count" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
&quot;appId&quot;:&quot;${clientId}&quot;,&#xd;
&quot;clientId&quot;:&quot;${clientId}&quot;,&#xd;
&quot;requestId&quot;:&quot;3r436y 4yyuh46676uy7&quot;,&#xd;
&quot;pageSize&quot;:&quot;0&quot;,&#xd;
&quot;searchOption&quot;:&quot;facsimile&quot;,&#xd;
&quot;searchScope&quot;:&quot;ISOANDCLIENT&quot;,&#xd;
&quot;filterQuery&quot;:&quot;(contentType:\&quot;${contentType}\&quot;)&quot;,&#xd;
&quot;group&quot;:&quot;true&quot;,&#xd;
&quot;groupFields&quot;:&quot;uri&quot;,&#xd;
&quot;responseFields&quot;:&quot;ngroups&quot;&#xd;
}&#xd;
&#xd;
</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${server}</stringProp>
                <stringProp name="HTTPSampler.port">443</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">pcr-rest-api/V4/Search/</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="jp@gc - JSON Path Extractor" enabled="true">
                  <stringProp name="VAR">apiCount</stringProp>
                  <stringProp name="JSONPATH">$.grouped.uri.ngroups</stringProp>
                  <stringProp name="DEFAULT">NOT FOUND</stringProp>
                  <stringProp name="VARIABLE"></stringProp>
                  <stringProp name="SUBJECT">BODY</stringProp>
                </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${contentType} - SOLR child count" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="indent" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">on</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">indent</stringProp>
                    </elementProp>
                    <elementProp name="q" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">_nested_id:child</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">q</stringProp>
                    </elementProp>
                    <elementProp name="wt" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">json</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">wt</stringProp>
                    </elementProp>
                    <elementProp name="fl" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">numFound</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">fl</stringProp>
                    </elementProp>
                    <elementProp name="&amp;omitHeader" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">true</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">&amp;omitHeader</stringProp>
                    </elementProp>
                    <elementProp name="rows" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">0</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">rows</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${solrServer}</stringProp>
                <stringProp name="HTTPSampler.port">8983</stringProp>
                <stringProp name="HTTPSampler.protocol">http</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">solr/${uatactiveSolrCollection}/select?</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="jp@gc - JSON Path Extractor" enabled="true">
                  <stringProp name="VAR">childCount</stringProp>
                  <stringProp name="JSONPATH">$..response.numFound</stringProp>
                  <stringProp name="DEFAULT">No child records</stringProp>
                  <stringProp name="VARIABLE"></stringProp>
                  <stringProp name="SUBJECT">BODY</stringProp>
                </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
                <hashTree/>
              </hashTree>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="${contentType} - Mongodb-Applicability Count" enabled="true">
                <stringProp name="cacheKey"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">import com.mongodb.*;
import com.mongodb.Block;
import com.mongodb.MongoClient;
import com.mongodb.MongoException;
import com.mongodb.client.MongoCollection;
import com.mongodb.client.MongoDatabase;
import java.util.Arrays;
import java.util.List;
import java.util.ArrayList;
import org.bson.BsonNull;
import org.bson.Document;
import org.bson.conversions.Bson;
import org.apache.jmeter.testelement;
import org.apache.jmeter.util.JMeterUtils; 




        

Properties properties = JMeterUtils.getJMeterProperties();
MongoClient coreMongoClient = properties.get(&quot;coreMongoClient&quot;); 
            
            MongoDatabase database = coreMongoClient.getDatabase(&quot;verisk_smartcontent&quot;);
            MongoCollection collection = database.getCollection(&quot;VERISK_APPLICABILITY_COLLECTION&quot;);
             BasicDBObject query = new BasicDBObject(&quot;metadata_classTable_id&quot;, new BasicDBObject(&quot;$exists&quot;,true));
             collection.count(query);
            

    


    
    
    
    </stringProp>
                <stringProp name="scriptLanguage">java</stringProp>
              </JSR223Sampler>
              <hashTree>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">mongoApplicabilityCount</stringProp>
                  <stringProp name="RegexExtractor.regex">(.*)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">asd</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
                <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                  <stringProp name="BeanShellAssertion.query">long var_mongoCount=Integer.parseInt(vars.get(&quot;dbCount&quot;));
long var_apiCount=Integer.parseInt(vars.get(&quot;apiCount&quot;));
long var_solrParentCount=Integer.parseInt(vars.get(&quot;parentCount_1&quot;));
long var_solrChildCount=Integer.parseInt(vars.get(&quot;childCount_1&quot;));
long var_mongoApplicabilityCount=Integer.parseInt(vars.get(&quot;mongoApplicabilityCount&quot;));


try{
	if ((var_mongoCount!=var_solrParentCount) &amp;&amp; (var_mongoCount!=var_apiCount)){
		Failure=true;
		FailureMessage=&quot;Parent Counts not matching&quot;;
	}

	else if(var_mongoApplicabilityCount!=var_solrChildCount){
		Failure=true;
		FailureMessage=&quot;Child Counts not matching&quot;;
	}

	else{
		Failure=false;
		log.info(&quot;Counts are matching&quot;);
	}
	

}catch(Exception e){
	Failure=true;
	FailureMessage=&quot;Counts not matching&quot;;
	
}


</stringProp>
                  <stringProp name="BeanShellAssertion.filename"></stringProp>
                  <stringProp name="BeanShellAssertion.parameters"></stringProp>
                  <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                </BeanShellAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller-FLV" enabled="false">
              <stringProp name="IfController.condition">&quot;${contentType}&quot;.equalsIgnoreCase(&quot;FLV&quot;)</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
            </IfController>
            <hashTree>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="${contentType} - Mongodb Count" enabled="true">
                <stringProp name="cacheKey">f253aa47-66e5-4ca5-b317-d80f883d4c8d</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">import com.mongodb.*;
import com.mongodb.BasicDBObject;
import com.mongodb.client.model.BsonField.*;
import org.apache.jmeter.util.JMeterUtils; 

long result;



   
Properties properties = JMeterUtils.getJMeterProperties();
MongoClient coreMongoClient = properties.get(&quot;coreMongoClient&quot;); 

    DB coreDB = coreMongoClient.getDB(&quot;verisk_smartcontent&quot;);
    DBCollection collection = coreDB.getCollection(&quot;VERISK_METADATA_COLLECTION&quot;);
    //BsonField a=new BsonField(&quot;uri&quot;,&quot;VERISK_001/FRM/FP10530905&quot;);
 	 BasicDBObject query = new BasicDBObject(&quot;contentType&quot;, &quot;${contentType}&quot;);
  	result=collection.count(query);</stringProp>
                <stringProp name="scriptLanguage">beanshell</stringProp>
              </JSR223Sampler>
              <hashTree>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">dbCount</stringProp>
                  <stringProp name="RegexExtractor.regex">(.*)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">asd</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${contentType} - SOLR parent count" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="indent" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">on</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">indent</stringProp>
                    </elementProp>
                    <elementProp name="q" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">_nested_id:parent</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">q</stringProp>
                    </elementProp>
                    <elementProp name="wt" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">json</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">wt</stringProp>
                    </elementProp>
                    <elementProp name="fl" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">numFound</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">fl</stringProp>
                    </elementProp>
                    <elementProp name="&amp;omitHeader" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">true</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">&amp;omitHeader</stringProp>
                    </elementProp>
                    <elementProp name="rows" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">0</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">rows</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${solrServer}</stringProp>
                <stringProp name="HTTPSampler.port">8983</stringProp>
                <stringProp name="HTTPSampler.protocol">http</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">solr/${uatactiveSolrCollection}/select?</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="jp@gc - JSON Path Extractor" enabled="true">
                  <stringProp name="VAR">parentCount</stringProp>
                  <stringProp name="JSONPATH">$..response.numFound</stringProp>
                  <stringProp name="DEFAULT">No child records</stringProp>
                  <stringProp name="VARIABLE"></stringProp>
                  <stringProp name="SUBJECT">BODY</stringProp>
                </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${contentType} -API Count" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
&quot;appId&quot;:&quot;${clientId}&quot;,&#xd;
&quot;clientId&quot;:&quot;${clientId}&quot;,&#xd;
&quot;requestId&quot;:&quot;3r436y 4yyuh46676uy7&quot;,&#xd;
&quot;pageSize&quot;:&quot;0&quot;,&#xd;
&quot;searchOption&quot;:&quot;facsimile&quot;,&#xd;
&quot;searchScope&quot;:&quot;ISOANDCLIENT&quot;,&#xd;
&quot;filterQuery&quot;:&quot;(contentType:\&quot;${contentType}\&quot;)&quot;,&#xd;
&quot;group&quot;:&quot;true&quot;,&#xd;
&quot;groupFields&quot;:&quot;uri&quot;,&#xd;
&quot;responseFields&quot;:&quot;ngroups&quot;&#xd;
}&#xd;
&#xd;
</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${server}</stringProp>
                <stringProp name="HTTPSampler.port">443</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">pcr-rest-api/V4/Search/</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="jp@gc - JSON Path Extractor" enabled="true">
                  <stringProp name="VAR">apiCount</stringProp>
                  <stringProp name="JSONPATH">$.grouped.uri.ngroups</stringProp>
                  <stringProp name="DEFAULT">NOT FOUND</stringProp>
                  <stringProp name="VARIABLE"></stringProp>
                  <stringProp name="SUBJECT">BODY</stringProp>
                </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${contentType} - SOLR child count" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="indent" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">on</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">indent</stringProp>
                    </elementProp>
                    <elementProp name="q" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">_nested_id:child</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">q</stringProp>
                    </elementProp>
                    <elementProp name="wt" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">json</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">wt</stringProp>
                    </elementProp>
                    <elementProp name="fl" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">numFound</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">fl</stringProp>
                    </elementProp>
                    <elementProp name="&amp;omitHeader" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">true</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">&amp;omitHeader</stringProp>
                    </elementProp>
                    <elementProp name="rows" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">0</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">rows</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${solrServer}</stringProp>
                <stringProp name="HTTPSampler.port">8983</stringProp>
                <stringProp name="HTTPSampler.protocol">http</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">solr/${uatactiveSolrCollection}/select?</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="jp@gc - JSON Path Extractor" enabled="true">
                  <stringProp name="VAR">childCount</stringProp>
                  <stringProp name="JSONPATH">$..response.numFound</stringProp>
                  <stringProp name="DEFAULT">No child records</stringProp>
                  <stringProp name="VARIABLE"></stringProp>
                  <stringProp name="SUBJECT">BODY</stringProp>
                </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
                <hashTree/>
              </hashTree>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="${contentType} - Mongodb-Applicability Count" enabled="true">
                <stringProp name="cacheKey"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">import com.mongodb.*;
import com.mongodb.Block;
import com.mongodb.MongoClient;
import com.mongodb.MongoException;
import com.mongodb.client.MongoCollection;
import com.mongodb.client.MongoDatabase;
import java.util.Arrays;
import java.util.List;
import java.util.ArrayList;
import org.bson.BsonNull;
import org.bson.Document;
import org.bson.conversions.Bson;
import org.apache.jmeter.testelement;
import org.apache.jmeter.util.JMeterUtils; 




        

Properties properties = JMeterUtils.getJMeterProperties();
MongoClient coreMongoClient = properties.get(&quot;coreMongoClient&quot;); 
            
            MongoDatabase database = coreMongoClient.getDatabase(&quot;verisk_smartcontent&quot;);
            MongoCollection collection = database.getCollection(&quot;VERISK_APPLICABILITY_COLLECTION&quot;);
             BasicDBObject query = new BasicDBObject(&quot;metadata_filing_id&quot;, new BasicDBObject(&quot;$exists&quot;,true));
             collection.count(query);
            

    


    
    
    
    
  	</stringProp>
                <stringProp name="scriptLanguage">beanshell</stringProp>
              </JSR223Sampler>
              <hashTree>
                <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="script">  log.info(&quot;beanshell total :&quot;+vars.get(${Total}));
  vars.put(&quot;Appcount&quot;,Total);</stringProp>
                </BeanShellPostProcessor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">mongoApplicabilityCount</stringProp>
                  <stringProp name="RegexExtractor.regex">(.*)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">asd</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
                <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                  <stringProp name="BeanShellAssertion.query">long var_mongoCount=Integer.parseInt(vars.get(&quot;dbCount&quot;));
long var_apiCount=Integer.parseInt(vars.get(&quot;apiCount&quot;));
long var_solrParentCount=Integer.parseInt(vars.get(&quot;parentCount_1&quot;));
long var_solrChildCount=Integer.parseInt(vars.get(&quot;childCount_1&quot;));
long var_mongoApplicabilityCount=Integer.parseInt(vars.get(&quot;mongoApplicabilityCount&quot;));


try{
	if ((var_mongoCount!=var_solrParentCount) &amp;&amp; (var_mongoCount!=var_apiCount)){
		Failure=true;
		FailureMessage=&quot;Parent Counts not matching&quot;;
	}

	else if(var_mongoApplicabilityCount!=var_solrChildCount){
		Failure=true;
		FailureMessage=&quot;Child Counts not matching&quot;;
	}

	else{
		Failure=false;
		log.info(&quot;Counts are matching&quot;);
	}
	

}catch(Exception e){
	Failure=true;
	FailureMessage=&quot;Counts not matching&quot;;
	
}


</stringProp>
                  <stringProp name="BeanShellAssertion.filename"></stringProp>
                  <stringProp name="BeanShellAssertion.parameters"></stringProp>
                  <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                </BeanShellAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller-PRM" enabled="true">
              <stringProp name="IfController.condition">&quot;${contentType}&quot;.equalsIgnoreCase(&quot;PRM&quot;)</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
            </IfController>
            <hashTree>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="${contentType} - Mongodb Count" enabled="true">
                <stringProp name="cacheKey">f253aa47-66e5-4ca5-b317-d80f883d4c8d</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">import org.apache.jmeter.util.JMeterUtils; 
import com.mongodb.*;
import com.mongodb.BasicDBObject;
import com.mongodb.client.model.BsonField.*;
import com.mongodb.Block;
import com.mongodb.MongoClient;
import com.mongodb.MongoException;
import com.mongodb.client.MongoCollection;
import com.mongodb.client.MongoDatabase;
import java.util.Arrays;
import java.util.List;
import java.util.ArrayList;
import org.bson.BsonNull;
import org.bson.Document;
import org.bson.conversions.Bson;
//import org.apache.jmeter.testelement;

long result;

Properties properties = JMeterUtils.getJMeterProperties();
MongoClient coreMongoClient = properties.get(&quot;coreMongoClient&quot;); 




		
    DB coreDB = coreMongoClient.getDB(&quot;verisk_smartcontent&quot;);
    DBCollection collection = coreDB.getCollection(&quot;VERISK_METADATA_COLLECTION&quot;);
   
 	BasicDBObject query = new BasicDBObject(&quot;contentType&quot;, &quot;${contentType}&quot;);
  	result=collection.count(query);
    

    


    
    
    
    </stringProp>
                <stringProp name="scriptLanguage">beanshell</stringProp>
              </JSR223Sampler>
              <hashTree>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">dbCount</stringProp>
                  <stringProp name="RegexExtractor.regex">(.*)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">asd</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${contentType} - SOLR parent count" enabled="false">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="indent" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">on</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">indent</stringProp>
                    </elementProp>
                    <elementProp name="q" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">_nested_id:parent</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">q</stringProp>
                    </elementProp>
                    <elementProp name="wt" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">json</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">wt</stringProp>
                    </elementProp>
                    <elementProp name="fl" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">numFound</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">fl</stringProp>
                    </elementProp>
                    <elementProp name="&amp;omitHeader" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">true</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">&amp;omitHeader</stringProp>
                    </elementProp>
                    <elementProp name="rows" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">0</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">rows</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${solrServer}</stringProp>
                <stringProp name="HTTPSampler.port">8983</stringProp>
                <stringProp name="HTTPSampler.protocol">http</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">solr/${uatactiveSolrCollection}/select?</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="jp@gc - JSON Path Extractor" enabled="true">
                  <stringProp name="VAR">parentCount</stringProp>
                  <stringProp name="JSONPATH">$..response.numFound</stringProp>
                  <stringProp name="DEFAULT">No child records</stringProp>
                  <stringProp name="VARIABLE"></stringProp>
                  <stringProp name="SUBJECT">BODY</stringProp>
                </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${contentType} -API Count" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
&quot;appId&quot;:&quot;${clientId}&quot;,&#xd;
&quot;clientId&quot;:&quot;${clientId}&quot;,&#xd;
&quot;requestId&quot;:&quot;3r436y 4yyuh46676uy7&quot;,&#xd;
&quot;pageSize&quot;:&quot;0&quot;,&#xd;
&quot;searchOption&quot;:&quot;facsimile&quot;,&#xd;
&quot;searchScope&quot;:&quot;ISOANDCLIENT&quot;,&#xd;
&quot;filterQuery&quot;:&quot;(contentType:\&quot;${contentType}\&quot;)&quot;,&#xd;
&quot;group&quot;:&quot;true&quot;,&#xd;
&quot;groupFields&quot;:&quot;uniqueId&quot;,&#xd;
&quot;responseFields&quot;:&quot;ngroups&quot;&#xd;
}&#xd;
&#xd;
</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${server}</stringProp>
                <stringProp name="HTTPSampler.port">443</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">pcr-rest-api/V4/Search/</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="jp@gc - JSON Path Extractor" enabled="true">
                  <stringProp name="VAR">apiCount</stringProp>
                  <stringProp name="JSONPATH">$.grouped.uri.ngroups</stringProp>
                  <stringProp name="DEFAULT">NOT FOUND</stringProp>
                  <stringProp name="VARIABLE"></stringProp>
                  <stringProp name="SUBJECT">BODY</stringProp>
                </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${contentType} - SOLR child count" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="indent" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">on</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">indent</stringProp>
                    </elementProp>
                    <elementProp name="q" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">_nested_id:child</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">q</stringProp>
                    </elementProp>
                    <elementProp name="wt" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">json</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">wt</stringProp>
                    </elementProp>
                    <elementProp name="fl" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">numFound</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">fl</stringProp>
                    </elementProp>
                    <elementProp name="&amp;omitHeader" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">true</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">&amp;omitHeader</stringProp>
                    </elementProp>
                    <elementProp name="rows" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">0</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">rows</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${solrServer}</stringProp>
                <stringProp name="HTTPSampler.port">8983</stringProp>
                <stringProp name="HTTPSampler.protocol">http</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">solr/${uatactiveSolrCollection}/select?</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="jp@gc - JSON Path Extractor" enabled="true">
                  <stringProp name="VAR">childCount</stringProp>
                  <stringProp name="JSONPATH">$..response.numFound</stringProp>
                  <stringProp name="DEFAULT">No child records</stringProp>
                  <stringProp name="VARIABLE"></stringProp>
                  <stringProp name="SUBJECT">BODY</stringProp>
                </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
                <hashTree/>
              </hashTree>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="${contentType} - Mongodb-Applicability Count" enabled="true">
                <stringProp name="cacheKey"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">import com.mongodb.Block;
import com.mongodb.MongoClient;
import com.mongodb.MongoException;
import com.mongodb.client.MongoCollection;
import com.mongodb.client.MongoDatabase;
import java.util.Arrays;
import java.util.List;
import java.util.ArrayList;
import org.bson.BsonNull;
import org.bson.Document;
import org.bson.conversions.Bson;
import org.apache.jmeter.testelement.property.JMeterProperty;
import org.apache.jmeter.util.JMeterUtils;


       
Properties properties = JMeterUtils.getJMeterProperties();
MongoClient coreMongoClient = properties.get(&quot;coreMongoClient&quot;); 
            
            MongoDatabase database = coreMongoClient.getDatabase(&quot;verisk_smartcontent&quot;);
            MongoCollection collection = database.getCollection(&quot;VERISK_METADATA_COLLECTION&quot;);
            
            List pipeline = new ArrayList();
            List lsc_applicability_docs = new ArrayList();
            List applicability_size = new ArrayList();
            applicability_size.add(&quot;$prm_applicability_docs&quot;);
            applicability_size.add(&quot;0.0&quot;);
            pipeline.add(
                    new Document()
                            .append(&quot;$match&quot;, new Document()
                                    .append(&quot;contentType&quot;, &quot;PRM&quot;)
                            ));
           pipeline.add(new Document()
                            .append(&quot;$lookup&quot;, new Document()
                                   .append(&quot;from&quot;, &quot;VERISK_APPLICABILITY_COLLECTION&quot;)
                                    .append(&quot;localField&quot;, &quot;metadata_prm_id&quot;)
                                    .append(&quot;foreignField&quot;, &quot;metadata_prm_id&quot;)
                                    .append(&quot;as&quot;, &quot;prm_applicability_docs&quot;)
                            )); 
            pipeline.add(new Document()
                            .append(&quot;$unwind&quot;, &quot;$doc_id&quot;)
                            );
                                                           
           pipeline.add(new Document()
                            .append(&quot;$project&quot;, new Document()
                                     .append(&quot;docCount&quot;, new Document()
                                            .append(&quot;$size&quot;, new Document()
                                                    .append(&quot;$ifNull&quot;, applicability_size)
                                                    )
                                            )
                                    )
                            );
                            
           pipeline.add(new Document()
                            .append(&quot;$group&quot;, new Document()
                                    .append(&quot;_id&quot;, new BsonNull())
                                    .append(&quot;Total&quot;, new Document()
                                            .append(&quot;$sum&quot;, &quot;$docCount&quot;)
                                    )
                            ));
           pipeline.add(new Document()
                            .append(&quot;$project&quot;, new Document()
                                    .append(&quot;Total&quot;, 1.0)
                                    .append(&quot;_id&quot;, 0.0)
                            ));
            
           collection.aggregate(pipeline).first().get(&quot;Total&quot;);

          

           
         
            
       

</stringProp>
                <stringProp name="scriptLanguage">java</stringProp>
              </JSR223Sampler>
              <hashTree>
                <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="script">  log.info(&quot;beanshell total :&quot;+vars.get(${Total}));
  vars.put(&quot;Appcount&quot;,Total);</stringProp>
                </BeanShellPostProcessor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">mongoApplicabilityCount</stringProp>
                  <stringProp name="RegexExtractor.regex">(.*)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">asd</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
                <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                  <stringProp name="BeanShellAssertion.query">long var_mongoCount=Integer.parseInt(vars.get(&quot;dbCount&quot;));
long var_apiCount=Integer.parseInt(vars.get(&quot;apiCount&quot;));
long var_solrParentCount=Integer.parseInt(vars.get(&quot;parentCount_1&quot;));
long var_solrChildCount=Integer.parseInt(vars.get(&quot;childCount_1&quot;));
long var_mongoApplicabilityCount=Integer.parseInt(vars.get(&quot;mongoApplicabilityCount&quot;));


try{
	if ((var_mongoCount!=var_solrParentCount) &amp;&amp; (var_mongoCount!=var_apiCount)){
		Failure=true;
		FailureMessage=&quot;Parent Counts not matching&quot;;
	}

	else if(var_mongoApplicabilityCount!=var_solrChildCount){
		Failure=true;
		FailureMessage=&quot;Child Counts not matching&quot;;
	}

	else{
		Failure=false;
		log.info(&quot;Counts are matching&quot;);
	}
	

}catch(Exception e){
	Failure=true;
	FailureMessage=&quot;Counts not matching&quot;;
	
}


</stringProp>
                  <stringProp name="BeanShellAssertion.filename"></stringProp>
                  <stringProp name="BeanShellAssertion.parameters"></stringProp>
                  <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                </BeanShellAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller-RUL" enabled="true">
              <stringProp name="IfController.condition">&quot;${contentType}&quot;.equalsIgnoreCase(&quot;RUL&quot;)</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
            </IfController>
            <hashTree>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="${contentType} - Mongodb Count" enabled="true">
                <stringProp name="cacheKey">f253aa47-66e5-4ca5-b317-d80f883d4c8d</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">import org.apache.jmeter.util.JMeterUtils; 
import com.mongodb.*;
import com.mongodb.BasicDBObject;
import com.mongodb.client.model.BsonField.*;
import com.mongodb.Block;
import com.mongodb.MongoClient;
import com.mongodb.MongoException;
import com.mongodb.client.MongoCollection;
import com.mongodb.client.MongoDatabase;
import java.util.Arrays;
import java.util.List;
import java.util.ArrayList;
import org.bson.BsonNull;
import org.bson.Document;
import org.bson.conversions.Bson;
//import org.apache.jmeter.testelement;

long result;

Properties properties = JMeterUtils.getJMeterProperties();
MongoClient coreMongoClient = properties.get(&quot;coreMongoClient&quot;); 




		
    DB coreDB = coreMongoClient.getDB(&quot;verisk_smartcontent&quot;);
    DBCollection collection = coreDB.getCollection(&quot;VERISK_METADATA_COLLECTION&quot;);
   
 	BasicDBObject query = new BasicDBObject(&quot;contentType&quot;, &quot;${contentType}&quot;);
  	result=collection.count(query);
    

    


    
    
    
    </stringProp>
                <stringProp name="scriptLanguage">beanshell</stringProp>
              </JSR223Sampler>
              <hashTree>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">dbCount</stringProp>
                  <stringProp name="RegexExtractor.regex">(.*)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">asd</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${contentType} - SOLR parent count" enabled="false">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="indent" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">on</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">indent</stringProp>
                    </elementProp>
                    <elementProp name="q" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">_nested_id:parent</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">q</stringProp>
                    </elementProp>
                    <elementProp name="wt" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">json</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">wt</stringProp>
                    </elementProp>
                    <elementProp name="fl" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">numFound</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">fl</stringProp>
                    </elementProp>
                    <elementProp name="&amp;omitHeader" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">true</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">&amp;omitHeader</stringProp>
                    </elementProp>
                    <elementProp name="rows" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">0</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">rows</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${solrServer}</stringProp>
                <stringProp name="HTTPSampler.port">8983</stringProp>
                <stringProp name="HTTPSampler.protocol">http</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">solr/${uatactiveSolrCollection}/select?</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="jp@gc - JSON Path Extractor" enabled="true">
                  <stringProp name="VAR">parentCount</stringProp>
                  <stringProp name="JSONPATH">$..response.numFound</stringProp>
                  <stringProp name="DEFAULT">No child records</stringProp>
                  <stringProp name="VARIABLE"></stringProp>
                  <stringProp name="SUBJECT">BODY</stringProp>
                </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${contentType} -API Count" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
&quot;appId&quot;:&quot;${clientId}&quot;,&#xd;
&quot;clientId&quot;:&quot;${clientId}&quot;,&#xd;
&quot;requestId&quot;:&quot;3r436y 4yyuh46676uy7&quot;,&#xd;
&quot;pageSize&quot;:&quot;0&quot;,&#xd;
&quot;searchOption&quot;:&quot;facsimile&quot;,&#xd;
&quot;searchScope&quot;:&quot;ISOANDCLIENT&quot;,&#xd;
&quot;filterQuery&quot;:&quot;(contentType:\&quot;${contentType}\&quot;)&quot;,&#xd;
&quot;group&quot;:&quot;true&quot;,&#xd;
&quot;groupFields&quot;:&quot;uniqueId&quot;,&#xd;
&quot;responseFields&quot;:&quot;ngroups&quot;&#xd;
}&#xd;
&#xd;
</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${server}</stringProp>
                <stringProp name="HTTPSampler.port">443</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">pcr-rest-api/V4/Search/</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="jp@gc - JSON Path Extractor" enabled="true">
                  <stringProp name="VAR">apiCount</stringProp>
                  <stringProp name="JSONPATH">$.grouped.uri.ngroups</stringProp>
                  <stringProp name="DEFAULT">NOT FOUND</stringProp>
                  <stringProp name="VARIABLE"></stringProp>
                  <stringProp name="SUBJECT">BODY</stringProp>
                </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${contentType} - SOLR child count" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="indent" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">on</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">indent</stringProp>
                    </elementProp>
                    <elementProp name="q" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">_nested_id:child</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">q</stringProp>
                    </elementProp>
                    <elementProp name="wt" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">json</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">wt</stringProp>
                    </elementProp>
                    <elementProp name="fl" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">numFound</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">fl</stringProp>
                    </elementProp>
                    <elementProp name="&amp;omitHeader" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">true</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">&amp;omitHeader</stringProp>
                    </elementProp>
                    <elementProp name="rows" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">0</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">rows</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${solrServer}</stringProp>
                <stringProp name="HTTPSampler.port">8983</stringProp>
                <stringProp name="HTTPSampler.protocol">http</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">solr/${uatactiveSolrCollection}/select?</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="jp@gc - JSON Path Extractor" enabled="true">
                  <stringProp name="VAR">childCount</stringProp>
                  <stringProp name="JSONPATH">$..response.numFound</stringProp>
                  <stringProp name="DEFAULT">No child records</stringProp>
                  <stringProp name="VARIABLE"></stringProp>
                  <stringProp name="SUBJECT">BODY</stringProp>
                </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
                <hashTree/>
              </hashTree>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="${contentType} - Mongodb-Applicability Count" enabled="true">
                <stringProp name="cacheKey"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">import com.mongodb.Block;
import com.mongodb.MongoClient;
import com.mongodb.MongoException;
import com.mongodb.client.MongoCollection;
import com.mongodb.client.MongoDatabase;
import java.util.Arrays;
import java.util.List;
import java.util.ArrayList;
import org.bson.BsonNull;
import org.bson.Document;
import org.bson.conversions.Bson;
import org.apache.jmeter.testelement.property.JMeterProperty;
import org.apache.jmeter.util.JMeterUtils;
       
Properties properties = JMeterUtils.getJMeterProperties();
MongoClient coreMongoClient = properties.get(&quot;coreMongoClient&quot;); 
            
            MongoDatabase database = coreMongoClient.getDatabase(&quot;verisk_smartcontent&quot;);
            MongoCollection collection = database.getCollection(&quot;VERISK_METADATA_COLLECTION&quot;);
            
            List pipeline = new ArrayList();
            List lsc_applicability_docs = new ArrayList();
            List applicability_size = new ArrayList();
            applicability_size.add(&quot;$rul_applicability_docs&quot;);
            applicability_size.add(&quot;0.0&quot;);
            pipeline.add(
                    new Document()
                            .append(&quot;$match&quot;, new Document()
                                    .append(&quot;contentType&quot;, &quot;RUL&quot;)
                            ));
           pipeline.add(new Document()
                            .append(&quot;$lookup&quot;, new Document()
                                   .append(&quot;from&quot;, &quot;VERISK_APPLICABILITY_COLLECTION&quot;)
                                    .append(&quot;localField&quot;, &quot;metadata_rul_id&quot;)
                                    .append(&quot;foreignField&quot;, &quot;metadata_rul_id&quot;)
                                    .append(&quot;as&quot;, &quot;rul_applicability_docs&quot;)
                            )); 
            pipeline.add(new Document()
                            .append(&quot;$unwind&quot;, &quot;$doc_id&quot;)
                            );
                                                           
           pipeline.add(new Document()
                            .append(&quot;$project&quot;, new Document()
                                     .append(&quot;docCount&quot;, new Document()
                                            .append(&quot;$size&quot;, new Document()
                                                    .append(&quot;$ifNull&quot;, applicability_size)
                                                    )
                                            )
                                    )
                            );
                            
           pipeline.add(new Document()
                            .append(&quot;$group&quot;, new Document()
                                    .append(&quot;_id&quot;, new BsonNull())
                                    .append(&quot;Total&quot;, new Document()
                                            .append(&quot;$sum&quot;, &quot;$docCount&quot;)
                                    )
                            ));
           pipeline.add(new Document()
                            .append(&quot;$project&quot;, new Document()
                                    .append(&quot;Total&quot;, 1.0)
                                    .append(&quot;_id&quot;, 0.0)
                            ));
            
           collection.aggregate(pipeline).first().get(&quot;Total&quot;);

          

           
         
            
       

</stringProp>
                <stringProp name="scriptLanguage">java</stringProp>
              </JSR223Sampler>
              <hashTree>
                <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="script">  log.info(&quot;beanshell total :&quot;+vars.get(${Total}));
  vars.put(&quot;Appcount&quot;,Total);</stringProp>
                </BeanShellPostProcessor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">mongoApplicabilityCount</stringProp>
                  <stringProp name="RegexExtractor.regex">(.*)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">asd</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
                <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                  <stringProp name="BeanShellAssertion.query">long var_mongoCount=Integer.parseInt(vars.get(&quot;dbCount&quot;));
long var_apiCount=Integer.parseInt(vars.get(&quot;apiCount&quot;));
long var_solrParentCount=Integer.parseInt(vars.get(&quot;parentCount_1&quot;));
long var_solrChildCount=Integer.parseInt(vars.get(&quot;childCount_1&quot;));
long var_mongoApplicabilityCount=Integer.parseInt(vars.get(&quot;mongoApplicabilityCount&quot;));


try{
	if ((var_mongoCount!=var_solrParentCount) &amp;&amp; (var_mongoCount!=var_apiCount)){
		Failure=true;
		FailureMessage=&quot;Parent Counts not matching&quot;;
	}

	else if(var_mongoApplicabilityCount!=var_solrChildCount){
		Failure=true;
		FailureMessage=&quot;Child Counts not matching&quot;;
	}

	else{
		Failure=false;
		log.info(&quot;Counts are matching&quot;);
	}
	

}catch(Exception e){
	Failure=true;
	FailureMessage=&quot;Counts not matching&quot;;
	
}


</stringProp>
                  <stringProp name="BeanShellAssertion.filename"></stringProp>
                  <stringProp name="BeanShellAssertion.parameters"></stringProp>
                  <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                </BeanShellAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller-LSC" enabled="true">
              <stringProp name="IfController.condition">&quot;${contentType}&quot;.equalsIgnoreCase(&quot;LSC&quot;)</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
            </IfController>
            <hashTree>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="${contentType} - Mongodb Count" enabled="true">
                <stringProp name="cacheKey">f253aa47-66e5-4ca5-b317-d80f883d4c8d</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">import org.apache.jmeter.util.JMeterUtils; 
import com.mongodb.*;
import com.mongodb.BasicDBObject;
import com.mongodb.client.model.BsonField.*;
import com.mongodb.Block;
import com.mongodb.MongoClient;
import com.mongodb.MongoException;
import com.mongodb.client.MongoCollection;
import com.mongodb.client.MongoDatabase;
import java.util.Arrays;
import java.util.List;
import java.util.ArrayList;
import org.bson.BsonNull;
import org.bson.Document;
import org.bson.conversions.Bson;
//import org.apache.jmeter.testelement;

long result;

Properties properties = JMeterUtils.getJMeterProperties();
MongoClient coreMongoClient = properties.get(&quot;coreMongoClient&quot;); 




		
    DB coreDB = coreMongoClient.getDB(&quot;verisk_smartcontent&quot;);
    DBCollection collection = coreDB.getCollection(&quot;VERISK_METADATA_COLLECTION&quot;);
   
 	BasicDBObject query = new BasicDBObject(&quot;contentType&quot;, &quot;${contentType}&quot;);
  	result=collection.count(query);
    

    


    
    
    
    </stringProp>
                <stringProp name="scriptLanguage">beanshell</stringProp>
              </JSR223Sampler>
              <hashTree>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">dbCount</stringProp>
                  <stringProp name="RegexExtractor.regex">(.*)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">asd</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${contentType} - SOLR parent count" enabled="false">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="indent" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">on</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">indent</stringProp>
                    </elementProp>
                    <elementProp name="q" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">_nested_id:parent</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">q</stringProp>
                    </elementProp>
                    <elementProp name="wt" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">json</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">wt</stringProp>
                    </elementProp>
                    <elementProp name="fl" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">numFound</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">fl</stringProp>
                    </elementProp>
                    <elementProp name="&amp;omitHeader" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">true</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">&amp;omitHeader</stringProp>
                    </elementProp>
                    <elementProp name="rows" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">0</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">rows</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${solrServer}</stringProp>
                <stringProp name="HTTPSampler.port">8983</stringProp>
                <stringProp name="HTTPSampler.protocol">http</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">solr/${uatactiveSolrCollection}/select?</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="jp@gc - JSON Path Extractor" enabled="true">
                  <stringProp name="VAR">parentCount</stringProp>
                  <stringProp name="JSONPATH">$..response.numFound</stringProp>
                  <stringProp name="DEFAULT">No child records</stringProp>
                  <stringProp name="VARIABLE"></stringProp>
                  <stringProp name="SUBJECT">BODY</stringProp>
                </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${contentType} -API Count" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
&quot;appId&quot;:&quot;${clientId}&quot;,&#xd;
&quot;clientId&quot;:&quot;${clientId}&quot;,&#xd;
&quot;requestId&quot;:&quot;3r436y 4yyuh46676uy7&quot;,&#xd;
&quot;pageSize&quot;:&quot;0&quot;,&#xd;
&quot;searchOption&quot;:&quot;facsimile&quot;,&#xd;
&quot;searchScope&quot;:&quot;ISOANDCLIENT&quot;,&#xd;
&quot;filterQuery&quot;:&quot;(contentType:\&quot;${contentType}\&quot;)&quot;,&#xd;
&quot;group&quot;:&quot;true&quot;,&#xd;
&quot;groupFields&quot;:&quot;uniqueId&quot;,&#xd;
&quot;responseFields&quot;:&quot;ngroups&quot;&#xd;
}&#xd;
&#xd;
</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${server}</stringProp>
                <stringProp name="HTTPSampler.port">443</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">pcr-rest-api/V4/Search/</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="jp@gc - JSON Path Extractor" enabled="true">
                  <stringProp name="VAR">apiCount</stringProp>
                  <stringProp name="JSONPATH">$.grouped.uri.ngroups</stringProp>
                  <stringProp name="DEFAULT">NOT FOUND</stringProp>
                  <stringProp name="VARIABLE"></stringProp>
                  <stringProp name="SUBJECT">BODY</stringProp>
                </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${contentType} - SOLR child count" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="indent" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">on</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">indent</stringProp>
                    </elementProp>
                    <elementProp name="q" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">_nested_id:child</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">q</stringProp>
                    </elementProp>
                    <elementProp name="wt" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">json</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">wt</stringProp>
                    </elementProp>
                    <elementProp name="fl" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">numFound</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">fl</stringProp>
                    </elementProp>
                    <elementProp name="&amp;omitHeader" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">true</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">&amp;omitHeader</stringProp>
                    </elementProp>
                    <elementProp name="rows" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">0</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">rows</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${solrServer}</stringProp>
                <stringProp name="HTTPSampler.port">8983</stringProp>
                <stringProp name="HTTPSampler.protocol">http</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">solr/${uatactiveSolrCollection}/select?</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="jp@gc - JSON Path Extractor" enabled="true">
                  <stringProp name="VAR">childCount</stringProp>
                  <stringProp name="JSONPATH">$..response.numFound</stringProp>
                  <stringProp name="DEFAULT">No child records</stringProp>
                  <stringProp name="VARIABLE"></stringProp>
                  <stringProp name="SUBJECT">BODY</stringProp>
                </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
                <hashTree/>
              </hashTree>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="${contentType} - Mongodb-Applicability Count" enabled="true">
                <stringProp name="cacheKey"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">
import com.mongodb.Block;
import com.mongodb.MongoClient;
import com.mongodb.MongoException;
import com.mongodb.client.MongoCollection;
import com.mongodb.client.MongoDatabase;
import java.util.Arrays;
import java.util.List;
import java.util.ArrayList;
import org.bson.BsonNull;
import org.bson.Document;
import org.bson.conversions.Bson;
import org.apache.jmeter.testelement.property.JMeterProperty;
import org.apache.jmeter.util.JMeterUtils;
     
     
Properties properties = JMeterUtils.getJMeterProperties();
MongoClient coreMongoClient = properties.get(&quot;coreMongoClient&quot;); 
            
            MongoDatabase database = coreMongoClient.getDatabase(&quot;verisk_smartcontent&quot;);
            MongoCollection collection = database.getCollection(&quot;VERISK_METADATA_COLLECTION&quot;);
            
            List pipeline = new ArrayList();
            List lsc_applicability_docs = new ArrayList();
            List applicability_size = new ArrayList();
            applicability_size.add(&quot;$lsc_applicability_docs&quot;);
            applicability_size.add(&quot;0.0&quot;);
            pipeline.add(
                    new Document()
                            .append(&quot;$match&quot;, new Document()
                                    .append(&quot;contentType&quot;, &quot;LSC&quot;)
                            ));
           pipeline.add(new Document()
                            .append(&quot;$lookup&quot;, new Document()
                                   .append(&quot;from&quot;, &quot;VERISK_APPLICABILITY_COLLECTION&quot;)
                                    .append(&quot;localField&quot;, &quot;metadata_lsc_id&quot;)
                                    .append(&quot;foreignField&quot;, &quot;metadata_lsc_id&quot;)
                                    .append(&quot;as&quot;, &quot;lsc_applicability_docs&quot;)
                            )); 
            pipeline.add(new Document()
                            .append(&quot;$unwind&quot;, &quot;$doc_id&quot;)
                            );
                                                           
           pipeline.add(new Document()
                            .append(&quot;$project&quot;, new Document()
                                     .append(&quot;docCount&quot;, new Document()
                                            .append(&quot;$size&quot;, new Document()
                                                    .append(&quot;$ifNull&quot;, applicability_size)
                                                    )
                                            )
                                    )
                            );
                            
           pipeline.add(new Document()
                            .append(&quot;$group&quot;, new Document()
                                    .append(&quot;_id&quot;, new BsonNull())
                                    .append(&quot;Total&quot;, new Document()
                                            .append(&quot;$sum&quot;, &quot;$docCount&quot;)
                                    )
                            ));
           pipeline.add(new Document()
                            .append(&quot;$project&quot;, new Document()
                                    .append(&quot;Total&quot;, 1.0)
                                    .append(&quot;_id&quot;, 0.0)
                            ));
            
           collection.aggregate(pipeline).first().get(&quot;Total&quot;);

           

       

           
         
            
       

</stringProp>
                <stringProp name="scriptLanguage">java</stringProp>
              </JSR223Sampler>
              <hashTree>
                <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="script">  log.info(&quot;beanshell total :&quot;+vars.get(${Total}));
  vars.put(&quot;Appcount&quot;,Total);</stringProp>
                </BeanShellPostProcessor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">mongoApplicabilityCount</stringProp>
                  <stringProp name="RegexExtractor.regex">(.*)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">asd</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
                <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                  <stringProp name="BeanShellAssertion.query">long var_mongoCount=Integer.parseInt(vars.get(&quot;dbCount&quot;));
long var_apiCount=Integer.parseInt(vars.get(&quot;apiCount&quot;));
long var_solrParentCount=Integer.parseInt(vars.get(&quot;parentCount_1&quot;));
long var_solrChildCount=Integer.parseInt(vars.get(&quot;childCount_1&quot;));
long var_mongoApplicabilityCount=Integer.parseInt(vars.get(&quot;mongoApplicabilityCount&quot;));


try{
	if ((var_mongoCount!=var_solrParentCount) &amp;&amp; (var_mongoCount!=var_apiCount)){
		Failure=true;
		FailureMessage=&quot;Parent Counts not matching&quot;;
	}

	else if(var_mongoApplicabilityCount!=var_solrChildCount){
		Failure=true;
		FailureMessage=&quot;Child Counts not matching&quot;;
	}

	else{
		Failure=false;
		log.info(&quot;Counts are matching&quot;);
	}
	

}catch(Exception e){
	Failure=true;
	FailureMessage=&quot;Counts not matching&quot;;
	
}


</stringProp>
                  <stringProp name="BeanShellAssertion.filename"></stringProp>
                  <stringProp name="BeanShellAssertion.parameters"></stringProp>
                  <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                </BeanShellAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
        </hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="flush" enabled="true">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey"></stringProp>
          <stringProp name="script">import com.mongodb.*;
import org.apache.jmeter.util.JMeterUtils; 
import org.apache.jmeter.testelement.property.CollectionProperty;
import org.apache.jmeter.services.FileServer;
import com.mongodb.MongoClient;
import com.mongodb.MongoCredential;

Properties properties = JMeterUtils.getJMeterProperties();
MongoClient coreMongoClient = properties.get(&quot;coreMongoClient&quot;); 
CollectionProperty csvFile=new CollectionProperty();



coreMongoClient.close()
try
{
	coreMongoClient.getDatabaseNames()
}
catch (Exception e)
{
	log.info &quot;Connection already closed&quot;
}

csvFile.clear();


</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
    </hashTree>
    <WorkBench guiclass="WorkBenchGui" testclass="WorkBench" testname="WorkBench" enabled="true">
      <boolProp name="WorkBench.save">true</boolProp>
    </WorkBench>
    <hashTree/>
  </hashTree>
</jmeterTestPlan>
