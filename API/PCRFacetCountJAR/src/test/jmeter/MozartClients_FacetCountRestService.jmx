<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="3.2" jmeter="3.3 r1808647">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1538048488000</longProp>
        <longProp name="ThreadGroup.end_time">1538048488000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="uatserver" elementType="Argument">
              <stringProp name="Argument.name">uatserver</stringProp>
              <stringProp name="Argument.value">pcr-uat.iso.com</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="csv" elementType="Argument">
              <stringProp name="Argument.name">csv</stringProp>
              <stringProp name="Argument.value">${__property(csvSource,,C:\Users\i20918\Desktop\PCR\pcr_automation\pcr_test\develop\pcr.test\API\PCRFacetCountJAR\src\test\resources)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.desc">C://Users//i20918//Desktop//PCR//APITestData</stringProp>
            </elementProp>
            <elementProp name="Environment" elementType="Argument">
              <stringProp name="Argument.name">Environment</stringProp>
              <stringProp name="Argument.value">${__property(Server,,PROD)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="stgserver" elementType="Argument">
              <stringProp name="Argument.name">stgserver</stringProp>
              <stringProp name="Argument.value">staging-content.iso.com</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="prodserver" elementType="Argument">
              <stringProp name="Argument.name">prodserver</stringProp>
              <stringProp name="Argument.value">pcr-content.iso.com</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="devserver" elementType="Argument">
              <stringProp name="Argument.name">devserver</stringProp>
              <stringProp name="Argument.value">pcr-dev.iso.com</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
          <stringProp name="BeanShellSampler.query">		if(vars.get(&quot;Environment&quot;).equalsIgnoreCase(&quot;prod&quot;))
		{
			vars.put(&quot;server&quot;,vars.get(&quot;prodserver&quot;));
			vars.put(&quot;port&quot;,&quot;443&quot;);
			vars.put(&quot;protoc&quot;,&quot;https&quot;);
			
		}
		else if(vars.get(&quot;Environment&quot;).equalsIgnoreCase(&quot;stg&quot;))
		{
			vars.put(&quot;server&quot;,vars.get(&quot;stgserver&quot;));
			vars.put(&quot;port&quot;,&quot;443&quot;);
			vars.put(&quot;protoc&quot;,&quot;https&quot;);
			
		}
		else if(vars.get(&quot;Environment&quot;).equalsIgnoreCase(&quot;uat&quot;))
		{
			vars.put(&quot;server&quot;,vars.get(&quot;uatserver&quot;));
			vars.put(&quot;port&quot;,&quot;443&quot;);
			vars.put(&quot;protoc&quot;,&quot;https&quot;);
			
		}
		else if(vars.get(&quot;Environment&quot;).equalsIgnoreCase(&quot;dev&quot;))
		{
			vars.put(&quot;server&quot;,vars.get(&quot;devserver&quot;));
			vars.put(&quot;port&quot;,&quot;443&quot;);
			vars.put(&quot;protoc&quot;,&quot;https&quot;);
			
		}</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Content-Type</stringProp>
              <stringProp name="Header.value">application/json</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="While Controller-Mozart_Clients" enabled="true">
          <stringProp name="WhileController.condition">contentType
</stringProp>
        </WhileController>
        <hashTree>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
            <stringProp name="delimiter">,</stringProp>
            <stringProp name="fileEncoding"></stringProp>
            <stringProp name="filename">${csv}/MozartClients_FacetCount_${Environment}.csv</stringProp>
            <boolProp name="ignoreFirstLine">true</boolProp>
            <boolProp name="quotedData">true</boolProp>
            <boolProp name="recycle">false</boolProp>
            <stringProp name="shareMode">shareMode.all</stringProp>
            <boolProp name="stopThread">true</boolProp>
            <stringProp name="variableNames">contentType,Company,clientId,facetFields,facetLimit</stringProp>
          </CSVDataSet>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${Company} -Facet count Verification" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;clientId&quot;:&quot;MOZARTV2_${clientId}&quot;,&#xd;
&quot;requestId&quot;:&quot;b4bd3b6e-fcb5-449c-959c-5a8b2d0f83d9&quot;,&#xd;
&quot;searchScope&quot;:&quot;CLIENT&quot;,&#xd;
&quot;pageNumber&quot;:&quot;1&quot;,&#xd;
&quot;pageSize&quot;:&quot;1&quot;,&#xd;
&quot;searchOption&quot;:&quot;facsimile&quot;,&#xd;
&quot;group&quot;:&quot;true&quot;,&#xd;
&quot;groupFields&quot;:&quot;formNumber&quot;,&#xd;
&quot;facet&quot;:&quot;true&quot;,&#xd;
&quot;facetFields&quot;:&quot;formNumber&quot;,&#xd;
&quot;groupFacet&quot;:&quot;true&quot;,&#xd;
&quot;facetLimit&quot;:&quot;${facetLimit}&quot;,&#xd;
&quot;query&quot;:&quot;(contentType:${contentType}  AND  cc_IsDeleted: N AND cc_ApplicabilityType:SA AND formStatus:P AND  -cc_Library:ISO )&quot;,&#xd;
&quot;appId&quot;:&quot;MOZARTV2_${clientId}&quot;&#xd;
}&#xd;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${server}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">pcr-rest-api/V4/Search/</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="jp@gc - JSON Path Extractor" enabled="true">
              <stringProp name="VAR">jsonNgroups</stringProp>
              <stringProp name="JSONPATH">$.grouped.formNumber.ngroups</stringProp>
              <stringProp name="DEFAULT">NOT FOUND</stringProp>
              <stringProp name="VARIABLE"></stringProp>
              <stringProp name="SUBJECT">BODY</stringProp>
            </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
            <hashTree/>
            <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="jp@gc - JSON Path Extractor" enabled="true">
              <stringProp name="VAR">JSONFacet</stringProp>
              <stringProp name="JSONPATH">$.facet_counts.facet_fields.formNumber</stringProp>
              <stringProp name="DEFAULT">NOT FOUND</stringProp>
              <stringProp name="VARIABLE"></stringProp>
              <stringProp name="SUBJECT">BODY</stringProp>
            </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
              <stringProp name="BeanShellAssertion.query">int ngroups=Integer.parseInt(vars.get(&quot;jsonNgroups&quot;));
log.info(&quot;Jyotish :&quot;+ngroups);
int facetCount=0;
log.info(&quot;Before :&quot;+facetCount);


if (ngroups!=0){
	String facet=vars.get(&quot;JSONFacet&quot;);
	log.info(&quot;facet :&quot;+facet);
	String[] facetArr=facet.split(&quot;,&quot;,0);
	 facetCount=facetArr.length;
}

log.info(&quot;After :&quot;+facetCount);

if (ngroups==0){
	Failure=true;
	FailureMessage=&quot;There are no reocrds for this client&quot;;
}
	
else if (ngroups!=facetCount){
	Failure=true;
	FailureMessage=&quot;ngroups: &quot;+ngroups+&quot; facetCount: &quot;+facetCount+&quot; Facet Count do not match&quot;;
}else{
	Failure=false;
}


</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
    </hashTree>
    <WorkBench guiclass="WorkBenchGui" testclass="WorkBench" testname="WorkBench" enabled="true">
      <boolProp name="WorkBench.save">true</boolProp>
    </WorkBench>
    <hashTree/>
  </hashTree>
</jmeterTestPlan>
